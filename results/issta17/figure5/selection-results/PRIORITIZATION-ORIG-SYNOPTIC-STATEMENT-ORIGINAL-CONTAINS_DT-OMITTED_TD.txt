The following arguments were used to generate this output.
[-technique, prioritization, -coverage, statement, -order, original, -origOrder, dynoptic-ea407ba0a750/synoptic-orig-order, -testInputDir, dynoptic/sootTestOutput-orig-selection, -filesToDelete, dynoptic-ea407ba0a750/synoptic-env-files, -project, Synoptic, -testType, orig, -outputDir, /homes/gws/winglam/winglam/ambari/dependent-tests-impact/experiments/selection-results, -timesToRun, 1, -getCoverage]

Execution time of TLG and its time to find/nullify any DTs for 1 machine (does not include the time to run the tests in the new order): 2.919
Number of tests selected out of total in original order: 118 / 118
Number of DTs not fixed: 0
Number of DTs fixed: 0
APFD value: 0.26976818002491565
Execution time for executing the following testing order: 0.334

Test order list:
[dynoptic.invariants.NeverFollowedByTests.create, dynoptic.invariants.NeverFollowedByTests.testSatisfies, dynoptic.invariants.NeverFollowedByTests.getFirstSecond, dynoptic.invariants.NeverFollowedByTests.scmBadStatesString, dynoptic.invariants.NeverFollowedByTests.equality, dynoptic.invariants.AlwaysPrecedesTests.create, dynoptic.invariants.AlwaysPrecedesTests.testSatisfies, dynoptic.invariants.AlwaysPrecedesTests.getFirstSecond, dynoptic.invariants.AlwaysPrecedesTests.scmBadStatesString, dynoptic.invariants.AlwaysPrecedesTests.equality, dynoptic.invariants.EventuallyHappensTests.create, dynoptic.invariants.EventuallyHappensTests.testSatisfies, dynoptic.invariants.EventuallyHappensTests.getFirstSecond, dynoptic.invariants.EventuallyHappensTests.scmBadStatesString, dynoptic.invariants.EventuallyHappensTests.equality, dynoptic.invariants.AlwaysFollowedByTests.create, dynoptic.invariants.AlwaysFollowedByTests.testSatisfies, dynoptic.invariants.AlwaysFollowedByTests.getFirstSecond, dynoptic.invariants.AlwaysFollowedByTests.scmBadStatesString, dynoptic.invariants.AlwaysFollowedByTests.equality, dynoptic.invariants.checkers.CheckersTests.checkEventually, dynoptic.invariants.checkers.CheckersTests.checkAFby, dynoptic.invariants.checkers.CheckersTests.checkNFby, dynoptic.invariants.checkers.CheckersTests.checkAP, dynoptic.model.alphabet.DistEventTypeTests.createRecv, dynoptic.model.alphabet.DistEventTypeTests.createSend, dynoptic.model.alphabet.DistEventTypeTests.createLocal, dynoptic.model.alphabet.DistEventTypeTests.createSynthSend, dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingSend, dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingRecv, dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingLocal, dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr1, dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr2, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentTwoAcceptStateFSM, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentFSMDiffEventOrder, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentDiffAcceptLabelFSM, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentCFSMFalseDiffSize, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentOneStateFSM, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentTwoStateFSM, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentTwoInitStateFSM, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentDiffInitLabelFSM, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentSameLanguage, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentCFSM, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentCFSMFalseDiffPid, dynoptic.model.automaton.EventTypeEncodingsTests.encodeZeroEvent, dynoptic.model.automaton.EventTypeEncodingsTests.encodeOneEvent, dynoptic.model.automaton.EventTypeEncodingsTests.encodeTwoEvents, dynoptic.model.automaton.EventTypeEncodingsTests.encodeThreeEvents, dynoptic.model.automaton.EventTypeEncodingsTests.encodeDifferentEvents, dynoptic.model.export.GraphExporterTests.twoFSMsTwoStatesEachLocalEventsTest, dynoptic.model.export.GraphExporterTests.oneFSMOneStateTest, dynoptic.model.export.GraphExporterTests.oneFSMTwoStatesTest, dynoptic.model.export.GraphExporterTests.twoFSMsTwoStatesEachCommEventsTest, dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMState, dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMStateWithTxns, dynoptic.model.fifosys.cfsm.CFSMTests.scmString, dynoptic.model.fifosys.cfsm.CFSMTests.initsAccepts, dynoptic.model.fifosys.cfsm.CFSMTests.createEmptyCFSM, dynoptic.model.fifosys.cfsm.CFSMTests.augmentWithAFby, dynoptic.model.fifosys.cfsm.CFSMTests.augmentWithNFby, dynoptic.model.fifosys.cfsm.CFSMTests.augmentWithAP, dynoptic.model.fifosys.cfsm.McScMCFSMTests.verifyAFby, dynoptic.model.fifosys.cfsm.McScMCFSMTests.verifyNFby, dynoptic.model.fifosys.cfsm.McScMCFSMTests.verifyAP, dynoptic.model.fifosys.cfsm.fsm.FSMTests.scmString, dynoptic.model.fifosys.cfsm.fsm.FSMTests.createFSM, dynoptic.model.fifosys.cfsm.fsm.FSMTests.createFSMWithTxns, dynoptic.model.fifosys.cfsm.fsm.FSMTests.createBadFSM1, dynoptic.model.fifosys.cfsm.fsm.FSMTests.createBadFSM2, dynoptic.model.fifosys.cfsm.fsm.BadStateTests.createAndScmString, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.minimizeTest, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicOneStateNoTransition, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicOneStateWithTransition, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicTwoStatesOneTransition, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicTwoStatesTwoTransitions, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.nonDeterministicSingleInitState, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.nonDeterministicMultipleInitStates, dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.scmString, dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.checkInitAcceptPid, dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.oneTransition, dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.twoTransitions, dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.wrongEventPid, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.invChannelId, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createChannelId, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createBadChannelId, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelId, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelIdMapping, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.channelIdEquals, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIds, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorDuplicateChNames, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorUnparseable, dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.equals, dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.isEmpty, dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.cloneMCState, dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.toStringCheck, dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.enqueueDequeueSeq, dynoptic.model.fifosys.gfsm.GFSMStateTests.stateWithObs, dynoptic.model.fifosys.gfsm.GFSMStateTests.createGFSMState, dynoptic.model.fifosys.gfsm.GFSMPathTests.createPath, dynoptic.model.fifosys.gfsm.GFSMTests.gfsmToCFSM, dynoptic.model.fifosys.gfsm.GFSMTests.createEmptyGFSM, dynoptic.model.fifosys.gfsm.GFSMTests.checkGFSMFromOneTrace, dynoptic.model.fifosys.gfsm.GFSMTests.exportGFSM, dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.buildInstance, dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.traceIds, dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.equality, dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests.create, dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonInit, dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createAnon, dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createNamed, dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonIntermediate, dynoptic.model.fifosys.gfsm.observed.dag.ObsDagNodeTests.create, dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkCreate, dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkTxns, mcscm.McScMTests.testEmptyScmInput, mcscm.McScMTests.testSafeScmInput, mcscm.McScMTests.testUnsafeScmInputLen1, mcscm.McScMTests.testUnsafeScmInputLen2]

Time each test takes to run in the new order:
[67221326, 1389393, 1023335, 1578097, 900796, 2001235, 918535, 870692, 1196228, 736148, 1764789, 840296, 639143, 1072660, 599854, 3717562, 678391, 535888, 947519, 546046, 1160094, 703591, 701949, 683641, 1558881, 888562, 819024, 886774, 562493, 688862, 522421, 505019, 467217, 12146965, 2059373, 1217229, 2205139, 761989, 944044, 981994, 1096588, 959399, 1234971, 810726, 660112, 337703, 362951, 324269, 692351, 64193941, 23896490, 24374696, 25890240, 745576, 196551, 1671147, 607007, 305653, 1922742, 1612463, 1641170, 2727199, 457541, 410952, 1728814, 518063, 388279, 803936, 558592, 1226103, 2129871, 443169, 458683, 368205, 387800, 410540, 390652, 1711053, 1199674, 379222, 335841, 479096, 1402623, 1059546, 540280, 744622, 424576, 374054, 3024296, 995183, 922534, 2023533, 394329, 371040, 823095, 427073, 1969089, 431027, 1192640, 2619379, 546716, 545719, 16514584, 545078, 185565, 216109, 599979, 643726, 191340, 389884, 687116, 546222, 644342, 210309, 209825, 330549, 177966, 151069]

Coverage test list:
[108, 51, 10, 236, 57, 0, 46, 0, 35, 0, 0, 29, 5, 2, 0, 0, 51, 0, 38, 0, 76, 95, 108, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 591, 35, 5, 182, 35, 0, 2, 24, 13, 84, 19, 51, 40, 0, 0, 8, 789, 29, 0, 0, 179, 10, 904, 182, 0, 1037, 13, 8, 155, 0, 0, 98, 21, 10, 2, 2, 10, 324, 16, 5, 5, 0, 10, 2, 62, 13, 8, 0, 0, 16, 0, 0, 49, 27, 0, 0, 0, 0, 242, 70, 76, 152, 119, 563, 27, 226, 1190, 49, 187, 100, 8, 10, 57, 155, 125, 16, 16, 119, 2, 179, 65, 5, 62, 0, 0]
--------------------------
Total time (of all machines and iterations plus initial TestListGenerator): 0.399