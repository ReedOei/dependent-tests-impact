synoptic-ts-function-orig-order.txt
                                                                                              Original order result:        Test order result:
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeZeroEvent:                             PASS
dynoptic.invariants.EventuallyHappensTests.scmBadStatesString:                                PASS
dynoptic.invariants.AlwaysFollowedByTests.equality:                                           PASS
dynoptic.model.alphabet.DistEventTypeTests.createRecv:                                        PASS
dynoptic.model.alphabet.DistEventTypeTests.createSend:                                        PASS
dynoptic.invariants.checkers.CheckersTests.checkEventually:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.stateWithObs:                                      PASS
dynoptic.invariants.checkers.CheckersTests.checkAFby:                                         PASS
dynoptic.invariants.AlwaysPrecedesTests.testSatisfies:                                        PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.equals:                  PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.invChannelId:                         PASS
dynoptic.invariants.NeverFollowedByTests.create:                                              PASS
dynoptic.invariants.EventuallyHappensTests.create:                                            PASS
dynoptic.invariants.AlwaysPrecedesTests.equality:                                             PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonInit:               PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.traceIds:                          PASS
dynoptic.model.fifosys.gfsm.GFSMPathTests.createPath:                                         PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingRecv:                          PASS
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests.create:                             PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.enqueueDequeueSeq:       PASS
dynoptic.invariants.EventuallyHappensTests.equality:                                          PASS
dynoptic.invariants.EventuallyHappensTests.testSatisfies:                                     PASS
dynoptic.invariants.EventuallyHappensTests.getFirstSecond:                                    PASS
dynoptic.invariants.AlwaysPrecedesTests.create:                                               PASS
dynoptic.invariants.NeverFollowedByTests.equality:                                            PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingSend:                          PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkTxns:                  PASS
dynoptic.invariants.AlwaysPrecedesTests.scmBadStatesString:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMTests.exportGFSM:                                             ERROR
dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMState:                                   PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createAnon:                             PASS
dynoptic.invariants.AlwaysFollowedByTests.create:                                             PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorUnparseable:      PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelIdMapping:          PASS
dynoptic.model.alphabet.DistEventTypeTests.createLocal:                                       PASS
dynoptic.invariants.checkers.CheckersTests.checkNFby:                                         PASS
dynoptic.invariants.AlwaysFollowedByTests.getFirstSecond:                                     PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.cloneMCState:            PASS
dynoptic.invariants.AlwaysFollowedByTests.scmBadStatesString:                                 PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.buildInstance:                     PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createChannelId:                      PASS
dynoptic.invariants.AlwaysFollowedByTests.testSatisfies:                                      PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkCreate:                PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.equality:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIds:                      PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.createGFSMState:                                   PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelId:                 PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.toStringCheck:           PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorDuplicateChNames: PASS
dynoptic.model.fifosys.gfsm.GFSMTests.checkGFSMFromOneTrace:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeDifferentEvents:                       PASS
dynoptic.invariants.AlwaysPrecedesTests.getFirstSecond:                                       PASS
dynoptic.invariants.NeverFollowedByTests.scmBadStatesString:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeThreeEvents:                           PASS
dynoptic.model.fifosys.gfsm.GFSMTests.createEmptyGFSM:                                        PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeTwoEvents:                             PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr1:                          PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr2:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createBadChannelId:                   ERROR
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeOneEvent:                              PASS
dynoptic.invariants.NeverFollowedByTests.testSatisfies:                                       PASS
dynoptic.model.alphabet.DistEventTypeTests.createSynthSend:                                   PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.isEmpty:                 PASS
dynoptic.model.fifosys.gfsm.observed.dag.ObsDagNodeTests.create:                              PASS
dynoptic.invariants.checkers.CheckersTests.checkAP:                                           PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonIntermediate:       PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.channelIdEquals:                      PASS
dynoptic.invariants.NeverFollowedByTests.getFirstSecond:                                      PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingLocal:                         PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createNamed:                            PASS

synoptic-ts-function-absolute.txt
                                                                                              Original order result:        Test order result:
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeZeroEvent:                             PASS
dynoptic.invariants.EventuallyHappensTests.scmBadStatesString:                                PASS
dynoptic.invariants.AlwaysFollowedByTests.equality:                                           PASS
dynoptic.model.alphabet.DistEventTypeTests.createRecv:                                        PASS
dynoptic.model.alphabet.DistEventTypeTests.createSend:                                        PASS
dynoptic.invariants.checkers.CheckersTests.checkEventually:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.stateWithObs:                                      PASS
dynoptic.invariants.checkers.CheckersTests.checkAFby:                                         PASS
dynoptic.invariants.AlwaysPrecedesTests.testSatisfies:                                        PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.equals:                  PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.invChannelId:                         PASS
dynoptic.invariants.NeverFollowedByTests.create:                                              PASS
dynoptic.invariants.EventuallyHappensTests.create:                                            PASS
dynoptic.invariants.AlwaysPrecedesTests.equality:                                             PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonInit:               PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.traceIds:                          PASS
dynoptic.model.fifosys.gfsm.GFSMPathTests.createPath:                                         PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingRecv:                          PASS
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests.create:                             PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.enqueueDequeueSeq:       PASS
dynoptic.invariants.EventuallyHappensTests.equality:                                          PASS
dynoptic.invariants.EventuallyHappensTests.testSatisfies:                                     PASS
dynoptic.invariants.EventuallyHappensTests.getFirstSecond:                                    PASS
dynoptic.invariants.AlwaysPrecedesTests.create:                                               PASS
dynoptic.invariants.NeverFollowedByTests.equality:                                            PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingSend:                          PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkTxns:                  PASS
dynoptic.invariants.AlwaysPrecedesTests.scmBadStatesString:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMTests.exportGFSM:                                             ERROR
dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMState:                                   PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createAnon:                             PASS
dynoptic.invariants.AlwaysFollowedByTests.create:                                             PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorUnparseable:      PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelIdMapping:          PASS
dynoptic.model.alphabet.DistEventTypeTests.createLocal:                                       PASS
dynoptic.invariants.checkers.CheckersTests.checkNFby:                                         PASS
dynoptic.invariants.AlwaysFollowedByTests.getFirstSecond:                                     PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.cloneMCState:            PASS
dynoptic.invariants.AlwaysFollowedByTests.scmBadStatesString:                                 PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.buildInstance:                     PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createChannelId:                      PASS
dynoptic.invariants.AlwaysFollowedByTests.testSatisfies:                                      PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkCreate:                PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.equality:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIds:                      PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.createGFSMState:                                   PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelId:                 PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.toStringCheck:           PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorDuplicateChNames: PASS
dynoptic.model.fifosys.gfsm.GFSMTests.checkGFSMFromOneTrace:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeDifferentEvents:                       PASS
dynoptic.invariants.AlwaysPrecedesTests.getFirstSecond:                                       PASS
dynoptic.invariants.NeverFollowedByTests.scmBadStatesString:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeThreeEvents:                           PASS
dynoptic.model.fifosys.gfsm.GFSMTests.createEmptyGFSM:                                        PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeTwoEvents:                             PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr1:                          PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr2:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createBadChannelId:                   ERROR
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeOneEvent:                              PASS
dynoptic.invariants.NeverFollowedByTests.testSatisfies:                                       PASS
dynoptic.model.alphabet.DistEventTypeTests.createSynthSend:                                   PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.isEmpty:                 PASS
dynoptic.model.fifosys.gfsm.observed.dag.ObsDagNodeTests.create:                              PASS
dynoptic.invariants.checkers.CheckersTests.checkAP:                                           PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonIntermediate:       PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.channelIdEquals:                      PASS
dynoptic.invariants.NeverFollowedByTests.getFirstSecond:                                      PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingLocal:                         PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createNamed:                            PASS

synoptic-ts-function-random.txt
                                                                                              Original order result:        Test order result:
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeZeroEvent:                             PASS
dynoptic.invariants.EventuallyHappensTests.scmBadStatesString:                                PASS
dynoptic.invariants.AlwaysFollowedByTests.equality:                                           PASS
dynoptic.model.alphabet.DistEventTypeTests.createRecv:                                        PASS
dynoptic.model.alphabet.DistEventTypeTests.createSend:                                        PASS
dynoptic.invariants.checkers.CheckersTests.checkEventually:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.stateWithObs:                                      PASS
dynoptic.invariants.checkers.CheckersTests.checkAFby:                                         PASS
dynoptic.invariants.AlwaysPrecedesTests.testSatisfies:                                        PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.equals:                  PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.invChannelId:                         PASS
dynoptic.invariants.NeverFollowedByTests.create:                                              PASS
dynoptic.invariants.EventuallyHappensTests.create:                                            PASS
dynoptic.invariants.AlwaysPrecedesTests.equality:                                             PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonInit:               PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.traceIds:                          PASS
dynoptic.model.fifosys.gfsm.GFSMPathTests.createPath:                                         PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingRecv:                          PASS
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests.create:                             PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.enqueueDequeueSeq:       PASS
dynoptic.invariants.EventuallyHappensTests.equality:                                          PASS
dynoptic.invariants.EventuallyHappensTests.testSatisfies:                                     PASS
dynoptic.invariants.EventuallyHappensTests.getFirstSecond:                                    PASS
dynoptic.invariants.AlwaysPrecedesTests.create:                                               PASS
dynoptic.invariants.NeverFollowedByTests.equality:                                            PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingSend:                          PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkTxns:                  PASS
dynoptic.invariants.AlwaysPrecedesTests.scmBadStatesString:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMTests.exportGFSM:                                             ERROR
dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMState:                                   PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createAnon:                             PASS
dynoptic.invariants.AlwaysFollowedByTests.create:                                             PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorUnparseable:      PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelIdMapping:          PASS
dynoptic.model.alphabet.DistEventTypeTests.createLocal:                                       PASS
dynoptic.invariants.checkers.CheckersTests.checkNFby:                                         PASS
dynoptic.invariants.AlwaysFollowedByTests.getFirstSecond:                                     PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.cloneMCState:            PASS
dynoptic.invariants.AlwaysFollowedByTests.scmBadStatesString:                                 PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.buildInstance:                     PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createChannelId:                      PASS
dynoptic.invariants.AlwaysFollowedByTests.testSatisfies:                                      PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkCreate:                PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.equality:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIds:                      PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.createGFSMState:                                   PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelId:                 PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.toStringCheck:           PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorDuplicateChNames: PASS
dynoptic.model.fifosys.gfsm.GFSMTests.checkGFSMFromOneTrace:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeDifferentEvents:                       PASS
dynoptic.invariants.AlwaysPrecedesTests.getFirstSecond:                                       PASS
dynoptic.invariants.NeverFollowedByTests.scmBadStatesString:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeThreeEvents:                           PASS
dynoptic.model.fifosys.gfsm.GFSMTests.createEmptyGFSM:                                        PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeTwoEvents:                             PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr1:                          PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr2:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createBadChannelId:                   ERROR
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeOneEvent:                              PASS
dynoptic.invariants.NeverFollowedByTests.testSatisfies:                                       PASS
dynoptic.model.alphabet.DistEventTypeTests.createSynthSend:                                   PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.isEmpty:                 PASS
dynoptic.model.fifosys.gfsm.observed.dag.ObsDagNodeTests.create:                              PASS
dynoptic.invariants.checkers.CheckersTests.checkAP:                                           PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonIntermediate:       PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.channelIdEquals:                      PASS
dynoptic.invariants.NeverFollowedByTests.getFirstSecond:                                      PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingLocal:                         PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createNamed:                            PASS

synoptic-ts-function-relative.txt
                                                                                              Original order result:        Test order result:
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeZeroEvent:                             PASS
dynoptic.invariants.EventuallyHappensTests.scmBadStatesString:                                PASS
dynoptic.invariants.AlwaysFollowedByTests.equality:                                           PASS
dynoptic.model.alphabet.DistEventTypeTests.createRecv:                                        PASS
dynoptic.model.alphabet.DistEventTypeTests.createSend:                                        PASS
dynoptic.invariants.checkers.CheckersTests.checkEventually:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.stateWithObs:                                      PASS
dynoptic.invariants.checkers.CheckersTests.checkAFby:                                         PASS
dynoptic.invariants.AlwaysPrecedesTests.testSatisfies:                                        PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.equals:                  PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.invChannelId:                         PASS
dynoptic.invariants.NeverFollowedByTests.create:                                              PASS
dynoptic.invariants.EventuallyHappensTests.create:                                            PASS
dynoptic.invariants.AlwaysPrecedesTests.equality:                                             PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonInit:               PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.traceIds:                          PASS
dynoptic.model.fifosys.gfsm.GFSMPathTests.createPath:                                         PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingRecv:                          PASS
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests.create:                             PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.enqueueDequeueSeq:       PASS
dynoptic.invariants.EventuallyHappensTests.equality:                                          PASS
dynoptic.invariants.EventuallyHappensTests.testSatisfies:                                     PASS
dynoptic.invariants.EventuallyHappensTests.getFirstSecond:                                    PASS
dynoptic.invariants.AlwaysPrecedesTests.create:                                               PASS
dynoptic.invariants.NeverFollowedByTests.equality:                                            PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingSend:                          PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkTxns:                  PASS
dynoptic.invariants.AlwaysPrecedesTests.scmBadStatesString:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMTests.exportGFSM:                                             ERROR
dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMState:                                   PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createAnon:                             PASS
dynoptic.invariants.AlwaysFollowedByTests.create:                                             PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorUnparseable:      PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelIdMapping:          PASS
dynoptic.model.alphabet.DistEventTypeTests.createLocal:                                       PASS
dynoptic.invariants.checkers.CheckersTests.checkNFby:                                         PASS
dynoptic.invariants.AlwaysFollowedByTests.getFirstSecond:                                     PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.cloneMCState:            PASS
dynoptic.invariants.AlwaysFollowedByTests.scmBadStatesString:                                 PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.buildInstance:                     PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createChannelId:                      PASS
dynoptic.invariants.AlwaysFollowedByTests.testSatisfies:                                      PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkCreate:                PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.equality:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIds:                      PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.createGFSMState:                                   PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelId:                 PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.toStringCheck:           PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorDuplicateChNames: PASS
dynoptic.model.fifosys.gfsm.GFSMTests.checkGFSMFromOneTrace:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeDifferentEvents:                       PASS
dynoptic.invariants.AlwaysPrecedesTests.getFirstSecond:                                       PASS
dynoptic.invariants.NeverFollowedByTests.scmBadStatesString:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeThreeEvents:                           PASS
dynoptic.model.fifosys.gfsm.GFSMTests.createEmptyGFSM:                                        PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeTwoEvents:                             PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr1:                          PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr2:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createBadChannelId:                   ERROR
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeOneEvent:                              PASS
dynoptic.invariants.NeverFollowedByTests.testSatisfies:                                       PASS
dynoptic.model.alphabet.DistEventTypeTests.createSynthSend:                                   PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.isEmpty:                 PASS
dynoptic.model.fifosys.gfsm.observed.dag.ObsDagNodeTests.create:                              PASS
dynoptic.invariants.checkers.CheckersTests.checkAP:                                           PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonIntermediate:       PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.channelIdEquals:                      PASS
dynoptic.invariants.NeverFollowedByTests.getFirstSecond:                                      PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingLocal:                         PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createNamed:                            PASS

synoptic-ts-statement-relative.txt
                                                                                              Original order result:        Test order result:
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeZeroEvent:                             PASS
dynoptic.invariants.EventuallyHappensTests.scmBadStatesString:                                PASS
dynoptic.invariants.AlwaysFollowedByTests.equality:                                           PASS
dynoptic.model.alphabet.DistEventTypeTests.createRecv:                                        PASS
dynoptic.model.alphabet.DistEventTypeTests.createSend:                                        PASS
dynoptic.invariants.checkers.CheckersTests.checkEventually:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.stateWithObs:                                      PASS
dynoptic.invariants.checkers.CheckersTests.checkAFby:                                         PASS
dynoptic.invariants.AlwaysPrecedesTests.testSatisfies:                                        PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.equals:                  PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.invChannelId:                         PASS
dynoptic.invariants.NeverFollowedByTests.create:                                              PASS
dynoptic.invariants.EventuallyHappensTests.create:                                            PASS
dynoptic.invariants.AlwaysPrecedesTests.equality:                                             PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonInit:               PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.traceIds:                          PASS
dynoptic.model.fifosys.gfsm.GFSMPathTests.createPath:                                         PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingRecv:                          PASS
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests.create:                             PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.enqueueDequeueSeq:       PASS
dynoptic.invariants.EventuallyHappensTests.equality:                                          PASS
dynoptic.invariants.EventuallyHappensTests.testSatisfies:                                     PASS
dynoptic.invariants.EventuallyHappensTests.getFirstSecond:                                    PASS
dynoptic.invariants.AlwaysPrecedesTests.create:                                               PASS
dynoptic.invariants.NeverFollowedByTests.equality:                                            PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingSend:                          PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkTxns:                  PASS
dynoptic.invariants.AlwaysPrecedesTests.scmBadStatesString:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMTests.exportGFSM:                                             ERROR
dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMState:                                   PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createAnon:                             PASS
dynoptic.invariants.AlwaysFollowedByTests.create:                                             PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorUnparseable:      PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelIdMapping:          PASS
dynoptic.model.alphabet.DistEventTypeTests.createLocal:                                       PASS
dynoptic.invariants.checkers.CheckersTests.checkNFby:                                         PASS
dynoptic.invariants.AlwaysFollowedByTests.getFirstSecond:                                     PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.cloneMCState:            PASS
dynoptic.invariants.AlwaysFollowedByTests.scmBadStatesString:                                 PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.buildInstance:                     PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createChannelId:                      PASS
dynoptic.invariants.AlwaysFollowedByTests.testSatisfies:                                      PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkCreate:                PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.equality:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIds:                      PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.createGFSMState:                                   PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelId:                 PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.toStringCheck:           PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorDuplicateChNames: PASS
dynoptic.model.fifosys.gfsm.GFSMTests.checkGFSMFromOneTrace:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeDifferentEvents:                       PASS
dynoptic.invariants.AlwaysPrecedesTests.getFirstSecond:                                       PASS
dynoptic.invariants.NeverFollowedByTests.scmBadStatesString:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeThreeEvents:                           PASS
dynoptic.model.fifosys.gfsm.GFSMTests.createEmptyGFSM:                                        PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeTwoEvents:                             PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr1:                          PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr2:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createBadChannelId:                   ERROR
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeOneEvent:                              PASS
dynoptic.invariants.NeverFollowedByTests.testSatisfies:                                       PASS
dynoptic.model.alphabet.DistEventTypeTests.createSynthSend:                                   PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.isEmpty:                 PASS
dynoptic.model.fifosys.gfsm.observed.dag.ObsDagNodeTests.create:                              PASS
dynoptic.invariants.checkers.CheckersTests.checkAP:                                           PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonIntermediate:       PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.channelIdEquals:                      PASS
dynoptic.invariants.NeverFollowedByTests.getFirstSecond:                                      PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingLocal:                         PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createNamed:                            PASS

synoptic-ts-statement-random.txt
                                                                                              Original order result:        Test order result:
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeZeroEvent:                             PASS
dynoptic.invariants.EventuallyHappensTests.scmBadStatesString:                                PASS
dynoptic.invariants.AlwaysFollowedByTests.equality:                                           PASS
dynoptic.model.alphabet.DistEventTypeTests.createRecv:                                        PASS
dynoptic.model.alphabet.DistEventTypeTests.createSend:                                        PASS
dynoptic.invariants.checkers.CheckersTests.checkEventually:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.stateWithObs:                                      PASS
dynoptic.invariants.checkers.CheckersTests.checkAFby:                                         PASS
dynoptic.invariants.AlwaysPrecedesTests.testSatisfies:                                        PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.equals:                  PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.invChannelId:                         PASS
dynoptic.invariants.NeverFollowedByTests.create:                                              PASS
dynoptic.invariants.EventuallyHappensTests.create:                                            PASS
dynoptic.invariants.AlwaysPrecedesTests.equality:                                             PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonInit:               PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.traceIds:                          PASS
dynoptic.model.fifosys.gfsm.GFSMPathTests.createPath:                                         PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingRecv:                          PASS
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests.create:                             PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.enqueueDequeueSeq:       PASS
dynoptic.invariants.EventuallyHappensTests.equality:                                          PASS
dynoptic.invariants.EventuallyHappensTests.testSatisfies:                                     PASS
dynoptic.invariants.EventuallyHappensTests.getFirstSecond:                                    PASS
dynoptic.invariants.AlwaysPrecedesTests.create:                                               PASS
dynoptic.invariants.NeverFollowedByTests.equality:                                            PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingSend:                          PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkTxns:                  PASS
dynoptic.invariants.AlwaysPrecedesTests.scmBadStatesString:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMTests.exportGFSM:                                             ERROR
dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMState:                                   PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createAnon:                             PASS
dynoptic.invariants.AlwaysFollowedByTests.create:                                             PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorUnparseable:      PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelIdMapping:          PASS
dynoptic.model.alphabet.DistEventTypeTests.createLocal:                                       PASS
dynoptic.invariants.checkers.CheckersTests.checkNFby:                                         PASS
dynoptic.invariants.AlwaysFollowedByTests.getFirstSecond:                                     PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.cloneMCState:            PASS
dynoptic.invariants.AlwaysFollowedByTests.scmBadStatesString:                                 PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.buildInstance:                     PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createChannelId:                      PASS
dynoptic.invariants.AlwaysFollowedByTests.testSatisfies:                                      PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkCreate:                PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.equality:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIds:                      PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.createGFSMState:                                   PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelId:                 PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.toStringCheck:           PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorDuplicateChNames: PASS
dynoptic.model.fifosys.gfsm.GFSMTests.checkGFSMFromOneTrace:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeDifferentEvents:                       PASS
dynoptic.invariants.AlwaysPrecedesTests.getFirstSecond:                                       PASS
dynoptic.invariants.NeverFollowedByTests.scmBadStatesString:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeThreeEvents:                           PASS
dynoptic.model.fifosys.gfsm.GFSMTests.createEmptyGFSM:                                        PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeTwoEvents:                             PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr1:                          PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr2:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createBadChannelId:                   ERROR
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeOneEvent:                              PASS
dynoptic.invariants.NeverFollowedByTests.testSatisfies:                                       PASS
dynoptic.model.alphabet.DistEventTypeTests.createSynthSend:                                   PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.isEmpty:                 PASS
dynoptic.model.fifosys.gfsm.observed.dag.ObsDagNodeTests.create:                              PASS
dynoptic.invariants.checkers.CheckersTests.checkAP:                                           PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonIntermediate:       PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.channelIdEquals:                      PASS
dynoptic.invariants.NeverFollowedByTests.getFirstSecond:                                      PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingLocal:                         PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createNamed:                            PASS

synoptic-ts-statement-orig-order.txt
                                                                                              Original order result:         Test order result:
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeZeroEvent:                             PASS
dynoptic.invariants.EventuallyHappensTests.scmBadStatesString:                                PASS
dynoptic.invariants.AlwaysFollowedByTests.equality:                                           PASS
dynoptic.model.alphabet.DistEventTypeTests.createRecv:                                        PASS
dynoptic.model.alphabet.DistEventTypeTests.createSend:                                        PASS
dynoptic.invariants.checkers.CheckersTests.checkEventually:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.stateWithObs:                                      PASS
dynoptic.invariants.checkers.CheckersTests.checkAFby:                                         PASS
dynoptic.invariants.AlwaysPrecedesTests.testSatisfies:                                        PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.equals:                  PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.invChannelId:                         PASS
dynoptic.invariants.NeverFollowedByTests.create:                                              PASS
dynoptic.invariants.EventuallyHappensTests.create:                                            PASS
dynoptic.invariants.AlwaysPrecedesTests.equality:                                             PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonInit:               PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.traceIds:                          PASS
dynoptic.model.fifosys.gfsm.GFSMPathTests.createPath:                                         PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingRecv:                          PASS
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests.create:                             PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.enqueueDequeueSeq:       PASS
dynoptic.invariants.EventuallyHappensTests.equality:                                          PASS
dynoptic.invariants.EventuallyHappensTests.testSatisfies:                                     PASS
dynoptic.invariants.EventuallyHappensTests.getFirstSecond:                                    PASS
dynoptic.invariants.AlwaysPrecedesTests.create:                                               PASS
dynoptic.invariants.NeverFollowedByTests.equality:                                            PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingSend:                          PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkTxns:                  PASS
dynoptic.invariants.AlwaysPrecedesTests.scmBadStatesString:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMTests.exportGFSM:                                             ERROR
dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMState:                                   PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createAnon:                             PASS
dynoptic.invariants.AlwaysFollowedByTests.create:                                             PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorUnparseable:      PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelIdMapping:          PASS
dynoptic.model.alphabet.DistEventTypeTests.createLocal:                                       PASS
dynoptic.invariants.checkers.CheckersTests.checkNFby:                                         PASS
dynoptic.invariants.AlwaysFollowedByTests.getFirstSecond:                                     PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.cloneMCState:            PASS
dynoptic.invariants.AlwaysFollowedByTests.scmBadStatesString:                                 PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.buildInstance:                     PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createChannelId:                      PASS
dynoptic.invariants.AlwaysFollowedByTests.testSatisfies:                                      PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkCreate:                PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.equality:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIds:                      PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.createGFSMState:                                   PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelId:                 PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.toStringCheck:           PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorDuplicateChNames: PASS
dynoptic.model.fifosys.gfsm.GFSMTests.checkGFSMFromOneTrace:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeDifferentEvents:                       PASS
dynoptic.invariants.AlwaysPrecedesTests.getFirstSecond:                                       PASS
dynoptic.invariants.NeverFollowedByTests.scmBadStatesString:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeThreeEvents:                           PASS
dynoptic.model.fifosys.gfsm.GFSMTests.createEmptyGFSM:                                        PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeTwoEvents:                             PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr1:                          PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr2:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createBadChannelId:                   ERROR
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeOneEvent:                              PASS
dynoptic.invariants.NeverFollowedByTests.testSatisfies:                                       PASS
dynoptic.model.alphabet.DistEventTypeTests.createSynthSend:                                   PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.isEmpty:                 PASS
dynoptic.model.fifosys.gfsm.observed.dag.ObsDagNodeTests.create:                              PASS
dynoptic.invariants.checkers.CheckersTests.checkAP:                                           PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonIntermediate:       PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.channelIdEquals:                      PASS
dynoptic.invariants.NeverFollowedByTests.getFirstSecond:                                      PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingLocal:                         PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createNamed:                            PASS

synoptic-ts-statement-absolute.txt
                                                                                              Original order result:         Test order result:
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeZeroEvent:                             PASS
dynoptic.invariants.EventuallyHappensTests.scmBadStatesString:                                PASS
dynoptic.invariants.AlwaysFollowedByTests.equality:                                           PASS
dynoptic.model.alphabet.DistEventTypeTests.createRecv:                                        PASS
dynoptic.model.alphabet.DistEventTypeTests.createSend:                                        PASS
dynoptic.invariants.checkers.CheckersTests.checkEventually:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.stateWithObs:                                      PASS
dynoptic.invariants.checkers.CheckersTests.checkAFby:                                         PASS
dynoptic.invariants.AlwaysPrecedesTests.testSatisfies:                                        PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.equals:                  PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.invChannelId:                         PASS
dynoptic.invariants.NeverFollowedByTests.create:                                              PASS
dynoptic.invariants.EventuallyHappensTests.create:                                            PASS
dynoptic.invariants.AlwaysPrecedesTests.equality:                                             PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonInit:               PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.traceIds:                          PASS
dynoptic.model.fifosys.gfsm.GFSMPathTests.createPath:                                         PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingRecv:                          PASS
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests.create:                             PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.enqueueDequeueSeq:       PASS
dynoptic.invariants.EventuallyHappensTests.equality:                                          PASS
dynoptic.invariants.EventuallyHappensTests.testSatisfies:                                     PASS
dynoptic.invariants.EventuallyHappensTests.getFirstSecond:                                    PASS
dynoptic.invariants.AlwaysPrecedesTests.create:                                               PASS
dynoptic.invariants.NeverFollowedByTests.equality:                                            PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingSend:                          PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkTxns:                  PASS
dynoptic.invariants.AlwaysPrecedesTests.scmBadStatesString:                                   PASS
dynoptic.model.fifosys.gfsm.GFSMTests.exportGFSM:                                             ERROR
dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMState:                                   PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createAnon:                             PASS
dynoptic.invariants.AlwaysFollowedByTests.create:                                             PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorUnparseable:      PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelIdMapping:          PASS
dynoptic.model.alphabet.DistEventTypeTests.createLocal:                                       PASS
dynoptic.invariants.checkers.CheckersTests.checkNFby:                                         PASS
dynoptic.invariants.AlwaysFollowedByTests.getFirstSecond:                                     PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.cloneMCState:            PASS
dynoptic.invariants.AlwaysFollowedByTests.scmBadStatesString:                                 PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.buildInstance:                     PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createChannelId:                      PASS
dynoptic.invariants.AlwaysFollowedByTests.testSatisfies:                                      PASS
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkCreate:                PASS
dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.equality:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIds:                      PASS
dynoptic.model.fifosys.gfsm.GFSMStateTests.createGFSMState:                                   PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelId:                 PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.toStringCheck:           PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorDuplicateChNames: PASS
dynoptic.model.fifosys.gfsm.GFSMTests.checkGFSMFromOneTrace:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeDifferentEvents:                       PASS
dynoptic.invariants.AlwaysPrecedesTests.getFirstSecond:                                       PASS
dynoptic.invariants.NeverFollowedByTests.scmBadStatesString:                                  PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeThreeEvents:                           PASS
dynoptic.model.fifosys.gfsm.GFSMTests.createEmptyGFSM:                                        PASS
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeTwoEvents:                             PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr1:                          PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr2:                          PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createBadChannelId:                   ERROR
dynoptic.model.origmaton.EventTypeEncodingsTests.encodeOneEvent:                              PASS
dynoptic.invariants.NeverFollowedByTests.testSatisfies:                                       PASS
dynoptic.model.alphabet.DistEventTypeTests.createSynthSend:                                   PASS
dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.isEmpty:                 PASS
dynoptic.model.fifosys.gfsm.observed.dag.ObsDagNodeTests.create:                              PASS
dynoptic.invariants.checkers.CheckersTests.checkAP:                                           PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonIntermediate:       PASS
dynoptic.model.fifosys.channel.channelid.ChannelIdTests.channelIdEquals:                      PASS
dynoptic.invariants.NeverFollowedByTests.getFirstSecond:                                      PASS
dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingLocal:                         PASS
dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createNamed:                            PASS

