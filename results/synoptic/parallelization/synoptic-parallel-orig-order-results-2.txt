Mar 03, 2014 11:33:10 PM dynoptic.invariants.NeverFollowedByTests create
INFO: (0-0->1:0->1 ! e1) NFby (1-1->0:1->0 ! e2)
Mar 03, 2014 11:33:10 PM dynoptic.invariants.NeverFollowedByTests scmBadStatesString
INFO: (ch0Se1TR0 | ch0Se1TR1 | ch1Se2TR0 | ch1Se2TR1)^* . (ch0Se1TR0 . ch0Se1TR1) . (ch0Se1TR0 | ch0Se1TR1 | ch1Se2TR0 | ch1Se2TR1)^* . (ch1Se2TR0 . ch1Se2TR1) . (ch0Se1TR0 | ch0Se1TR1 | ch1Se2TR0 | ch1Se2TR1)^*
Mar 03, 2014 11:33:10 PM dynoptic.invariants.AlwaysPrecedesTests create
INFO: (0-0->1:0->1 ! e1) AP (1-1->0:1->0 ! e2)
Mar 03, 2014 11:33:10 PM dynoptic.invariants.AlwaysPrecedesTests scmBadStatesString
INFO: (ch1Se2TR0 . ch1Se2TR1)^+ . (ch0Se1TR0 | ch0Se1TR1 | ch1Se2TR0 | ch1Se2TR1)^*
Mar 03, 2014 11:33:10 PM dynoptic.invariants.EventuallyHappensTests create
INFO: (INITIALp-1L) Eventually (0-0->1:0->1 ! e1)
Mar 03, 2014 11:33:10 PM dynoptic.invariants.EventuallyHappensTests scmBadStatesString
INFO: _
Mar 03, 2014 11:33:10 PM dynoptic.invariants.AlwaysFollowedByTests create
INFO: (0-0->1:0->1 ! e1) AFby (1-1->0:1->0 ! e2)
Mar 03, 2014 11:33:10 PM dynoptic.invariants.AlwaysFollowedByTests scmBadStatesString
INFO: (ch0Se1TR0 | ch0Se1TR1 | ch1Se2TR0 | ch1Se2TR1)^* . (ch0Se1TR0 . ch0Se1TR1)^+
Mar 03, 2014 11:33:10 PM dynoptic.model.alphabet.DistEventTypeTests createRecv
INFO: 0-A:1->2 ? e
Mar 03, 2014 11:33:10 PM dynoptic.model.alphabet.DistEventTypeTests createSend
INFO: 0-A:1->2 ! e
Mar 03, 2014 11:33:10 PM dynoptic.model.alphabet.DistEventTypeTests createLocal
INFO: ep1L
Mar 03, 2014 11:33:10 PM dynoptic.model.alphabet.DistEventTypeTests createSynthSend
INFO: 0-A:1->2 ! ch0ReTR0
Mar 03, 2014 11:33:11 PM dynoptic.model.export.GraphExporter exportCFSM
INFO: Exporting CFSM to: ./test.dot
Mar 03, 2014 11:33:11 PM dynoptic.model.export.GraphExporter exportCFSM
INFO: Exporting CFSM to: ./test.dot
Mar 03, 2014 11:33:11 PM dynoptic.model.export.GraphExporter exportCFSM
INFO: Exporting CFSM to: ./test.dot
Mar 03, 2014 11:33:11 PM dynoptic.model.export.GraphExporter exportCFSM
INFO: Exporting CFSM to: ./test.dot
Mar 03, 2014 11:33:11 PM dynoptic.model.fifosys.cfsm.CFSMTests scmString
INFO: scm test:

nb_channels = 2 ;
/*
channel 0 : 0-0->1:0->1
channel 1 : 1-ch-locals:0->0
*/

parameters :
real m ;
real ep0L ;
real fp1L ;

automaton p0 :
initial : 0
state 0 :
to 1 : when true , 0 ! m ;


state 1 :
to 0 : when true , 1 ! ep0L ;



automaton p1 :
initial : 0
state 0 :
to 1 : when true , 0 ? m ;


state 1 :
to 0 : when true , 1 ! fp1L ;




Mar 03, 2014 11:33:11 PM dynoptic.model.fifosys.cfsm.CFSMTests augmentWithAFby
INFO: (0-0->1:0->1 ! m) AFby (0-0->1:0->1 ? m)
Mar 03, 2014 11:33:11 PM dynoptic.model.fifosys.cfsm.CFSMTests augmentWithAFby
INFO: (automaton p0: in 1: true
automaton p1: in 1: true
with _ . # . (ch0SmTR0 | ch0SmTR1 | ch0RmTR0 | ch0RmTR1)^* . (ch0SmTR0 . ch0SmTR1)^+
)
Mar 03, 2014 11:33:11 PM dynoptic.model.fifosys.cfsm.CFSMTests augmentWithAFby
INFO: scm augmentWithAFby-test:

nb_channels = 3 ;
/*
channel 0 : 0-0->1:0->1
channel 1 : 1-ch-[(0-0->1:0->1 ! m) AFby (0-0->1:0->1 ? m)]:0->0
channel 2 : 2-ch-locals:0->0
*/

parameters :
real m ;
real ep0L ;
real fp1L ;
real ch0SmTR0 ;
real ch0SmTR1 ;
real ch0RmTR0 ;
real ch0RmTR1 ;

automaton p0 :
initial : 0
state 0 :
to 2 : when true , 1 ! ch0SmTR0 ;


state 1 :
to 0 : when true , 2 ! ep0L ;


state 2 :
to 3 : when true , 0 ! m ;


state 3 :
to 1 : when true , 1 ! ch0SmTR1 ;



automaton p1 :
initial : 0
state 0 :
to 2 : when true , 1 ! ch0RmTR0 ;


state 1 :
to 0 : when true , 2 ! fp1L ;


state 2 :
to 3 : when true , 0 ? m ;


state 3 :
to 1 : when true , 1 ! ch0RmTR1 ;




bad_states:
(automaton p0: in 1: true
automaton p1: in 1: true
with _ . # . (ch0SmTR0 | ch0SmTR1 | ch0RmTR0 | ch0RmTR1)^* . (ch0SmTR0 . ch0SmTR1)^+ . # . (ep0L | fp1L)^*
)

0-th run
Pass: 55, Fail: 0, Error: 4
{dynoptic.invariants.NeverFollowedByTests.create=PASS, dynoptic.invariants.NeverFollowedByTests.testSatisfies=PASS, dynoptic.invariants.NeverFollowedByTests.getFirstSecond=PASS, dynoptic.invariants.NeverFollowedByTests.scmBadStatesString=PASS, dynoptic.invariants.NeverFollowedByTests.equality=PASS, dynoptic.invariants.AlwaysPrecedesTests.create=PASS, dynoptic.invariants.AlwaysPrecedesTests.testSatisfies=PASS, dynoptic.invariants.AlwaysPrecedesTests.getFirstSecond=PASS, dynoptic.invariants.AlwaysPrecedesTests.scmBadStatesString=PASS, dynoptic.invariants.AlwaysPrecedesTests.equality=PASS, dynoptic.invariants.EventuallyHappensTests.create=PASS, dynoptic.invariants.EventuallyHappensTests.testSatisfies=PASS, dynoptic.invariants.EventuallyHappensTests.getFirstSecond=PASS, dynoptic.invariants.EventuallyHappensTests.scmBadStatesString=PASS, dynoptic.invariants.EventuallyHappensTests.equality=PASS, dynoptic.invariants.AlwaysFollowedByTests.create=PASS, dynoptic.invariants.AlwaysFollowedByTests.testSatisfies=PASS, dynoptic.invariants.AlwaysFollowedByTests.getFirstSecond=PASS, dynoptic.invariants.AlwaysFollowedByTests.scmBadStatesString=PASS, dynoptic.invariants.AlwaysFollowedByTests.equality=PASS, dynoptic.invariants.checkers.CheckersTests.checkEventually=PASS, dynoptic.invariants.checkers.CheckersTests.checkAFby=PASS, dynoptic.invariants.checkers.CheckersTests.checkNFby=PASS, dynoptic.invariants.checkers.CheckersTests.checkAP=PASS, dynoptic.model.alphabet.DistEventTypeTests.createRecv=PASS, dynoptic.model.alphabet.DistEventTypeTests.createSend=PASS, dynoptic.model.alphabet.DistEventTypeTests.createLocal=PASS, dynoptic.model.alphabet.DistEventTypeTests.createSynthSend=PASS, dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingSend=PASS, dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingRecv=PASS, dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingLocal=PASS, dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr1=PASS, dynoptic.model.alphabet.DistEventTypeTests.checkEventStrParsingErr2=PASS, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentTwoAcceptStateFSM=PASS, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentFSMDiffEventOrder=PASS, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentDiffAcceptLabelFSM=PASS, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentCFSMFalseDiffSize=PASS, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentOneStateFSM=PASS, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentTwoStateFSM=PASS, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentTwoInitStateFSM=PASS, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentDiffInitLabelFSM=PASS, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentSameLanguage=PASS, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentCFSM=PASS, dynoptic.model.automaton.EncodedAutomatonTests.isEquivalentCFSMFalseDiffPid=PASS, dynoptic.model.automaton.EventTypeEncodingsTests.encodeZeroEvent=PASS, dynoptic.model.automaton.EventTypeEncodingsTests.encodeOneEvent=PASS, dynoptic.model.automaton.EventTypeEncodingsTests.encodeTwoEvents=PASS, dynoptic.model.automaton.EventTypeEncodingsTests.encodeThreeEvents=PASS, dynoptic.model.automaton.EventTypeEncodingsTests.encodeDifferentEvents=PASS, dynoptic.model.export.GraphExporterTests.twoFSMsTwoStatesEachLocalEventsTest=ERROR, dynoptic.model.export.GraphExporterTests.oneFSMOneStateTest=ERROR, dynoptic.model.export.GraphExporterTests.oneFSMTwoStatesTest=ERROR, dynoptic.model.export.GraphExporterTests.twoFSMsTwoStatesEachCommEventsTest=ERROR, dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMState=PASS, dynoptic.model.fifosys.cfsm.CFSMStateTests.createCFSMStateWithTxns=PASS, dynoptic.model.fifosys.cfsm.CFSMTests.scmString=PASS, dynoptic.model.fifosys.cfsm.CFSMTests.initsAccepts=PASS, dynoptic.model.fifosys.cfsm.CFSMTests.createEmptyCFSM=PASS, dynoptic.model.fifosys.cfsm.CFSMTests.augmentWithAFby=PASS}


Mar 03, 2014 11:33:12 PM dynoptic.model.fifosys.cfsm.CFSMTests augmentWithNFby
INFO: (0-0->1:0->1 ! m) NFby (0-0->1:0->1 ? m)
Mar 03, 2014 11:33:12 PM dynoptic.model.fifosys.cfsm.CFSMTests augmentWithNFby
INFO: (automaton p0: in 1: true
automaton p1: in 1: true
with _ . # . (ch0SmTR0 | ch0SmTR1 | ch0RmTR0 | ch0RmTR1)^* . (ch0SmTR0 . ch0SmTR1) . (ch0SmTR0 | ch0SmTR1 | ch0RmTR0 | ch0RmTR1)^* . (ch0RmTR0 . ch0RmTR1) . (ch0SmTR0 | ch0SmTR1 | ch0RmTR0 | ch0RmTR1)^*
)
Mar 03, 2014 11:33:12 PM dynoptic.model.fifosys.cfsm.CFSMTests augmentWithNFby
INFO: scm augmentWithNFby-test:

nb_channels = 3 ;
/*
channel 0 : 0-0->1:0->1
channel 1 : 1-ch-[(0-0->1:0->1 ! m) NFby (0-0->1:0->1 ? m)]:0->0
channel 2 : 2-ch-locals:0->0
*/

parameters :
real m ;
real ep0L ;
real fp1L ;
real ch0SmTR0 ;
real ch0SmTR1 ;
real ch0RmTR0 ;
real ch0RmTR1 ;

automaton p0 :
initial : 0
state 0 :
to 2 : when true , 1 ! ch0SmTR0 ;


state 1 :
to 0 : when true , 2 ! ep0L ;


state 2 :
to 3 : when true , 0 ! m ;


state 3 :
to 1 : when true , 1 ! ch0SmTR1 ;



automaton p1 :
initial : 0
state 0 :
to 2 : when true , 1 ! ch0RmTR0 ;


state 1 :
to 0 : when true , 2 ! fp1L ;


state 2 :
to 3 : when true , 0 ? m ;


state 3 :
to 1 : when true , 1 ! ch0RmTR1 ;




bad_states:
(automaton p0: in 1: true
automaton p1: in 1: true
with _ . # . (ch0SmTR0 | ch0SmTR1 | ch0RmTR0 | ch0RmTR1)^* . (ch0SmTR0 . ch0SmTR1) . (ch0SmTR0 | ch0SmTR1 | ch0RmTR0 | ch0RmTR1)^* . (ch0RmTR0 . ch0RmTR1) . (ch0SmTR0 | ch0SmTR1 | ch0RmTR0 | ch0RmTR1)^* . # . (ep0L | fp1L)^*
)

Mar 03, 2014 11:33:12 PM dynoptic.model.fifosys.cfsm.CFSMTests augmentWithAP
INFO: (0-0->1:0->1 ! m) AP (0-0->1:0->1 ? m)
Mar 03, 2014 11:33:12 PM dynoptic.model.fifosys.cfsm.CFSMTests augmentWithAP
INFO: (automaton p0: in 1: true
automaton p1: in 1: true
with _ . # . (ch0RmTR0 . ch0RmTR1)^+ . (ch0SmTR0 | ch0SmTR1 | ch0RmTR0 | ch0RmTR1)^*
)
Mar 03, 2014 11:33:12 PM dynoptic.model.fifosys.cfsm.CFSMTests augmentWithAP
INFO: scm augmentWithAP-test:

nb_channels = 3 ;
/*
channel 0 : 0-0->1:0->1
channel 1 : 1-ch-[(0-0->1:0->1 ! m) AP (0-0->1:0->1 ? m)]:0->0
channel 2 : 2-ch-locals:0->0
*/

parameters :
real m ;
real ep0L ;
real fp1L ;
real ch0SmTR0 ;
real ch0SmTR1 ;
real ch0RmTR0 ;
real ch0RmTR1 ;

automaton p0 :
initial : 0
state 0 :
to 2 : when true , 1 ! ch0SmTR0 ;


state 1 :
to 0 : when true , 2 ! ep0L ;


state 2 :
to 3 : when true , 0 ! m ;


state 3 :
to 1 : when true , 1 ! ch0SmTR1 ;



automaton p1 :
initial : 0
state 0 :
to 2 : when true , 1 ! ch0RmTR0 ;


state 1 :
to 0 : when true , 2 ! fp1L ;


state 2 :
to 3 : when true , 0 ? m ;


state 3 :
to 1 : when true , 1 ! ch0RmTR1 ;




bad_states:
(automaton p0: in 1: true
automaton p1: in 1: true
with _ . # . (ch0RmTR0 . ch0RmTR1)^+ . (ch0SmTR0 | ch0SmTR1 | ch0RmTR0 | ch0RmTR1)^* . # . (ep0L | fp1L)^*
)

Mar 03, 2014 11:33:12 PM dynoptic.model.fifosys.cfsm.fsm.FSMTests scmString
INFO: initial : 0
state 0 :
to 1 : when true , 0 ! m ;


state 1 :
to 0 : when true , 1 ! ep1L ;



Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.cfsm.fsm.BadStateTests createAndScmString
INFO: (automaton p0: in 0: true
automaton p1: in 2: true
with .* . # . .*
)
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.cfsm.fsm.BadStateTests createAndScmString
INFO: (automaton p0: in 0: true
automaton p1: in 2: true
with .* . # . .*
)
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.cfsm.fsm.FSMStateTests scmString
INFO: state 0 :

Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.cfsm.fsm.FSMStateTests scmString
INFO: state 0 :
to 1 : when true , 0 ! m ;
to 1 : when true , 1 ! ep1L ;

Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.cfsm.fsm.FSMStateTests checkInitAcceptPid
INFO: 0
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.cfsm.fsm.FSMStateTests checkInitAcceptPid
INFO: 1
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.channel.channelid.ChannelIdTests invChannelId
INFO: 0-ch-[(ep0L) AFby (fp0L)]:0->0
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.channel.channelid.ChannelIdTests createChannelId
INFO: 0-1->2:1->2
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.channel.channelid.ChannelIdTests createChannelId
INFO: 0-ChName:1->2
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.channel.channelid.ChannelIdTests localEventsChannelId
INFO: 42-ch-locals:0->0
Mar 03, 2014 11:33:13 PM synoptic.model.channelid.ChannelId parseChannelSpec
INFO: Parsed ChannelId : 0-M:0->1
Mar 03, 2014 11:33:13 PM synoptic.model.channelid.ChannelId parseChannelSpec
INFO: Parsed ChannelId : 1-A:1->0
Mar 03, 2014 11:33:13 PM synoptic.model.channelid.ChannelId parseChannelSpec
INFO: Parsed ChannelId : 0-M:0->1
Mar 03, 2014 11:33:13 PM synoptic.model.channelid.ChannelId parseChannelSpec
INFO: Parsed ChannelId : 1-A:1->0
Mar 03, 2014 11:33:13 PM synoptic.model.channelid.ChannelId parseChannelSpec
INFO: Parsed ChannelId : 0-M:22->100
Mar 03, 2014 11:33:13 PM synoptic.model.channelid.ChannelId parseChannelSpec
INFO: Parsed ChannelId : 0-M:0->1
Mar 03, 2014 11:33:13 PM synoptic.model.channelid.ChannelId parseChannelSpec
INFO: Parsed ChannelId : 0-M:0->1
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests toStringCheck
INFO: ChStates[0-1->2:1->2: [], 1-2->1:2->1: []]
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.GFSMStateTests stateWithObs
INFO: [0]
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.GFSMStateTests createGFSMState
INFO: []
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.GFSM addToQueueContentsHashMap
INFO: Creating a new partition for ch-states like: ChState]
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.GFSM getCFSM
INFO: GFSM -> CFSM: GFSM[num-states=1] : 
	[3, 4]

Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.GFSM getCFSM
INFO: Building FSM for pid 0
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.GFSM getCFSM
INFO: GFSMState->FSMState[pid=0] stateMap : {[3, 4]=0}
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.GFSM addToQueueContentsHashMap
INFO: Creating a new partition for ch-states like: ChState]
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.GFSM addToQueueContentsHashMap
INFO: Creating a new partition for ch-states like: ChState]
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.GFSM addToQueueContentsHashMap
INFO: Creating a new partition for ch-states like: ChState]
Mar 03, 2014 11:33:13 PM dynoptic.model.export.GraphExporter exportGFSM
INFO: Exporting GFSM to: ./test.dot
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests create
INFO: FSMStates[p_t, q_t]
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests createConsistentAnonInit
INFO: i_a0
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests createNamed
INFO: a
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests createConsistentAnonIntermediate
INFO: a0.ep0L
Mar 03, 2014 11:33:13 PM dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests checkCreate
INFO: 11
Mar 03, 2014 11:33:13 PM mcscm.McScMTests testEmptyScmInput
INFO: Verify threw an exception: java.io.IOException: Cannot run program "../bin/mcscm/verify.native.linux.static" (in directory "."): error=2, No such file or directory
Mar 03, 2014 11:33:13 PM mcscm.McScMTests testSafeScmInput
INFO: Verify threw an exception: java.io.IOException: Cannot run program "../bin/mcscm/verify.native.linux.static" (in directory "."): error=2, No such file or directory
Mar 03, 2014 11:33:13 PM mcscm.McScMTests testUnsafeScmInputLen1
INFO: Verify threw an exception: java.io.IOException: Cannot run program "../bin/mcscm/verify.native.linux.static" (in directory "."): error=2, No such file or directory
Mar 03, 2014 11:33:13 PM mcscm.McScMTests testUnsafeScmInputLen2
INFO: Verify threw an exception: java.io.IOException: Cannot run program "../bin/mcscm/verify.native.linux.static" (in directory "."): error=2, No such file or directory
0-th run
Pass: 47, Fail: 0, Error: 12
{dynoptic.model.fifosys.cfsm.CFSMTests.augmentWithNFby=PASS, dynoptic.model.fifosys.cfsm.CFSMTests.augmentWithAP=PASS, dynoptic.model.fifosys.cfsm.McScMCFSMTests.verifyAFby=ERROR, dynoptic.model.fifosys.cfsm.McScMCFSMTests.verifyNFby=ERROR, dynoptic.model.fifosys.cfsm.McScMCFSMTests.verifyAP=ERROR, dynoptic.model.fifosys.cfsm.fsm.FSMTests.scmString=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMTests.createFSM=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMTests.createFSMWithTxns=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMTests.createBadFSM1=ERROR, dynoptic.model.fifosys.cfsm.fsm.FSMTests.createBadFSM2=ERROR, dynoptic.model.fifosys.cfsm.fsm.BadStateTests.createAndScmString=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.minimizeTest=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicOneStateNoTransition=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicOneStateWithTransition=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicTwoStatesOneTransition=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.isDeterministicTwoStatesTwoTransitions=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.nonDeterministicSingleInitState=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.nonDeterministicMultipleInitStates=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.scmString=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.checkInitAcceptPid=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.oneTransition=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.twoTransitions=PASS, dynoptic.model.fifosys.cfsm.fsm.FSMStateTests.wrongEventPid=ERROR, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.invChannelId=PASS, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createChannelId=PASS, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.createBadChannelId=ERROR, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelId=PASS, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.localEventsChannelIdMapping=PASS, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.channelIdEquals=PASS, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIds=PASS, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorDuplicateChNames=PASS, dynoptic.model.fifosys.channel.channelid.ChannelIdTests.parseChannelIdsErrorUnparseable=PASS, dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.equals=PASS, dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.isEmpty=PASS, dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.cloneMCState=PASS, dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.toStringCheck=PASS, dynoptic.model.fifosys.channel.channelstate.MutibleMultiChStateTests.enqueueDequeueSeq=PASS, dynoptic.model.fifosys.gfsm.GFSMStateTests.stateWithObs=PASS, dynoptic.model.fifosys.gfsm.GFSMStateTests.createGFSMState=PASS, dynoptic.model.fifosys.gfsm.GFSMPathTests.createPath=PASS, dynoptic.model.fifosys.gfsm.GFSMTests.gfsmToCFSM=PASS, dynoptic.model.fifosys.gfsm.GFSMTests.createEmptyGFSM=PASS, dynoptic.model.fifosys.gfsm.GFSMTests.checkGFSMFromOneTrace=PASS, dynoptic.model.fifosys.gfsm.GFSMTests.exportGFSM=ERROR, dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.buildInstance=PASS, dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.traceIds=PASS, dynoptic.model.fifosys.gfsm.observed.ObsDistEventTypeTests.equality=PASS, dynoptic.model.fifosys.gfsm.observed.ObsMultFSMStateTests.create=PASS, dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonInit=PASS, dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createAnon=PASS, dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createNamed=PASS, dynoptic.model.fifosys.gfsm.observed.ObsFSMStateTests.createConsistentAnonIntermediate=PASS, dynoptic.model.fifosys.gfsm.observed.dag.ObsDagNodeTests.create=PASS, dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkCreate=PASS, dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysStateTests.checkTxns=PASS, mcscm.McScMTests.testEmptyScmInput=ERROR, mcscm.McScMTests.testSafeScmInput=ERROR, mcscm.McScMTests.testUnsafeScmInputLen1=ERROR, mcscm.McScMTests.testUnsafeScmInputLen2=ERROR}


