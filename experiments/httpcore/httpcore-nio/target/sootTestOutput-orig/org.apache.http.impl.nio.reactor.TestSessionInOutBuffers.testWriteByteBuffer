org.apache.http.testserver.HttpServerNio.join : $r1 = r0.<org.apache.http.testserver.HttpServerNio: org.apache.http.testserver.HttpServerNio$IOReactorThread thread>
org.apache.http.testserver.HttpServerNio.join : $r2 = r0.<org.apache.http.testserver.HttpServerNio: org.apache.http.testserver.HttpServerNio$IOReactorThread thread>
org.apache.http.impl.nio.reactor.SessionOutputBufferImpl.flush : return i0
org.apache.http.impl.nio.reactor.SessionOutputBufferImpl.flush : if r1 != null goto virtualinvoke r0.<org.apache.http.impl.nio.reactor.SessionOutputBufferImpl: void setOutputMode()>()
org.apache.http.impl.nio.reactor.SessionOutputBufferImpl.flush : $r3 = r0.<org.apache.http.impl.nio.reactor.SessionOutputBufferImpl: java.nio.ByteBuffer buffer>
org.apache.http.impl.nio.reactor.SessionOutputBufferImpl.flush : virtualinvoke r0.<org.apache.http.impl.nio.reactor.SessionOutputBufferImpl: void setOutputMode()>()
org.apache.http.nio.util.ExpandableBuffer.setInputMode : $i0 = r0.<org.apache.http.nio.util.ExpandableBuffer: int mode>
org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor.shutdown : exitmonitor r1
org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor.shutdown : virtualinvoke r0.<org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor: void shutdown(long)>(2000L)
org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor.shutdown : $r3 = r0.<org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor: java.lang.Object statusLock>
org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor.shutdown : $r4 = r0.<org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor: org.apache.http.nio.reactor.IOReactorStatus status>
org.apache.http.impl.nio.reactor.SessionOutputBufferImpl.write : virtualinvoke r0.<org.apache.http.impl.nio.reactor.SessionOutputBufferImpl: void setInputMode()>()
org.apache.http.impl.nio.reactor.SessionOutputBufferImpl.write : if r1 != null goto virtualinvoke r0.<org.apache.http.impl.nio.reactor.SessionOutputBufferImpl: void setInputMode()>()
org.apache.http.impl.nio.reactor.SessionOutputBufferImpl.write : $r2 = r0.<org.apache.http.impl.nio.reactor.SessionOutputBufferImpl: java.nio.ByteBuffer buffer>
org.apache.http.nio.util.HeapByteBufferAllocator.allocate : $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0)
org.apache.http.testserver.HttpClientNio.join : $r1 = r0.<org.apache.http.testserver.HttpClientNio: org.apache.http.testserver.HttpClientNio$IOReactorThread thread>
org.apache.http.testserver.HttpClientNio.join : $r2 = r0.<org.apache.http.testserver.HttpClientNio: org.apache.http.testserver.HttpClientNio$IOReactorThread thread>
org.apache.http.testserver.HttpServerNio.shutdown : $r2 = r0.<org.apache.http.testserver.HttpServerNio: org.apache.http.impl.nio.reactor.DefaultListeningIOReactor ioReactor>
org.apache.http.testserver.HttpServerNio.shutdown : goto [?= return]
org.apache.http.testserver.HttpServerNio.shutdown : virtualinvoke r0.<org.apache.http.testserver.HttpServerNio: void join(long)>(500L)
org.apache.http.impl.nio.reactor.TestSessionInOutBuffers.newChannel : $r1 = new java.io.ByteArrayInputStream
org.apache.http.impl.nio.reactor.TestSessionInOutBuffers.newChannel : $r1 = staticinvoke <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>(r0)
org.apache.http.nio.util.ExpandableBuffer.setOutputMode : $i0 = r0.<org.apache.http.nio.util.ExpandableBuffer: int mode>
org.apache.http.nio.util.ExpandableBuffer.setOutputMode : r0.<org.apache.http.nio.util.ExpandableBuffer: int mode> = 1
org.apache.http.nio.util.ExpandableBuffer.setOutputMode : $r1 = r0.<org.apache.http.nio.util.ExpandableBuffer: java.nio.ByteBuffer buffer>
org.apache.http.testserver.HttpClientNio.shutdown : virtualinvoke r0.<org.apache.http.testserver.HttpClientNio: void join(long)>(500L)
org.apache.http.testserver.HttpClientNio.shutdown : $r2 = r0.<org.apache.http.testserver.HttpClientNio: org.apache.http.impl.nio.reactor.DefaultConnectingIOReactor ioReactor>
org.apache.http.testserver.HttpClientNio.shutdown : goto [?= return]
