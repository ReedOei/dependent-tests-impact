org.apache.http.nio.pool.AbstractNIOConnPool.requestTimeout : $r6 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Set pending>
org.apache.http.nio.pool.AbstractNIOConnPool.requestTimeout : r2 = interfaceinvoke r1.<org.apache.http.nio.reactor.SessionRequest: java.lang.Object getAttachment()>()
org.apache.http.nio.pool.AbstractNIOConnPool.requestTimeout : $r7 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.requestTimeout : $z0 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: boolean isShutDown>
org.apache.http.nio.pool.AbstractNIOConnPool.requestTimeout : goto [?= return]
org.apache.http.nio.pool.AbstractNIOConnPool.requestTimeout : $r5 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.requestTimeout : virtualinvoke r3.<org.apache.http.nio.pool.RouteSpecificPool: void timeout(org.apache.http.nio.reactor.SessionRequest)>(r1)
org.apache.http.nio.pool.AbstractNIOConnPool.requestTimeout : r3 = specialinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: org.apache.http.nio.pool.RouteSpecificPool getPool(java.lang.Object)>(r2)
org.apache.http.nio.pool.RouteSpecificPool.removeRequest : return r2
org.apache.http.nio.pool.RouteSpecificPool.removeRequest : if r2 != null goto return r2
org.apache.http.nio.pool.RouteSpecificPool.removeRequest : $r3 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.Map pending>
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.resolveRemoteAddress : $r2 = (java.lang.String) r1
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.resolveRemoteAddress : $r2 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(r1, 80)
org.apache.http.nio.pool.RouteSpecificPool.getFree : return null
org.apache.http.nio.pool.RouteSpecificPool.getFree : $r4 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.AbstractNIOConnPool.getPool : return r2
org.apache.http.nio.pool.AbstractNIOConnPool.getPool : $r6 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Map routeToPool>
org.apache.http.nio.pool.AbstractNIOConnPool.getPool : $r3 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Map routeToPool>
org.apache.http.nio.pool.AbstractNIOConnPool.getPool : if r2 != null goto return r2
org.apache.http.nio.pool.AbstractNIOConnPool.getPool : $r5 = new org.apache.http.nio.pool.AbstractNIOConnPool$1
org.apache.http.nio.pool.AbstractNIOConnPool.getMaxPerRoute : if r2 == null goto $i1 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: int defaultMaxPerRoute>
org.apache.http.nio.pool.AbstractNIOConnPool.getMaxPerRoute : $r3 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Map maxPerRoute>
org.apache.http.nio.pool.AbstractNIOConnPool.getMaxPerRoute : $i1 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: int defaultMaxPerRoute>
org.apache.http.nio.pool.LeaseRequest.getConnectTimeout : $l0 = r0.<org.apache.http.nio.pool.LeaseRequest: long connectTimeout>
org.apache.http.nio.pool.RouteSpecificPool.getAllocatedCount : $r1 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : interfaceinvoke r1.<java.util.ListIterator: void remove()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $l19 = virtualinvoke r2.<org.apache.http.nio.pool.LeaseRequest: long getConnectTimeout()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : n0 = null
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : i2 = specialinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: int getMaxPerRoute(java.lang.Object)>(r3)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $i11 = virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: int getAllocatedCount()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("$z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>()", "org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests")]
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : r13 = virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: org.apache.http.pool.PoolEntry getFree(java.lang.Object)>(r4)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : if i17 != 0 goto $r20 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.LinkedList available>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r25 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: org.apache.http.nio.reactor.ConnectingIOReactor ioreactor>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : goto [?= (branch)]
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : interfaceinvoke r29.<org.apache.http.nio.reactor.SessionRequest: void setConnectTimeout(int)>(i23)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : l0 = virtualinvoke r2.<org.apache.http.nio.pool.LeaseRequest: long getDeadline()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r12 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : if r13 != null goto $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r30 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Set pending>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : r5 = virtualinvoke r2.<org.apache.http.nio.pool.LeaseRequest: org.apache.http.concurrent.BasicFuture getFuture()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : r3 = virtualinvoke r2.<org.apache.http.nio.pool.LeaseRequest: java.lang.Object getRoute()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r18 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Set pending>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : if i3 <= 0 goto $i11 = virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: int getAllocatedCount()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $i15 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: int maxTotal>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $b6 = l1 cmp l0
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: void addPending(org.apache.http.nio.reactor.SessionRequest,org.apache.http.concurrent.BasicFuture)>(r29, r5)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r20 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.LinkedList available>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r11 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.LinkedList leasingRequests>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : if r13 == null goto i2 = specialinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: int getMaxPerRoute(java.lang.Object)>(r3)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $i18 = i17 - 1
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : r7 = specialinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: org.apache.http.nio.pool.RouteSpecificPool getPool(java.lang.Object)>(r3)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : r4 = virtualinvoke r2.<org.apache.http.nio.pool.LeaseRequest: java.lang.Object getState()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $i8 = virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: int getAllocatedCount()>()
org.apache.http.nio.pool.LeaseRequest.getState : $r1 = r0.<org.apache.http.nio.pool.LeaseRequest: java.lang.Object state>
org.apache.http.nio.pool.LeaseRequest.getRoute : $r1 = r0.<org.apache.http.nio.pool.LeaseRequest: java.lang.Object route>
org.apache.http.nio.pool.LeaseRequest.getDeadline : $l0 = r0.<org.apache.http.nio.pool.LeaseRequest: long deadline>
org.apache.http.nio.pool.RouteSpecificPool.timeout : r2 = specialinvoke r0.<org.apache.http.nio.pool.RouteSpecificPool: org.apache.http.concurrent.BasicFuture removeRequest(org.apache.http.nio.reactor.SessionRequest)>(r1)
org.apache.http.nio.pool.RouteSpecificPool.timeout : $r3 = new java.net.SocketTimeoutException
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r15 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.LinkedList leasingRequests>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : r7 = r5
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r16 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : specialinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: void processPendingRequests()>()
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r13 = new org.apache.http.concurrent.BasicFuture
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r14 = new org.apache.http.nio.pool.LeaseRequest
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $z0 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: boolean isShutDown>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : if r3 != null goto $z0 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: boolean isShutDown>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : if r1 != null goto (branch)
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r12 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $b2 = l0 cmp 0L
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.resolveLocalAddress : $r2 = (java.lang.String) r1
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.resolveLocalAddress : $r2 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(r1, 80)
org.apache.http.nio.pool.RouteSpecificPool.addPending : $r3 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.Map pending>
org.apache.http.nio.pool.LeaseRequest.getFuture : $r1 = r0.<org.apache.http.nio.pool.LeaseRequest: org.apache.http.concurrent.BasicFuture future>
org.apache.http.nio.pool.AbstractNIOConnPool.getTotalStats : $r8 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.getTotalStats : $r4 = new org.apache.http.pool.PoolStats
org.apache.http.nio.pool.AbstractNIOConnPool.getTotalStats : $r3 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
