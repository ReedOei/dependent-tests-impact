org.apache.http.nio.pool.RouteSpecificPool.remove : $r3 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.RouteSpecificPool.remove : return 1
org.apache.http.nio.pool.RouteSpecificPool.remove : if r1 != null goto $r3 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.RouteSpecificPool.getFree : $r8 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.Set leased>
org.apache.http.nio.pool.RouteSpecificPool.getFree : $z4 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()
org.apache.http.nio.pool.RouteSpecificPool.getFree : return r3
org.apache.http.nio.pool.RouteSpecificPool.getFree : if r1 == null goto $r9 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.RouteSpecificPool.getFree : $r13 = virtualinvoke r12.<org.apache.http.pool.PoolEntry: java.lang.Object getState()>()
org.apache.http.nio.pool.RouteSpecificPool.getFree : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("$z4 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()", "org.apache.http.nio.pool.RouteSpecificPool.getFree")]
org.apache.http.nio.pool.RouteSpecificPool.getFree : $r5 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.RouteSpecificPool.getFree : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("$z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()", "org.apache.http.nio.pool.RouteSpecificPool.getFree")]
org.apache.http.nio.pool.RouteSpecificPool.getFree : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.http.nio.pool.RouteSpecificPool.getFree : return null
org.apache.http.nio.pool.RouteSpecificPool.getFree : $r9 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.RouteSpecificPool.getFree : $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>()
org.apache.http.nio.pool.RouteSpecificPool.getFree : interfaceinvoke r2.<java.util.Iterator: void remove()>()
org.apache.http.nio.pool.RouteSpecificPool.getFree : $r7 = virtualinvoke r3.<org.apache.http.pool.PoolEntry: java.lang.Object getState()>()
org.apache.http.nio.pool.RouteSpecificPool.getFree : $r4 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.RouteSpecificPool.getFree : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.http.nio.pool.AbstractNIOConnPool.setMaxPerRoute : $r6 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Map maxPerRoute>
org.apache.http.nio.pool.AbstractNIOConnPool.setMaxPerRoute : $r9 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.setMaxPerRoute : goto [?= return]
org.apache.http.nio.pool.AbstractNIOConnPool.setMaxPerRoute : if i0 > 0 goto $r5 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.setMaxPerRoute : if r1 != null goto (branch)
org.apache.http.nio.pool.AbstractNIOConnPool.setMaxPerRoute : $r5 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.RouteSpecificPool.completed : return r4
org.apache.http.nio.pool.RouteSpecificPool.completed : r3 = specialinvoke r0.<org.apache.http.nio.pool.RouteSpecificPool: org.apache.http.concurrent.BasicFuture removeRequest(org.apache.http.nio.reactor.SessionRequest)>(r1)
org.apache.http.nio.pool.RouteSpecificPool.completed : $r6 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.Set leased>
org.apache.http.nio.pool.RouteSpecificPool.completed : $r5 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.lang.Object route>
org.apache.http.nio.pool.RouteSpecificPool.completed : virtualinvoke r3.<org.apache.http.concurrent.BasicFuture: boolean completed(java.lang.Object)>(r4)
org.apache.http.nio.pool.LeaseRequest.getRoute : $r1 = r0.<org.apache.http.nio.pool.LeaseRequest: java.lang.Object route>
org.apache.http.nio.pool.LeaseRequest.getDeadline : $l0 = r0.<org.apache.http.nio.pool.LeaseRequest: long deadline>
org.apache.http.nio.pool.RouteSpecificPool.addPending : $r3 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.Map pending>
org.apache.http.nio.pool.AbstractNIOConnPool.getTotalStats : $r8 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.getTotalStats : $r4 = new org.apache.http.pool.PoolStats
org.apache.http.nio.pool.AbstractNIOConnPool.getTotalStats : $r3 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.RouteSpecificPool.removeRequest : return r2
org.apache.http.nio.pool.RouteSpecificPool.removeRequest : if r2 != null goto return r2
org.apache.http.nio.pool.RouteSpecificPool.removeRequest : $r3 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.Map pending>
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.resolveRemoteAddress : $r2 = (java.lang.String) r1
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.resolveRemoteAddress : $r2 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(r1, 80)
org.apache.http.nio.pool.AbstractNIOConnPool.getPool : return r2
org.apache.http.nio.pool.AbstractNIOConnPool.getPool : $r6 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Map routeToPool>
org.apache.http.nio.pool.AbstractNIOConnPool.getPool : $r3 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Map routeToPool>
org.apache.http.nio.pool.AbstractNIOConnPool.getPool : if r2 != null goto return r2
org.apache.http.nio.pool.AbstractNIOConnPool.getPool : $r5 = new org.apache.http.nio.pool.AbstractNIOConnPool$1
org.apache.http.nio.pool.AbstractNIOConnPool.getMaxPerRoute : $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>()
org.apache.http.nio.pool.AbstractNIOConnPool.getMaxPerRoute : if r2 == null goto $i1 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: int defaultMaxPerRoute>
org.apache.http.nio.pool.AbstractNIOConnPool.getMaxPerRoute : $r3 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Map maxPerRoute>
org.apache.http.nio.pool.AbstractNIOConnPool.release : if z0 == 0 goto virtualinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: void closeEntry(org.apache.http.pool.PoolEntry)>(r1)
org.apache.http.nio.pool.AbstractNIOConnPool.release : if r1 != null goto $z1 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: boolean isShutDown>
org.apache.http.nio.pool.AbstractNIOConnPool.release : $r8 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.release : $r7 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.LinkedList available>
org.apache.http.nio.pool.AbstractNIOConnPool.release : specialinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: void processPendingRequests()>()
org.apache.http.nio.pool.AbstractNIOConnPool.release : virtualinvoke r2.<org.apache.http.nio.pool.RouteSpecificPool: void free(org.apache.http.pool.PoolEntry,boolean)>(r1, z0)
org.apache.http.nio.pool.AbstractNIOConnPool.release : $z1 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: boolean isShutDown>
org.apache.http.nio.pool.AbstractNIOConnPool.release : $r6 = virtualinvoke r1.<org.apache.http.pool.PoolEntry: java.lang.Object getRoute()>()
org.apache.http.nio.pool.AbstractNIOConnPool.release : goto [?= return]
org.apache.http.nio.pool.AbstractNIOConnPool.release : $r5 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Set leased>
org.apache.http.nio.pool.AbstractNIOConnPool.release : $r4 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.closeEntry : $r3 = virtualinvoke r1.<org.apache.http.nio.pool.TestNIOConnPool$LocalPoolEntry: java.lang.Object getConnection()>()
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.closeEntry : interfaceinvoke r2.<org.apache.http.nio.reactor.IOSession: void close()>()
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.closeEntry : $r2 = (org.apache.http.nio.pool.TestNIOConnPool$LocalPoolEntry) r1
org.apache.http.nio.pool.RouteSpecificPool.free : if z0 == 0 goto return
org.apache.http.nio.pool.RouteSpecificPool.free : if r1 != null goto $r3 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.Set leased>
org.apache.http.nio.pool.RouteSpecificPool.free : $r10 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.RouteSpecificPool.free : if z1 != 0 goto (branch)
org.apache.http.nio.pool.RouteSpecificPool.free : $r3 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.Set leased>
org.apache.http.nio.pool.AbstractNIOConnPool$1.createEntry : $r3 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool$1: org.apache.http.nio.pool.AbstractNIOConnPool this$0>
org.apache.http.nio.pool.LeaseRequest.getConnectTimeout : $l0 = r0.<org.apache.http.nio.pool.LeaseRequest: long connectTimeout>
org.apache.http.nio.pool.RouteSpecificPool.getAllocatedCount : $r1 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: boolean remove(org.apache.http.pool.PoolEntry)>(r8)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : if r8 != null goto virtualinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: void closeEntry(org.apache.http.pool.PoolEntry)>(r8)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : interfaceinvoke r1.<java.util.ListIterator: void remove()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $l19 = virtualinvoke r2.<org.apache.http.nio.pool.LeaseRequest: long getConnectTimeout()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : n0 = null
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : i2 = specialinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: int getMaxPerRoute(java.lang.Object)>(r3)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r17 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.LinkedList available>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $i11 = virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: int getAllocatedCount()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : virtualinvoke r5.<org.apache.http.concurrent.BasicFuture: boolean completed(java.lang.Object)>(r13)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("$z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>()", "org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests")]
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $z0 = interfaceinvoke r1.<java.util.ListIterator: boolean hasNext()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : r13 = virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: org.apache.http.pool.PoolEntry getFree(java.lang.Object)>(r4)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : if i17 != 0 goto $r20 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.LinkedList available>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r25 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: org.apache.http.nio.reactor.ConnectingIOReactor ioreactor>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : goto [?= (branch)]
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : interfaceinvoke r29.<org.apache.http.nio.reactor.SessionRequest: void setConnectTimeout(int)>(i23)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : l0 = virtualinvoke r2.<org.apache.http.nio.pool.LeaseRequest: long getDeadline()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r12 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : r8 = virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: org.apache.http.pool.PoolEntry getLastUsed()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : if r13 != null goto $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r30 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Set pending>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : virtualinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: void closeEntry(org.apache.http.pool.PoolEntry)>(r8)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : r5 = virtualinvoke r2.<org.apache.http.nio.pool.LeaseRequest: org.apache.http.concurrent.BasicFuture getFuture()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : r3 = virtualinvoke r2.<org.apache.http.nio.pool.LeaseRequest: java.lang.Object getRoute()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r18 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Set pending>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : if i3 <= 0 goto $i11 = virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: int getAllocatedCount()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $i15 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: int maxTotal>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $b6 = l1 cmp l0
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: void addPending(org.apache.http.nio.reactor.SessionRequest,org.apache.http.concurrent.BasicFuture)>(r29, r5)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r15 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.LinkedList available>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r20 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.LinkedList available>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r11 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.LinkedList leasingRequests>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : if r13 == null goto i2 = specialinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: int getMaxPerRoute(java.lang.Object)>(r3)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $i18 = i17 - 1
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : r7 = specialinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: org.apache.http.nio.pool.RouteSpecificPool getPool(java.lang.Object)>(r3)
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : r4 = virtualinvoke r2.<org.apache.http.nio.pool.LeaseRequest: java.lang.Object getState()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $i8 = virtualinvoke r7.<org.apache.http.nio.pool.RouteSpecificPool: int getAllocatedCount()>()
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : $r16 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Set leased>
org.apache.http.nio.pool.AbstractNIOConnPool.processPendingRequests : i4 = 0
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.createConnection : return r2
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.createConnection : $r3 = (java.lang.String) r1
org.apache.http.nio.pool.AbstractNIOConnPool.requestCompleted : $r9 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Set pending>
org.apache.http.nio.pool.AbstractNIOConnPool.requestCompleted : r2 = interfaceinvoke r1.<org.apache.http.nio.reactor.SessionRequest: java.lang.Object getAttachment()>()
org.apache.http.nio.pool.AbstractNIOConnPool.requestCompleted : $r11 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.requestCompleted : $r8 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.requestCompleted : $r10 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.Set leased>
org.apache.http.nio.pool.AbstractNIOConnPool.requestCompleted : $z0 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: boolean isShutDown>
org.apache.http.nio.pool.AbstractNIOConnPool.requestCompleted : r6 = virtualinvoke r3.<org.apache.http.nio.pool.RouteSpecificPool: org.apache.http.pool.PoolEntry completed(org.apache.http.nio.reactor.SessionRequest,java.lang.Object)>(r1, r5)
org.apache.http.nio.pool.AbstractNIOConnPool.requestCompleted : goto [?= return]
org.apache.http.nio.pool.AbstractNIOConnPool.requestCompleted : r5 = virtualinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.lang.Object createConnection(java.lang.Object,org.apache.http.nio.reactor.IOSession)>(r2, r4)
org.apache.http.nio.pool.AbstractNIOConnPool.requestCompleted : r4 = interfaceinvoke r1.<org.apache.http.nio.reactor.SessionRequest: org.apache.http.nio.reactor.IOSession getSession()>()
org.apache.http.nio.pool.AbstractNIOConnPool.requestCompleted : r3 = specialinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: org.apache.http.nio.pool.RouteSpecificPool getPool(java.lang.Object)>(r2)
org.apache.http.nio.pool.LeaseRequest.getState : $r1 = r0.<org.apache.http.nio.pool.LeaseRequest: java.lang.Object state>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r15 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.LinkedList leasingRequests>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : r7 = r5
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r16 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : specialinvoke r0.<org.apache.http.nio.pool.AbstractNIOConnPool: void processPendingRequests()>()
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r13 = new org.apache.http.concurrent.BasicFuture
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r14 = new org.apache.http.nio.pool.LeaseRequest
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $z0 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: boolean isShutDown>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : if r3 != null goto $z0 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: boolean isShutDown>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : if r1 != null goto (branch)
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $r12 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.lease : $b2 = l0 cmp 0L
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.resolveLocalAddress : $r2 = (java.lang.String) r1
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.resolveLocalAddress : $r2 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(r1, 80)
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.createEntry : $r3 = new org.apache.http.nio.pool.TestNIOConnPool$LocalPoolEntry
org.apache.http.nio.pool.TestNIOConnPool$LocalSessionPool.createEntry : $r3 = (java.lang.String) r1
org.apache.http.nio.pool.RouteSpecificPool.getLastUsed : $r2 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.RouteSpecificPool.getLastUsed : $r1 = r0.<org.apache.http.nio.pool.RouteSpecificPool: java.util.LinkedList available>
org.apache.http.nio.pool.AbstractNIOConnPool.setMaxTotal : if i0 > 0 goto $r3 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.setMaxTotal : $r3 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.AbstractNIOConnPool.setMaxTotal : goto [?= return]
org.apache.http.nio.pool.AbstractNIOConnPool.setMaxTotal : r0.<org.apache.http.nio.pool.AbstractNIOConnPool: int maxTotal> = i0
org.apache.http.nio.pool.AbstractNIOConnPool.setMaxTotal : $r4 = r0.<org.apache.http.nio.pool.AbstractNIOConnPool: java.util.concurrent.locks.Lock lock>
org.apache.http.nio.pool.LeaseRequest.getFuture : $r1 = r0.<org.apache.http.nio.pool.LeaseRequest: org.apache.http.concurrent.BasicFuture future>
