org.apache.zeppelin.interpreter.remote.RemoteInterpreter.connectToExistingProcess : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String host>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : $r19 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : r2 = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : $z0 = specialinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean connectToExistingProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : if r1 != null goto r2 = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: void setRemoteInterpreterProcess(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess)>(r3)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : $r11 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : $r6 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : if r1 != null goto $r3 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: int maxPoolSize>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : $r2 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender: java.util.List log>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.closeInterpreter : $z1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean initialized>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getEnvFromInterpreterProperty : return r3
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getEnvFromInterpreterProperty : $r2 = new java.util.HashMap
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getEnvFromInterpreterProperty : $r6 = virtualinvoke r1.<java.util.Properties: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterTest.createMockInterpreterA : $r8 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterTest.createMockInterpreterA : $r7 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterTest.createMockInterpreterA : $r2 = specialinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterTest: org.apache.zeppelin.interpreter.remote.RemoteInterpreter createMockInterpreterA(java.util.Properties,java.lang.String)>(r1, "note")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterTest.createMockInterpreterA : $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterTest.createMockInterpreterA : $r3 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r16 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreter) r6
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean initialized>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r2 = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : exitmonitor r2
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r10 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionKey>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z2 = r6 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r6 = r5
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r13 = new java.util.ArrayList
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : goto [?= (branch)]
