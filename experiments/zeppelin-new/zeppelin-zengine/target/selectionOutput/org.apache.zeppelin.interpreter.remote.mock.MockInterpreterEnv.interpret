org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r5 = r3[0]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r5 = r3[0] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("getEnv")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("getEnv") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : if $z0 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r6 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r9 = r3[0]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r9 = r3[0] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("getProperty")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("getProperty") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : if $z1 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r10 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r14 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r14 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r15 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code ERROR>
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r15 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code ERROR> >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r16 = r3[0]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r16 = r3[0] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : specialinvoke $r14.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r15, $r16)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : specialinvoke $r14.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r15, $r16) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : return $r14
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r10 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r11 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r11 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r12 = r3[1]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r12 = r3[1] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r13 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>($r12)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r13 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : specialinvoke $r10.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r11, $r13)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : specialinvoke $r10.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r11, $r13) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : return $r10
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r6 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r4 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r4 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r7 = r3[1]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r7 = r3[1] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r8 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : $r8 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r4, $r8)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r4, $r8) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterEnv.interpret : return $r6
