org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r4 = r3[0]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r4 = r3[0] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r5 = null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r5 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r6 = null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r6 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r7 = null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r7 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $i0 = lengthof r3
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $i0 = lengthof r3 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i0 < 2
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i0 < 2 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r13 = r3[1]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i0 < 2 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r14 = null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r14 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $i2 = lengthof r3
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $i2 = lengthof r3 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i2 < 3
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i2 < 3 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r14 = r3[2]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i2 < 3 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r9 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r9 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("put")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("put") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z0 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: void put(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r5, r6, r7, r14)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $z1 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("get")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $z1 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("get") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z1 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r11 = interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.Resource get(java.lang.String,java.lang.String,java.lang.String)>(r5, r6, r7)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("remove")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("remove") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z2 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.Resource remove(java.lang.String,java.lang.String,java.lang.String)>(r5, r6, r7)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("getAll")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("getAll") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z3 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("invoke")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("invoke") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z4 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r16 = interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.Resource get(java.lang.String,java.lang.String,java.lang.String)>(r5, r6, r7)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r18 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r19 = $r18 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r20 = new com.google.gson.Gson
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r20 = new com.google.gson.Gson >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : specialinvoke $r20.<com.google.gson.Gson: void <init>()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : specialinvoke $r20.<com.google.gson.Gson: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r21 = $r20
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r21 = $r20 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r22 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r22 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r23 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r23 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r24 = virtualinvoke r21.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r10)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r24 = virtualinvoke r21.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : specialinvoke $r22.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r23, $r24)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : specialinvoke $r22.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r23, $r24) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : return $r22
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= $r20 = new com.google.gson.Gson]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r18 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= $r20 = new com.google.gson.Gson] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r20 = new com.google.gson.Gson
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r16 = interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.Resource get(java.lang.String,java.lang.String,java.lang.String)>(r5, r6, r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $i3 = lengthof r3
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $i3 = lengthof r3 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i3 < 4
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i3 < 4 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r17 = r3[3]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i3 < 4 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = virtualinvoke r16.<org.apache.zeppelin.resource.Resource: java.lang.Object invokeMethod(java.lang.String,java.lang.Class[],java.lang.Object[])>(r14, null, null)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = virtualinvoke r16.<org.apache.zeppelin.resource.Resource: java.lang.Object invokeMethod(java.lang.String,java.lang.Class[],java.lang.Object[])>(r14, null, null) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = virtualinvoke r16.<org.apache.zeppelin.resource.Resource: java.lang.Object invokeMethod(java.lang.String,java.lang.Class[],java.lang.Object[])>(r14, null, null) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r18 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r17 = r3[3] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r12 = virtualinvoke r16.<org.apache.zeppelin.resource.Resource: org.apache.zeppelin.resource.Resource invokeMethod(java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.String)>(r14, null, null, $r17)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r12 = virtualinvoke r16.<org.apache.zeppelin.resource.Resource: org.apache.zeppelin.resource.Resource invokeMethod(java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.String)>(r14, null, null, $r17) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = virtualinvoke r12.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = virtualinvoke r12.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r18 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r18 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.Resource remove(java.lang.String,java.lang.String,java.lang.String)>(r5, r6, r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r18 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r11 = interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.Resource get(java.lang.String,java.lang.String,java.lang.String)>(r5, r6, r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if r11 == null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if r11 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r15 = interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.Resource get(java.lang.String,java.lang.String,java.lang.String)>(r5, r6, r7)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if r11 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = ""
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = "" >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r18 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r15 = interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.Resource get(java.lang.String,java.lang.String,java.lang.String)>(r5, r6, r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = virtualinvoke $r15.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r10 = virtualinvoke $r15.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= (branch)]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : interfaceinvoke r9.<org.apache.zeppelin.resource.ResourcePool: void put(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r5, r6, r7, r14) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(500L)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= staticinvoke <java.lang.Thread: void sleep(long)>(500L)] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r18 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r14 = r3[2] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r9 = virtualinvoke r2.<org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $r13 = r3[1] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r8 = virtualinvoke $r13.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r8 = virtualinvoke $r13.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $i1 = lengthof r8
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : $i1 = lengthof r8 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i1 < 3
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i1 < 3 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r5 = r8[0]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : if $i1 < 3 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r7 = r3[1]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r7 = r3[1] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r14 = null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r5 = r8[0] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r6 = r8[1]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r6 = r8[1] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r7 = r8[2]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r7 = r8[2] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= r14 = null]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : goto [?= r14 = null] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterResourcePool.interpret : r14 = null
