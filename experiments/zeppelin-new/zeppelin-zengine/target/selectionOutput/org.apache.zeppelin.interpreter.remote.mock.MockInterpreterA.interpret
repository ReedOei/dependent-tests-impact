org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : r3 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r5 = new org.apache.zeppelin.interpreter.InterpreterException
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r5 = new org.apache.zeppelin.interpreter.InterpreterException >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : specialinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>(r3)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : specialinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : throw $r5
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l0)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l0) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA: java.lang.String lastSt> = r1
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : staticinvoke <java.lang.Thread: void sleep(long)>($l0) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA: java.lang.String lastSt> = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : goto [?= $r6 = new org.apache.zeppelin.interpreter.InterpreterResult]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA: java.lang.String lastSt> = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : goto [?= $r6 = new org.apache.zeppelin.interpreter.InterpreterResult] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r6 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r6 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r7 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : $r7 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r7, r1)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : specialinvoke $r6.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r7, r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA.interpret : return $r6
