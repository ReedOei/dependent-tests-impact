org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : r3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB: org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA getInterpreterA()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA: java.lang.String getLastStatement()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : r4 = virtualinvoke r3.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA: java.lang.String getLastStatement()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : if r4 == null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r4)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(l0)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $r6 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : r5 = $r6 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $r7 = new org.apache.zeppelin.interpreter.InterpreterException
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $r7 = new org.apache.zeppelin.interpreter.InterpreterException >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : specialinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>(r5)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : specialinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : throw $r7
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(l0) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : goto [?= $r8 = new org.apache.zeppelin.interpreter.InterpreterResult]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(l0) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $r6 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : goto [?= $r8 = new org.apache.zeppelin.interpreter.InterpreterResult] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $r8 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $r8 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $r9 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $r9 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : specialinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r9, $r10)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : specialinvoke $r8.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r9, $r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : return $r8
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : l0 = l0 + $l1
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : l0 = l0 + $l1 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : staticinvoke <java.lang.Thread: void sleep(long)>(l0)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : l0 = l0 + $l1 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.interpret : $r6 := @caughtexception
