org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r11 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r12 = virtualinvoke $r11.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>(r4, class "org/apache/zeppelin/interpreter/remote/InvokeResourceMethodEventMessage")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r12 = virtualinvoke $r11.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>(r4, class "org/apache/zeppelin/interpreter/remote/InvokeResourceMethodEventMessage") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r5 = (org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage) $r12
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r5 = (org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage) $r12 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r13 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.resource.DistributedResourcePool resourcePool>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r13 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.resource.DistributedResourcePool resourcePool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r6 = virtualinvoke $r13.<org.apache.zeppelin.resource.DistributedResourcePool: org.apache.zeppelin.resource.Resource get(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r6 = virtualinvoke $r13.<org.apache.zeppelin.resource.DistributedResourcePool: org.apache.zeppelin.resource.Resource get(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if r6 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if r6 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r14 = virtualinvoke r6.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if r6 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r15 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r15 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : return $r15
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r14 = virtualinvoke r6.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if $r14 != null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if $r14 != null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r15 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if $r14 != null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r7 = virtualinvoke r6.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if $r14 != null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r26 = $r25 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r27 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r27 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r28 = virtualinvoke r26.<java.lang.Exception: java.lang.String getMessage()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r28 = virtualinvoke r26.<java.lang.Exception: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : interfaceinvoke $r27.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r28, r26)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : interfaceinvoke $r27.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r28, r26) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r29 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r29 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : return $r29
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r7 = virtualinvoke r6.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r16 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r7 = virtualinvoke r6.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r16 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r17 = r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.String methodName>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r16 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r17 = r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.String methodName> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r18 = virtualinvoke r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.Class[] getParamTypes()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r17 = r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.String methodName> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r18 = virtualinvoke r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.Class[] getParamTypes()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r8 = virtualinvoke $r16.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r17, $r18)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r18 = virtualinvoke r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.Class[] getParamTypes()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r8 = virtualinvoke $r16.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r17, $r18) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r19 = r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.Object[] params>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r8 = virtualinvoke $r16.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r17, $r18) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r19 = r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.Object[] params> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r9 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r19)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r19 = r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.Object[] params> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r9 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r19) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $z0 = virtualinvoke r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: boolean shouldPutResultIntoResourcePool()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r9 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r7, $r19) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $z0 = virtualinvoke r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: boolean shouldPutResultIntoResourcePool()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $z0 = virtualinvoke r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: boolean shouldPutResultIntoResourcePool()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r20 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.resource.DistributedResourcePool resourcePool>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r10 = staticinvoke <org.apache.zeppelin.resource.Resource: java.nio.ByteBuffer serializeObject(java.lang.Object)>(r9)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r10 = staticinvoke <org.apache.zeppelin.resource.Resource: java.nio.ByteBuffer serializeObject(java.lang.Object)>(r9) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if r10 != null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : r10 = staticinvoke <org.apache.zeppelin.resource.Resource: java.nio.ByteBuffer serializeObject(java.lang.Object)>(r9) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if r10 != null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r23 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if r10 != null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : return r10
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : if r10 != null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r23 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : return $r23
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r23 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r20 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.resource.DistributedResourcePool resourcePool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r21 = r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.String returnResourceName>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r20 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.resource.DistributedResourcePool resourcePool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r21 = r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.String returnResourceName> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : virtualinvoke $r20.<org.apache.zeppelin.resource.DistributedResourcePool: void put(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r1, r2, $r21, r9)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r21 = r5.<org.apache.zeppelin.interpreter.remote.InvokeResourceMethodEventMessage: java.lang.String returnResourceName> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : virtualinvoke $r20.<org.apache.zeppelin.resource.DistributedResourcePool: void put(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r1, r2, $r21, r9) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r22 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : virtualinvoke $r20.<org.apache.zeppelin.resource.DistributedResourcePool: void put(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r1, r2, $r21, r9) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r22 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : return $r22
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r22 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceInvokeMethod : $r25 := @caughtexception
