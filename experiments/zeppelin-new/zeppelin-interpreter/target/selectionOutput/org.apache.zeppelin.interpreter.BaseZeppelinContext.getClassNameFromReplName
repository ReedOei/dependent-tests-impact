org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r4 = virtualinvoke r0.<org.apache.zeppelin.interpreter.BaseZeppelinContext: java.util.Map getInterpreterClassMap()>() >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : if $z0 == 0
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("spark.")
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("spark.") >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : if $z2 == 0
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : r1 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("spark.", "")
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.BaseZeppelinContext: java.util.Map getInterpreterClassMap()>()
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.BaseZeppelinContext: java.util.Map getInterpreterClassMap()>() >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r9 = (java.lang.String) $r8
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r9 = (java.lang.String) $r8 >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : return $r9
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : r1 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("spark.", "") >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.BaseZeppelinContext: java.util.Map getInterpreterClassMap()>()
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : r3 = (java.lang.String) $r6
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : r3 = (java.lang.String) $r6 >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : if $z1 == 0
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : return r1
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.BaseZeppelinContext.getClassNameFromReplName : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
