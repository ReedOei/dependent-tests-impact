org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Request resourceGet {} from ZeppelinServer", r3)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Request resourceGet {} from ZeppelinServer", r3) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r7 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.resource.DistributedResourcePool resourcePool>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r7 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.resource.DistributedResourcePool resourcePool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : r4 = virtualinvoke $r7.<org.apache.zeppelin.resource.DistributedResourcePool: org.apache.zeppelin.resource.Resource get(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : r4 = virtualinvoke $r7.<org.apache.zeppelin.resource.DistributedResourcePool: org.apache.zeppelin.resource.Resource get(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : if r4 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r8 = virtualinvoke r4.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : return $r9
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r8 = virtualinvoke r4.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : if $r8 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : if $r8 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $z0 = virtualinvoke r4.<org.apache.zeppelin.resource.Resource: boolean isSerializable()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : if $r8 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $z0 = virtualinvoke r4.<org.apache.zeppelin.resource.Resource: boolean isSerializable()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r10 = virtualinvoke r4.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r12 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : r5 = $r12 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r13 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r13 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r14 = virtualinvoke r5.<java.io.IOException: java.lang.String getMessage()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r14 = virtualinvoke r5.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r14, r5)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r14, r5) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r15 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r15 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : return $r15
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r10 = virtualinvoke r4.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r11 = staticinvoke <org.apache.zeppelin.resource.Resource: java.nio.ByteBuffer serializeObject(java.lang.Object)>($r10)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r10 = virtualinvoke r4.<org.apache.zeppelin.resource.Resource: java.lang.Object get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r12 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r11 = staticinvoke <org.apache.zeppelin.resource.Resource: java.nio.ByteBuffer serializeObject(java.lang.Object)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : return $r11
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r11 = staticinvoke <org.apache.zeppelin.resource.Resource: java.nio.ByteBuffer serializeObject(java.lang.Object)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.resourceGet : $r12 := @caughtexception
