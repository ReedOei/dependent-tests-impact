org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : n0 = null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r2 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r2 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r1 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r1 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : specialinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r1, "some text before %table col1\tcol2\naaa\t123\n")
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : specialinvoke $r2.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r1, "some text before %table col1\tcol2\naaa\t123\n") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : r3 = $r2
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : r3 = $r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r4 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TABLE>
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r4 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TABLE> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r5 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>()
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r5 = virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r7 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r6
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r7 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r8 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>()
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r8 = virtualinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("some text before magic return magic", $r4, $r8)
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("some text before magic return magic", $r4, $r8) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r9 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r9 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r10 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r10 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : specialinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r10, "%html  <h3> This is a hack </h3> %table\n col1\tcol2\naaa\t123\n")
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : specialinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r10, "%html  <h3> This is a hack </h3> %table\n col1\tcol2\naaa\t123\n") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : r11 = $r9
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : r11 = $r9 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r12 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type HTML>
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r12 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type HTML> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r13 = virtualinvoke r11.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>()
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r13 = virtualinvoke r11.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r15 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r14
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r15 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r14 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r16 = virtualinvoke $r15.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>()
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r16 = virtualinvoke $r15.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("magic A before magic B return magic A", $r12, $r16)
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("magic A before magic B return magic A", $r12, $r16) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r17 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r17 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r18 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r18 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : specialinvoke $r17.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r18, "some text before magic word %table col1\tcol2\naaa\t123\n %html  <h3> This is a hack </h3>")
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : specialinvoke $r17.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r18, "some text before magic word %table col1\tcol2\naaa\t123\n %html  <h3> This is a hack </h3>") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : r19 = $r17
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : r19 = $r17 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r20 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TABLE>
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r20 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TABLE> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r21 = virtualinvoke r19.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>()
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r21 = virtualinvoke r19.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r23 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r22
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r23 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r22 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r24 = virtualinvoke $r23.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>()
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r24 = virtualinvoke $r23.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("text & magic A before magic B return magic A", $r20, $r24)
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("text & magic A before magic B return magic A", $r20, $r24) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r25 = new org.apache.zeppelin.interpreter.InterpreterResult
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r25 = new org.apache.zeppelin.interpreter.InterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r26 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS>
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r26 = <org.apache.zeppelin.interpreter.InterpreterResult$Code: org.apache.zeppelin.interpreter.InterpreterResult$Code SUCCESS> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : specialinvoke $r25.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r26, "%table col1\tcol2\naaa\t123\n %html  <h3> This is a hack </h3> %table col1\naaa\n123\n")
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : specialinvoke $r25.<org.apache.zeppelin.interpreter.InterpreterResult: void <init>(org.apache.zeppelin.interpreter.InterpreterResult$Code,java.lang.String)>($r26, "%table col1\tcol2\naaa\t123\n %html  <h3> This is a hack </h3> %table col1\naaa\n123\n") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : r27 = $r25
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : r27 = $r25 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r28 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TABLE>
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r28 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TABLE> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r29 = virtualinvoke r27.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>()
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r29 = virtualinvoke r27.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r30 = interfaceinvoke $r29.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r30 = interfaceinvoke $r29.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r31 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r30
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r31 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r30 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r32 = virtualinvoke $r31.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>()
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : $r32 = virtualinvoke $r31.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("magic A, magic B, magic a\' return magic A", $r28, $r32)
org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("magic A, magic B, magic a\' return magic A", $r28, $r32) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultTest.testComplexMagicType : return
