org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r3 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r3.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r3.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r4 = $r3
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r4 = $r3 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r4.<java.util.Collection: boolean addAll(java.util.Collection)>(r2)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r4.<java.util.Collection: boolean addAll(java.util.Collection)>(r2) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r11 = r0.<org.apache.zeppelin.dep.DependencyResolver: java.lang.String[] exclusions>
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r11 = r0.<org.apache.zeppelin.dep.DependencyResolver: java.lang.String[] exclusions> >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r4.<java.util.Collection: boolean addAll(java.util.Collection)>($r12)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r4.<java.util.Collection: boolean addAll(java.util.Collection)>($r12) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r5 = virtualinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List getArtifactsWithDep(java.lang.String,java.util.Collection)>(r1, r4)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r5 = virtualinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List getArtifactsWithDep(java.lang.String,java.util.Collection)>(r1, r4) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z2 == 0
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z2 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z2 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r25 = new java.util.LinkedList
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r25 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r25.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r25.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r26 = $r25
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r26 = $r25 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r27 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r27 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z5 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z5 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z5 == 0
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z5 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r28 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z5 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : return r26
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r28 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r29 = (org.sonatype.aether.resolution.ArtifactResult) $r28
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r29 = (org.sonatype.aether.resolution.ArtifactResult) $r28 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r30 = virtualinvoke r29.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r30 = virtualinvoke r29.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r31 = interfaceinvoke $r30.<org.sonatype.aether.artifact.Artifact: java.io.File getFile()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r31 = interfaceinvoke $r30.<org.sonatype.aether.artifact.Artifact: java.io.File getFile()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>($r31)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>($r31) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r32 = r0.<org.apache.zeppelin.dep.DependencyResolver: org.slf4j.Logger logger>
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r32 = r0.<org.apache.zeppelin.dep.DependencyResolver: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r33 = virtualinvoke r29.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r33 = virtualinvoke r29.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r34 = interfaceinvoke $r33.<org.sonatype.aether.artifact.Artifact: java.io.File getFile()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r34 = interfaceinvoke $r33.<org.sonatype.aether.artifact.Artifact: java.io.File getFile()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r35 = virtualinvoke $r34.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r35 = virtualinvoke $r34.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke $r32.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("load {}", $r35)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke $r32.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("load {}", $r35) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z5 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z5 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z5 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r14 = (org.sonatype.aether.resolution.ArtifactResult) $r13
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r14 = (org.sonatype.aether.resolution.ArtifactResult) $r13 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r7 = virtualinvoke $r14.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r7 = virtualinvoke $r14.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r16 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getGroupId()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r16 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getGroupId()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r19 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getArtifactId()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r19 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getArtifactId()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r22 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getVersion()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r22 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getVersion()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r8 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r8 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r9 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r9 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z3 == 0
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z3 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r24 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z3 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r24 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r10 = (java.lang.String) $r24
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r10 = (java.lang.String) $r24 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z4 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>(r10)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z4 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>(r10) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z4 == 0
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z4 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r6.<java.util.Iterator: void remove()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z4 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r6.<java.util.Iterator: void remove()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= (branch)]
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
