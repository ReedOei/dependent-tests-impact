org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r4 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : specialinvoke $r4.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : specialinvoke $r4.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : r5 = $r4
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : r5 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r8 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r8 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List message()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : r6 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : r6 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r14 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResult
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r14 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResult >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r15 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r15 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterResult: org.apache.zeppelin.interpreter.InterpreterResult$Code code()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r16 = virtualinvoke $r15.<org.apache.zeppelin.interpreter.InterpreterResult$Code: java.lang.String name()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r16 = virtualinvoke $r15.<org.apache.zeppelin.interpreter.InterpreterResult$Code: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r17 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: com.google.gson.Gson gson>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r17 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: com.google.gson.Gson gson> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r18 = virtualinvoke $r17.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r18 = virtualinvoke $r17.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r19 = virtualinvoke r3.<org.apache.zeppelin.display.GUI: java.lang.String toJson()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r19 = virtualinvoke r3.<org.apache.zeppelin.display.GUI: java.lang.String toJson()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : specialinvoke $r14.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResult: void <init>(java.lang.String,java.util.List,java.lang.String,java.lang.String)>($r16, r5, $r18, $r19)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : specialinvoke $r14.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResult: void <init>(java.lang.String,java.util.List,java.lang.String,java.lang.String)>($r16, r5, $r18, $r19) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : return $r14
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : r7 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r9
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : r7 = (org.apache.zeppelin.interpreter.InterpreterResultMessage) $r9 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r10 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResultMessage
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r10 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResultMessage >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r11 = virtualinvoke r7.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r11 = virtualinvoke r7.<org.apache.zeppelin.interpreter.InterpreterResultMessage: org.apache.zeppelin.interpreter.InterpreterResult$Type getType()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r12 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterResult$Type: java.lang.String name()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r12 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterResult$Type: java.lang.String name()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r13 = virtualinvoke r7.<org.apache.zeppelin.interpreter.InterpreterResultMessage: java.lang.String getData()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $r13 = virtualinvoke r7.<org.apache.zeppelin.interpreter.InterpreterResultMessage: java.lang.String getData()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : specialinvoke $r10.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResultMessage: void <init>(java.lang.String,java.lang.String)>($r12, $r13)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : specialinvoke $r10.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResultMessage: void <init>(java.lang.String,java.lang.String)>($r12, $r13) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r10)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.convert : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
