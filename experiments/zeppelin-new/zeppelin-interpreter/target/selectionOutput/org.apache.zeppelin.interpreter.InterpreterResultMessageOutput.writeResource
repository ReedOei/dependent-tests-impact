org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.util.List resourceSearchPaths> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r14 = virtualinvoke $r13.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r14 = virtualinvoke $r13.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if r14 != null
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if r14 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r15 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if r14 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if r14 != null
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if r14 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r14 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if r14 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r16 = virtualinvoke r14.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r16 = virtualinvoke r14.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void write(java.net.URL)>($r16)
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void write(java.net.URL)>($r16) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : return
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r14 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r16 = virtualinvoke r14.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r15 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r14 = virtualinvoke $r15.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r14 = virtualinvoke $r15.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if r14 != null
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r3 = (java.lang.String) $r7
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r3 = (java.lang.String) $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r8 = new java.io.File
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r8 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r4 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r12)
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r5 = $r8
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : r5 = $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $z1 = virtualinvoke r5.<java.io.File: boolean isFile()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $z1 = virtualinvoke r5.<java.io.File: boolean isFile()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void write(java.io.File)>(r5)
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void write(java.io.File)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.writeResource : return
