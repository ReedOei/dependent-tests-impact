org.apache.zeppelin.resource.DistributedResourcePool.getAll : r1 = specialinvoke r0.<org.apache.zeppelin.resource.LocalResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>() >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePool.getAll : if z0 == 0
org.apache.zeppelin.resource.DistributedResourcePool.getAll : if z0 == 0 >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePool.getAll : $r2 = r0.<org.apache.zeppelin.resource.DistributedResourcePool: org.apache.zeppelin.resource.ResourcePoolConnector connector>
org.apache.zeppelin.resource.DistributedResourcePool.getAll : if z0 == 0 >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePool.getAll : return r1
org.apache.zeppelin.resource.DistributedResourcePool.getAll : $r2 = r0.<org.apache.zeppelin.resource.DistributedResourcePool: org.apache.zeppelin.resource.ResourcePoolConnector connector> >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePool.getAll : $r3 = interfaceinvoke $r2.<org.apache.zeppelin.resource.ResourcePoolConnector: org.apache.zeppelin.resource.ResourceSet getAllResources()>()
org.apache.zeppelin.resource.DistributedResourcePool.getAll : $r3 = interfaceinvoke $r2.<org.apache.zeppelin.resource.ResourcePoolConnector: org.apache.zeppelin.resource.ResourceSet getAllResources()>() >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePool.getAll : virtualinvoke r1.<org.apache.zeppelin.resource.ResourceSet: boolean addAll(java.util.Collection)>($r3)
org.apache.zeppelin.resource.DistributedResourcePool.getAll : virtualinvoke r1.<org.apache.zeppelin.resource.ResourceSet: boolean addAll(java.util.Collection)>($r3) >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePool.getAll : return r1
