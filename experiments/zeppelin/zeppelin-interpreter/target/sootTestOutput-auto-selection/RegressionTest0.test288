org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $z0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: boolean isAppendSupported()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: org.apache.zeppelin.interpreter.InterpreterResult$Type type>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: org.apache.zeppelin.interpreter.InterpreterResult$Type type> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $r1 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TEXT>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $r1 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TEXT> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : if $r2 != $r1
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : if $r2 != $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $z0 = 0
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $z0 = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : return $z0
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void flush(boolean)>($z0)
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void flush(boolean)>($z0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.util.List outList>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.util.List outList> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : r1 = $r4
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : r1 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : entermonitor $r4
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : entermonitor $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : virtualinvoke $r5.<java.io.ByteArrayOutputStream: void flush()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : virtualinvoke $r5.<java.io.ByteArrayOutputStream: void flush()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : r2 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : r2 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : if r2 == null
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : if r2 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $i0 = lengthof r2
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $i0 = lengthof r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : if $i0 <= 0
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : if $i0 <= 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : virtualinvoke $r12.<java.io.ByteArrayOutputStream: void reset()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : virtualinvoke $r12.<java.io.ByteArrayOutputStream: void reset()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : exitmonitor r1
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.toString : $r1 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.toString : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.toString : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%")
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.toString : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.toString : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: org.apache.zeppelin.interpreter.InterpreterResult$Type type>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.toString : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: org.apache.zeppelin.interpreter.InterpreterResult$Type type> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.toString : $r5 = virtualinvoke $r4.<org.apache.zeppelin.interpreter.InterpreterResult$Type: java.lang.String name()>()
