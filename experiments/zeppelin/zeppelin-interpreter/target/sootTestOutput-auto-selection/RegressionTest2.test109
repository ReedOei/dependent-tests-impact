org.apache.zeppelin.display.AngularObjectRegistry.remove : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r4 = $r8
org.apache.zeppelin.display.AngularObjectRegistry.remove : r4 = $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : entermonitor $r8
org.apache.zeppelin.display.AngularObjectRegistry.remove : entermonitor $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.display.AngularObjectRegistry.remove : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return $r7
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return $r7 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r6 = (org.apache.zeppelin.display.AngularObject) $r9
org.apache.zeppelin.display.AngularObjectRegistry.remove : r6 = (org.apache.zeppelin.display.AngularObject) $r9 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r10 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r10 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : if $r10 == null
org.apache.zeppelin.display.AngularObjectRegistry.remove : if $r10 == null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : exitmonitor r4
org.apache.zeppelin.display.AngularObjectRegistry.remove : exitmonitor r4 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : return r6
org.apache.zeppelin.display.AngularObjectRegistry.remove : return r6 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : $r4 = new org.apache.zeppelin.resource.ResourceId
org.apache.zeppelin.resource.LocalResourcePool.get : $r4 = new org.apache.zeppelin.resource.ResourceId >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : $r6 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId>
org.apache.zeppelin.resource.LocalResourcePool.get : $r6 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : specialinvoke $r4.<org.apache.zeppelin.resource.ResourceId: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r6, r1, r2, r3)
org.apache.zeppelin.resource.LocalResourcePool.get : specialinvoke $r4.<org.apache.zeppelin.resource.ResourceId: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r6, r1, r2, r3) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : r5 = $r4
org.apache.zeppelin.resource.LocalResourcePool.get : r5 = $r4 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : $r7 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources>
org.apache.zeppelin.resource.LocalResourcePool.get : $r7 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)
org.apache.zeppelin.resource.LocalResourcePool.get : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : $r9 = (org.apache.zeppelin.resource.Resource) $r8
org.apache.zeppelin.resource.LocalResourcePool.get : $r9 = (org.apache.zeppelin.resource.Resource) $r8 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : return $r9
org.apache.zeppelin.resource.LocalResourcePool.get : return $r9 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.put : $r5 = new org.apache.zeppelin.resource.ResourceId
org.apache.zeppelin.resource.LocalResourcePool.put : $r5 = new org.apache.zeppelin.resource.ResourceId >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.put : $r8 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId>
org.apache.zeppelin.resource.LocalResourcePool.put : $r8 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.put : specialinvoke $r5.<org.apache.zeppelin.resource.ResourceId: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r8, r1, r2, r3)
org.apache.zeppelin.resource.LocalResourcePool.put : specialinvoke $r5.<org.apache.zeppelin.resource.ResourceId: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r8, r1, r2, r3) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.put : r6 = $r5
org.apache.zeppelin.resource.LocalResourcePool.put : r6 = $r5 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.put : $r9 = new org.apache.zeppelin.resource.Resource
org.apache.zeppelin.resource.LocalResourcePool.put : $r9 = new org.apache.zeppelin.resource.Resource >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.put : specialinvoke $r9.<org.apache.zeppelin.resource.Resource: void <init>(org.apache.zeppelin.resource.LocalResourcePool,org.apache.zeppelin.resource.ResourceId,java.lang.Object)>(r0, r6, r4)
org.apache.zeppelin.resource.LocalResourcePool.put : specialinvoke $r9.<org.apache.zeppelin.resource.Resource: void <init>(org.apache.zeppelin.resource.LocalResourcePool,org.apache.zeppelin.resource.ResourceId,java.lang.Object)>(r0, r6, r4) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.put : r7 = $r9
org.apache.zeppelin.resource.LocalResourcePool.put : r7 = $r9 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.put : $r10 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources>
org.apache.zeppelin.resource.LocalResourcePool.put : $r10 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.put : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7)
org.apache.zeppelin.resource.LocalResourcePool.put : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7) >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : $r1 = new java.lang.StringBuilder
org.apache.zeppelin.resource.ResourceId.hashCode : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.resource.ResourceId.hashCode : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : $r2 = r0.<org.apache.zeppelin.resource.ResourceId: java.lang.String resourcePoolId>
org.apache.zeppelin.resource.ResourceId.hashCode : $r2 = r0.<org.apache.zeppelin.resource.ResourceId: java.lang.String resourcePoolId> >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)
org.apache.zeppelin.resource.ResourceId.hashCode : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : $r4 = r0.<org.apache.zeppelin.resource.ResourceId: java.lang.String noteId>
org.apache.zeppelin.resource.ResourceId.hashCode : $r4 = r0.<org.apache.zeppelin.resource.ResourceId: java.lang.String noteId> >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
org.apache.zeppelin.resource.ResourceId.hashCode : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : $r6 = r0.<org.apache.zeppelin.resource.ResourceId: java.lang.String paragraphId>
org.apache.zeppelin.resource.ResourceId.hashCode : $r6 = r0.<org.apache.zeppelin.resource.ResourceId: java.lang.String paragraphId> >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.zeppelin.resource.ResourceId.hashCode : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : $r8 = r0.<org.apache.zeppelin.resource.ResourceId: java.lang.String name>
org.apache.zeppelin.resource.ResourceId.hashCode : $r8 = r0.<org.apache.zeppelin.resource.ResourceId: java.lang.String name> >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.zeppelin.resource.ResourceId.hashCode : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.resource.ResourceId.hashCode : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : $i0 = virtualinvoke $r10.<java.lang.String: int hashCode()>()
org.apache.zeppelin.resource.ResourceId.hashCode : $i0 = virtualinvoke $r10.<java.lang.String: int hashCode()>() >>>>>>>> org.apache.zeppelin.resource.ResourceId.hashCode : return $i0
org.apache.zeppelin.resource.ResourceId.hashCode : return $i0 >>>>>>>> org.apache.zeppelin.dep.RepositoryListener.artifactInstalling : $r3 = r0.<org.apache.zeppelin.dep.RepositoryListener: org.slf4j.Logger logger>
org.apache.zeppelin.dep.RepositoryListener.artifactInstalling : $r3 = r0.<org.apache.zeppelin.dep.RepositoryListener: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.dep.RepositoryListener.artifactInstalling : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.dep.RepositoryListener.artifactInstalling : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.dep.RepositoryListener.artifactInstalling : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.dep.RepositoryListener.artifactInstalling : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.RepositoryListener.artifactInstalling : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Installing ")
org.apache.zeppelin.dep.RepositoryListener.artifactInstalling : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Installing ") >>>>>>>> org.apache.zeppelin.dep.RepositoryListener.artifactInstalling : $r5 = interfaceinvoke r1.<org.sonatype.aether.RepositoryEvent: org.sonatype.aether.artifact.Artifact getArtifact()>()
