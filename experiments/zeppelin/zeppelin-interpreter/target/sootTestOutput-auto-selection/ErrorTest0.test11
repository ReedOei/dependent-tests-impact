org.apache.zeppelin.display.AngularObjectRegistry.remove : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r4 = $r8
org.apache.zeppelin.display.AngularObjectRegistry.remove : r4 = $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : entermonitor $r8
org.apache.zeppelin.display.AngularObjectRegistry.remove : entermonitor $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.display.AngularObjectRegistry.remove : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return $r7
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return $r7 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r6 = (org.apache.zeppelin.display.AngularObject) $r9
org.apache.zeppelin.display.AngularObjectRegistry.remove : r6 = (org.apache.zeppelin.display.AngularObject) $r9 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r10 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r10 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : if $r10 == null
org.apache.zeppelin.display.AngularObjectRegistry.remove : if $r10 == null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : exitmonitor r4
org.apache.zeppelin.display.AngularObjectRegistry.remove : exitmonitor r4 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : return r6
org.apache.zeppelin.display.AngularObjectRegistry.remove : return r6 >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getArtifact : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String artifact>
org.apache.zeppelin.helium.HeliumPackage.getArtifact : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String artifact> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getArtifact : return $r1
org.apache.zeppelin.helium.HeliumPackage.getArtifact : return $r1 >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getPublishedDate : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String published>
org.apache.zeppelin.helium.HeliumPackage.getPublishedDate : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String published> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getPublishedDate : return $r1
org.apache.zeppelin.helium.HeliumPackage.getPublishedDate : return $r1 >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getResources : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String[][] resources>
org.apache.zeppelin.helium.HeliumPackage.getResources : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String[][] resources> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getResources : return $r1
org.apache.zeppelin.helium.HeliumPackage.getResources : return $r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if r1 == null
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if r1 == null >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i0 = lengthof r1
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i0 = lengthof r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i0 != 0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i0 != 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r5 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r5 = new org.apache.zeppelin.resource.ResourceSet >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : specialinvoke $r5.<org.apache.zeppelin.resource.ResourceSet: void <init>()>()
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : specialinvoke $r5.<org.apache.zeppelin.resource.ResourceSet: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : return $r5
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : return $r5 >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : $z0 = r1 instanceof org.apache.zeppelin.helium.HeliumPackage
org.apache.zeppelin.helium.HeliumPackage.equals : $z0 = r1 instanceof org.apache.zeppelin.helium.HeliumPackage >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : if $z0 != 0
org.apache.zeppelin.helium.HeliumPackage.equals : if $z0 != 0 >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : r2 = (org.apache.zeppelin.helium.HeliumPackage) r1
org.apache.zeppelin.helium.HeliumPackage.equals : r2 = (org.apache.zeppelin.helium.HeliumPackage) r1 >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : $r3 = r0.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType type>
org.apache.zeppelin.helium.HeliumPackage.equals : $r3 = r0.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType type> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : $r4 = r2.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType type>
org.apache.zeppelin.helium.HeliumPackage.equals : $r4 = r2.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType type> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : if $r3 != $r4
org.apache.zeppelin.helium.HeliumPackage.equals : if $r3 != $r4 >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : $r5 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String artifact>
org.apache.zeppelin.helium.HeliumPackage.equals : $r5 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String artifact> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : $r6 = r2.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String artifact>
org.apache.zeppelin.helium.HeliumPackage.equals : $r6 = r2.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String artifact> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6)
org.apache.zeppelin.helium.HeliumPackage.equals : $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : if $z1 == 0
org.apache.zeppelin.helium.HeliumPackage.equals : if $z1 == 0 >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : $r7 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String className>
org.apache.zeppelin.helium.HeliumPackage.equals : $r7 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String className> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : $r8 = r2.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String className>
org.apache.zeppelin.helium.HeliumPackage.equals : $r8 = r2.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String className> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8)
org.apache.zeppelin.helium.HeliumPackage.equals : $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8) >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : if $z2 == 0
org.apache.zeppelin.helium.HeliumPackage.equals : if $z2 == 0 >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : $z3 = 1
org.apache.zeppelin.helium.HeliumPackage.equals : $z3 = 1 >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : goto [?= return $z3]
org.apache.zeppelin.helium.HeliumPackage.equals : goto [?= return $z3] >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.equals : return $z3
org.apache.zeppelin.helium.HeliumPackage.equals : return $z3 >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r1 = new java.lang.StringBuilder
org.apache.zeppelin.helium.HeliumPackage.hashCode : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.helium.HeliumPackage.hashCode : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r2 = r0.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType type>
org.apache.zeppelin.helium.HeliumPackage.hashCode : $r2 = r0.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType type> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r3 = virtualinvoke $r2.<org.apache.zeppelin.helium.HeliumType: java.lang.String toString()>()
