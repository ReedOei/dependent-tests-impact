org.apache.zeppelin.display.AngularObjectRegistry.remove : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r4 = $r8
org.apache.zeppelin.display.AngularObjectRegistry.remove : r4 = $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : entermonitor $r8
org.apache.zeppelin.display.AngularObjectRegistry.remove : entermonitor $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.display.AngularObjectRegistry.remove : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return $r7
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return $r7 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r6 = (org.apache.zeppelin.display.AngularObject) $r9
org.apache.zeppelin.display.AngularObjectRegistry.remove : r6 = (org.apache.zeppelin.display.AngularObject) $r9 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r10 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r10 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : if $r10 == null
org.apache.zeppelin.display.AngularObjectRegistry.remove : if $r10 == null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : exitmonitor r4
org.apache.zeppelin.display.AngularObjectRegistry.remove : exitmonitor r4 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : return r6
org.apache.zeppelin.display.AngularObjectRegistry.remove : return r6 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if r1 == null
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if r1 == null >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i0 = lengthof r1
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i0 = lengthof r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i0 != 0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i0 != 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r6 = r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourcePool resourcePool>
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r6 = r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourcePool resourcePool> >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $z0 = $r6 instanceof org.apache.zeppelin.resource.DistributedResourcePool
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $z0 = $r6 instanceof org.apache.zeppelin.resource.DistributedResourcePool >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $z0 == 0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $z0 == 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r9 = r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourcePool resourcePool>
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r9 = r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourcePool resourcePool> >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r4 = interfaceinvoke $r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>()
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r4 = interfaceinvoke $r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>() >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.getAll : $r1 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.resource.LocalResourcePool.getAll : $r1 = new org.apache.zeppelin.resource.ResourceSet >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.getAll : $r2 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources>
org.apache.zeppelin.resource.LocalResourcePool.getAll : $r2 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.getAll : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.resource.LocalResourcePool.getAll : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.getAll : specialinvoke $r1.<org.apache.zeppelin.resource.ResourceSet: void <init>(java.util.Collection)>($r3)
org.apache.zeppelin.resource.LocalResourcePool.getAll : specialinvoke $r1.<org.apache.zeppelin.resource.ResourceSet: void <init>(java.util.Collection)>($r3) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.getAll : return $r1
org.apache.zeppelin.resource.LocalResourcePool.getAll : return $r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r10 = staticinvoke <org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourceSet findRequiredResourceSet(java.lang.String[][],java.lang.String,java.lang.String,org.apache.zeppelin.resource.ResourceSet)>(r1, r2, r3, r4)
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r10 = staticinvoke <org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourceSet findRequiredResourceSet(java.lang.String[][],java.lang.String,java.lang.String,org.apache.zeppelin.resource.ResourceSet)>(r1, r2, r3, r4) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r4 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r4 = new org.apache.zeppelin.resource.ResourceSet >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : specialinvoke $r4.<org.apache.zeppelin.resource.ResourceSet: void <init>()>()
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : specialinvoke $r4.<org.apache.zeppelin.resource.ResourceSet: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r5 = $r4
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r5 = $r4 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if r0 == null
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if r0 == null >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i4 = lengthof r0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i4 = lengthof r0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i4 != 0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i4 != 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r12 = virtualinvoke r3.<org.apache.zeppelin.resource.ResourceSet: org.apache.zeppelin.resource.ResourceSet filterByNoteId(java.lang.String)>(r1)
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r12 = virtualinvoke r3.<org.apache.zeppelin.resource.ResourceSet: org.apache.zeppelin.resource.ResourceSet filterByNoteId(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : $r2 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : $r2 = new org.apache.zeppelin.resource.ResourceSet >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceSet: void <init>()>()
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceSet: void <init>()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : r3 = $r2
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : r3 = $r2 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>()
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : if $z0 == 0
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : return r3
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : return r3 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r13 = virtualinvoke $r12.<org.apache.zeppelin.resource.ResourceSet: org.apache.zeppelin.resource.ResourceSet filterByParagraphId(java.lang.String)>(r2)
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r13 = virtualinvoke $r12.<org.apache.zeppelin.resource.ResourceSet: org.apache.zeppelin.resource.ResourceSet filterByParagraphId(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : $r2 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : $r2 = new org.apache.zeppelin.resource.ResourceSet >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceSet: void <init>()>()
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceSet: void <init>()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : r3 = $r2
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : r3 = $r2 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>()
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : if $z0 == 0
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : return r3
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : return r3 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r6 = r0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r6 = r0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i0 = lengthof r6
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i0 = lengthof r6 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i1 = 0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i1 = 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if i1 >= i0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if i1 >= i0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r7 = r6[i1]
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r7 = r6[i1] >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : virtualinvoke r5.<org.apache.zeppelin.resource.ResourceSet: void clear()>()
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : virtualinvoke r5.<org.apache.zeppelin.resource.ResourceSet: void clear()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r8 = r7
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r8 = r7 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i2 = lengthof r8
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i2 = lengthof r8 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i3 = 0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i3 = 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if i3 >= i2
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if i3 >= i2 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i5 = virtualinvoke r5.<org.apache.zeppelin.resource.ResourceSet: int size()>()
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i5 = virtualinvoke r5.<org.apache.zeppelin.resource.ResourceSet: int size()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i6 = lengthof r7
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i6 = lengthof r7 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i5 != $i6
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i5 != $i6 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : return r5
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : return r5 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : return $r10
