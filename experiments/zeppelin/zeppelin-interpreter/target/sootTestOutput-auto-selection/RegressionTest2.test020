org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null
org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InterpreterGroup_")
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InterpreterGroup_") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r4 = new java.util.Random
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r4 = new java.util.Random >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r4.<java.util.Random: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r4.<java.util.Random: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : return $r6
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> = $r5
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> = $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2
org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6
org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool resourcePool>
org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool resourcePool> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : return $r1
org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.setInterpreterHookRegistry : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.InterpreterHookRegistry hookRegistry> = r1
org.apache.zeppelin.interpreter.InterpreterGroup.setInterpreterHookRegistry : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.InterpreterHookRegistry hookRegistry> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r5 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close interpreter group ")
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close interpreter group ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for session: ")
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for session: ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r12 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r12 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r13 = (java.util.Collection) $r12
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r13 = (java.util.Collection) $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(r1, r2, r3, $r13)
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(r1, r2, r3, $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null
org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r1 = new org.apache.zeppelin.interpreter.InterpreterOption
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r1 = new org.apache.zeppelin.interpreter.InterpreterOption >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : specialinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterOption: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : specialinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterOption: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2 = $r1
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean remote>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean remote> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean remote> = $z0
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean remote> = $z0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host> = $r3
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host> = $r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $i0 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: int port>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $i0 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: int port> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: int port> = $i0
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: int port> = $i0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote> = $r4
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote> = $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser> = $r5
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser> = $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z1 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z1 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess> = $z1
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess> = $z1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z2 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean setPermission>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z2 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean setPermission> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean setPermission> = $z2
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean setPermission> = $z2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : if null != $r7
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : if null != $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r8 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r8 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : specialinvoke $r8.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : specialinvoke $r8.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : goto [?= r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users> = $r8]
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : goto [?= r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users> = $r8] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users> = $r8
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users> = $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : return r2
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : return r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r1 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r1 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close interpreter group ")
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close interpreter group ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r10 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : if $r10 == null
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : if $r10 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r13 = <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map allInterpreterGroups>
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r13 = <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map allInterpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r14 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r14)
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r16 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r16 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : specialinvoke $r16.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : specialinvoke $r16.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : r3 = $r16
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : r3 = $r16 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r17 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $r17 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : r4 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : r4 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Collection)>(r3)
org.apache.zeppelin.interpreter.InterpreterGroup.shutdown : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Collection)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(null, null, null, r1)
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(null, null, null, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = new org.apache.zeppelin.interpreter.InterpreterGroup$1
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = new org.apache.zeppelin.interpreter.InterpreterGroup$1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterGroup$1: void <init>(org.apache.zeppelin.interpreter.InterpreterGroup,java.util.Collection,java.util.Map,java.lang.String,java.lang.String)>(r0, r4, r1, r2, r3)
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterGroup$1: void <init>(org.apache.zeppelin.interpreter.InterpreterGroup,java.util.Collection,java.util.Map,java.lang.String,java.lang.String)>(r0, r4, r1, r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : r5 = $r7
org.apache.zeppelin.interpreter.InterpreterGroup.close : r5 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void start()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void start()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void join()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void join()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Collection val$intpToClose>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Collection val$intpToClose> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r10 = $r9.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r10 = $r9.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if $r10 == null
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if $r10 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r18 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Map val$interpreterGroupRef>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r18 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Map val$interpreterGroupRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if null == $r18
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if null == $r18 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterGroup.close : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry>
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : r4 = $r6
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : r4 = $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : entermonitor $r6
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : entermonitor $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : if r1 != null
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : if r1 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: void addRepl(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: void addRepl(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry>
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : r3 = $r6
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : r3 = $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : entermonitor $r6
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : entermonitor $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: void addNote(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: void addNote(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry>
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : r2 = $r5
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : r2 = $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : entermonitor $r5
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : entermonitor $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry>
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : if $r7 != null
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : if $r7 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry>
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : $r3 = new java.util.HashMap
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : $r3 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : specialinvoke $r3.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : specialinvoke $r3.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3)
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : exitmonitor r2
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addNote : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry>
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r9 = (java.util.Map) $r8
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r9 = (java.util.Map) $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : if $r10 != null
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : if $r10 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry>
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r13 = (java.util.Map) $r12
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r13 = (java.util.Map) $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r4 = new java.util.HashMap
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : $r4 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : specialinvoke $r4.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : specialinvoke $r4.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4)
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : exitmonitor r3
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : exitmonitor r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterHookRegistry.addRepl : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry>
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterHookRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r9 = (java.util.Map) $r8
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r9 = (java.util.Map) $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r11 = (java.util.Map) $r10
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r11 = (java.util.Map) $r10 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r13 = (java.lang.String) $r12
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : $r13 = (java.lang.String) $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : exitmonitor r4
org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : exitmonitor r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterHookRegistry.get : return $r13
