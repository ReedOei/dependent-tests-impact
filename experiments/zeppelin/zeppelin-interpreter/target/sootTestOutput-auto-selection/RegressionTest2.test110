org.apache.zeppelin.interpreter.remote.ClientFactory.wrap : $r2 = new org.apache.commons.pool2.impl.DefaultPooledObject >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.wrap : specialinvoke $r2.<org.apache.commons.pool2.impl.DefaultPooledObject: void <init>(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.remote.ClientFactory.wrap : specialinvoke $r2.<org.apache.commons.pool2.impl.DefaultPooledObject: void <init>(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.wrap : return $r2
org.apache.zeppelin.interpreter.remote.ClientFactory.wrap : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r4 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.util.Map clientSocketMap>
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r4 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.util.Map clientSocketMap> >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : r2 = $r4
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : r2 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : entermonitor $r4
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : entermonitor $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r5 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.util.Map clientSocketMap>
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r5 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.util.Map clientSocketMap> >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r6 = interfaceinvoke r1.<org.apache.commons.pool2.PooledObject: java.lang.Object getObject()>()
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r6 = interfaceinvoke r1.<org.apache.commons.pool2.PooledObject: java.lang.Object getObject()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r6)
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : if $z0 == 0
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : exitmonitor r2
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : goto [?= return]
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client create()>()
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client create()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r1 = new org.apache.thrift.transport.TSocket
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r1 = new org.apache.thrift.transport.TSocket >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r7 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.lang.String host>
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r7 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.lang.String host> >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $i0 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: int port>
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $i0 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: int port> >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r1.<org.apache.thrift.transport.TSocket: void <init>(java.lang.String,int)>($r7, $i0)
org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r1.<org.apache.thrift.transport.TSocket: void <init>(java.lang.String,int)>($r7, $i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : r2 = $r1
org.apache.zeppelin.interpreter.remote.ClientFactory.create : r2 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : virtualinvoke r2.<org.apache.thrift.transport.TSocket: void open()>()
org.apache.zeppelin.interpreter.remote.ClientFactory.create : virtualinvoke r2.<org.apache.thrift.transport.TSocket: void open()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : r3 = $r8
org.apache.zeppelin.interpreter.remote.ClientFactory.create : r3 = $r8 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r9 = new org.apache.zeppelin.interpreter.InterpreterException
org.apache.zeppelin.interpreter.remote.ClientFactory.create : $r9 = new org.apache.zeppelin.interpreter.InterpreterException >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>(r3)
org.apache.zeppelin.interpreter.remote.ClientFactory.create : specialinvoke $r9.<org.apache.zeppelin.interpreter.InterpreterException: void <init>(java.lang.Throwable)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.create : throw $r9
