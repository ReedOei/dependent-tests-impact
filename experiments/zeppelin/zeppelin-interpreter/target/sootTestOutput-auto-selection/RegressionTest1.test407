org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : if r13 != null
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : if r13 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : goto [?= $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: boolean stop>]
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : goto [?= $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: boolean stop>] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: boolean stop>
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: boolean stop> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : n0 = null
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : n0 = null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: java.nio.file.WatchService watcher>
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: java.nio.file.WatchService watcher> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : r13 = interfaceinvoke $r12.<java.nio.file.WatchService: java.nio.file.WatchKey poll(long,java.util.concurrent.TimeUnit)>(1L, $r1)
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : r13 = interfaceinvoke $r12.<java.nio.file.WatchService: java.nio.file.WatchKey poll(long,java.util.concurrent.TimeUnit)>(1L, $r1) >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor r1]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor r1] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor r1
org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor r1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 0
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : n0 = null
org.apache.zeppelin.scheduler.RemoteScheduler.run : n0 = null >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : r1 = $r6
org.apache.zeppelin.scheduler.RemoteScheduler.run : r1 = $r6 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r6
org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r6 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r7.<java.util.List: int size()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r7.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z1 != 1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z1 != 1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r9 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r9 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r9.<java.lang.Object: void wait(long)>(500L)
org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r9.<java.lang.Object: void wait(long)>(500L) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null
org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InterpreterGroup_")
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InterpreterGroup_") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r4 = new java.util.Random
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r4 = new java.util.Random >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r4.<java.util.Random: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r4.<java.util.Random: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : return $r6
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> = $r5
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> = $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2
org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6
org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getInterpreterHookRegistry : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.InterpreterHookRegistry hookRegistry>
org.apache.zeppelin.interpreter.InterpreterGroup.getInterpreterHookRegistry : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.InterpreterHookRegistry hookRegistry> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getInterpreterHookRegistry : return $r1
org.apache.zeppelin.interpreter.InterpreterGroup.getInterpreterHookRegistry : return $r1 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r4 = $r8
org.apache.zeppelin.display.AngularObjectRegistry.remove : r4 = $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : entermonitor $r8
org.apache.zeppelin.display.AngularObjectRegistry.remove : entermonitor $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.display.AngularObjectRegistry.remove : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return $r7
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return $r7 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r6 = (org.apache.zeppelin.display.AngularObject) $r9
org.apache.zeppelin.display.AngularObjectRegistry.remove : r6 = (org.apache.zeppelin.display.AngularObject) $r9 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r10 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r10 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : if $r10 == null
org.apache.zeppelin.display.AngularObjectRegistry.remove : if $r10 == null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : exitmonitor r4
org.apache.zeppelin.display.AngularObjectRegistry.remove : exitmonitor r4 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : return r6
org.apache.zeppelin.display.AngularObjectRegistry.remove : return r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getListener : $r1 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.getListener : $r1 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getListener : return $r1
org.apache.zeppelin.display.AngularObjectRegistry.getListener : return $r1 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : $r3 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources>
org.apache.zeppelin.resource.LocalResourcePool.remove : $r3 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : $r2 = new org.apache.zeppelin.resource.ResourceId
org.apache.zeppelin.resource.LocalResourcePool.remove : $r2 = new org.apache.zeppelin.resource.ResourceId >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : $r4 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId>
org.apache.zeppelin.resource.LocalResourcePool.remove : $r4 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceId: void <init>(java.lang.String,java.lang.String)>($r4, r1)
org.apache.zeppelin.resource.LocalResourcePool.remove : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceId: void <init>(java.lang.String,java.lang.String)>($r4, r1) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2)
org.apache.zeppelin.resource.LocalResourcePool.remove : $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : $r6 = (org.apache.zeppelin.resource.Resource) $r5
org.apache.zeppelin.resource.LocalResourcePool.remove : $r6 = (org.apache.zeppelin.resource.Resource) $r5 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : return $r6
org.apache.zeppelin.resource.LocalResourcePool.remove : return $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : $r5 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject add(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, 1)
org.apache.zeppelin.display.AngularObjectRegistry.add : $r5 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject add(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, 1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : r5 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject createNewAngularObject(java.lang.String,java.lang.Object,java.lang.String,java.lang.String)>(r1, r2, r3, r4)
org.apache.zeppelin.display.AngularObjectRegistry.add : r5 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject createNewAngularObject(java.lang.String,java.lang.Object,java.lang.String,java.lang.String)>(r1, r2, r3, r4) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r5 = new org.apache.zeppelin.interpreter.remote.RemoteAngularObject
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r5 = new org.apache.zeppelin.interpreter.remote.RemoteAngularObject >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup>
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.display.AngularObjectListener getAngularObjectListener()>()
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.display.AngularObjectListener getAngularObjectListener()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAngularObjectListener : $r1 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectListener angularObjectListener>
org.apache.zeppelin.display.AngularObjectRegistry.getAngularObjectListener : $r1 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectListener angularObjectListener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAngularObjectListener : return $r1
org.apache.zeppelin.display.AngularObjectRegistry.getAngularObjectListener : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : specialinvoke $r5.<org.apache.zeppelin.interpreter.remote.RemoteAngularObject: void <init>(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.InterpreterGroup,org.apache.zeppelin.display.AngularObjectListener)>(r1, r2, r3, r4, $r6, $r7)
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : specialinvoke $r5.<org.apache.zeppelin.interpreter.remote.RemoteAngularObject: void <init>(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.InterpreterGroup,org.apache.zeppelin.display.AngularObjectListener)>(r1, r2, r3, r4, $r6, $r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : return $r5
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : return $r5 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : $r9 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.add : $r9 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : r6 = $r9
org.apache.zeppelin.display.AngularObjectRegistry.add : r6 = $r9 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : entermonitor $r9
org.apache.zeppelin.display.AngularObjectRegistry.add : entermonitor $r9 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : r7 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r3, r4)
org.apache.zeppelin.display.AngularObjectRegistry.add : r7 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r3, r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5)
org.apache.zeppelin.display.AngularObjectRegistry.add : interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.add : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : if $r11 == null
org.apache.zeppelin.display.AngularObjectRegistry.add : if $r11 == null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : exitmonitor r6
org.apache.zeppelin.display.AngularObjectRegistry.add : exitmonitor r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : goto [?= return r5]
org.apache.zeppelin.display.AngularObjectRegistry.add : goto [?= return r5] >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : return r5
org.apache.zeppelin.display.AngularObjectRegistry.add : return r5 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : return $r5
org.apache.zeppelin.display.AngularObjectRegistry.add : return $r5 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r2 = new java.util.LinkedList
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r2 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : specialinvoke $r2.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : specialinvoke $r2.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : r3 = $r2
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : r3 = $r2 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r9 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r9 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : r4 = $r9
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : r4 = $r9 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : entermonitor $r9
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : entermonitor $r9 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(null, null)
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(null, null) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return "_GLOBAL_"
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return "_GLOBAL_" >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : if r5 == null
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : if r5 == null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r10 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r10 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>($r10)
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>($r10) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : r6 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : r6 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : if $z1 == 0
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : if $z1 == 0 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : r7 = (java.lang.String) $r13
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : r7 = (java.lang.String) $r13 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $z2 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : $z2 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : if $z2 == 0
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : if $z2 == 0 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : exitmonitor r4
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : exitmonitor r4 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : goto [?= return r3]
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : goto [?= return r3] >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : return r3
org.apache.zeppelin.display.AngularObjectRegistry.getAllWithGlobal : return r3 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.removeAndNotifyRemoteProcess : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.removeAndNotifyRemoteProcess : r4 = specialinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.getRemoteInterpreterProcess : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup>
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.getRemoteInterpreterProcess : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.getRemoteInterpreterProcess : $r2 = virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.getRemoteInterpreterProcess : $r2 = virtualinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getRemoteInterpreterProcess : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.InterpreterGroup.getRemoteInterpreterProcess : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getRemoteInterpreterProcess : return $r1
org.apache.zeppelin.interpreter.InterpreterGroup.getRemoteInterpreterProcess : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.getRemoteInterpreterProcess : return $r2
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.getRemoteInterpreterProcess : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.removeAndNotifyRemoteProcess : if r4 == null
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.removeAndNotifyRemoteProcess : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.removeAndNotifyRemoteProcess : $r8 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject remove(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3)
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.removeAndNotifyRemoteProcess : $r8 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject remove(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r4 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject remove(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, 1)
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r4 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject remove(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, 1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : return $r4
org.apache.zeppelin.display.AngularObjectRegistry.remove : return $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.removeAndNotifyRemoteProcess : return $r8
