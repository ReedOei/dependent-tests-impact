org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null
org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InterpreterGroup_")
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InterpreterGroup_") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r4 = new java.util.Random
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r4 = new java.util.Random >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r4.<java.util.Random: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r4.<java.util.Random: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : return $r6
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> = $r5
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> = $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2
org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6
org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getInterpreterHookRegistry : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.InterpreterHookRegistry hookRegistry>
org.apache.zeppelin.interpreter.InterpreterGroup.getInterpreterHookRegistry : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.InterpreterHookRegistry hookRegistry> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getInterpreterHookRegistry : return $r1
org.apache.zeppelin.interpreter.InterpreterGroup.getInterpreterHookRegistry : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.setRemoteInterpreterProcess : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> = r1
org.apache.zeppelin.interpreter.InterpreterGroup.setRemoteInterpreterProcess : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r2 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r2 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close interpreter group ")
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close interpreter group ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r6 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for session: ")
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for session: ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r10)
org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r11 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r11 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : r4 = (java.util.List) $r11
org.apache.zeppelin.interpreter.InterpreterGroup.close : r4 = (java.util.List) $r11 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Collection)>(r4)
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Collection)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(null, null, null, r1)
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(null, null, null, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null
org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : $r3 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources>
org.apache.zeppelin.resource.LocalResourcePool.remove : $r3 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : $r2 = new org.apache.zeppelin.resource.ResourceId
org.apache.zeppelin.resource.LocalResourcePool.remove : $r2 = new org.apache.zeppelin.resource.ResourceId >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : $r4 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId>
org.apache.zeppelin.resource.LocalResourcePool.remove : $r4 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceId: void <init>(java.lang.String,java.lang.String)>($r4, r1)
org.apache.zeppelin.resource.LocalResourcePool.remove : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceId: void <init>(java.lang.String,java.lang.String)>($r4, r1) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2)
org.apache.zeppelin.resource.LocalResourcePool.remove : $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : $r6 = (org.apache.zeppelin.resource.Resource) $r5
org.apache.zeppelin.resource.LocalResourcePool.remove : $r6 = (org.apache.zeppelin.resource.Resource) $r5 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.remove : return $r6
org.apache.zeppelin.resource.LocalResourcePool.remove : return $r6 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.id : $r1 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId>
org.apache.zeppelin.resource.LocalResourcePool.id : $r1 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.id : return $r1
org.apache.zeppelin.resource.LocalResourcePool.id : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.setResourcePool : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool resourcePool> = r1
org.apache.zeppelin.interpreter.InterpreterGroup.setResourcePool : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool resourcePool> = r1 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : $r2 = new org.apache.zeppelin.resource.ResourceId
org.apache.zeppelin.resource.LocalResourcePool.get : $r2 = new org.apache.zeppelin.resource.ResourceId >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : $r4 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId>
org.apache.zeppelin.resource.LocalResourcePool.get : $r4 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.lang.String resourcePoolId> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceId: void <init>(java.lang.String,java.lang.String)>($r4, r1)
org.apache.zeppelin.resource.LocalResourcePool.get : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceId: void <init>(java.lang.String,java.lang.String)>($r4, r1) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : r3 = $r2
org.apache.zeppelin.resource.LocalResourcePool.get : r3 = $r2 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : $r5 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources>
org.apache.zeppelin.resource.LocalResourcePool.get : $r5 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.zeppelin.resource.LocalResourcePool.get : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : $r7 = (org.apache.zeppelin.resource.Resource) $r6
org.apache.zeppelin.resource.LocalResourcePool.get : $r7 = (org.apache.zeppelin.resource.Resource) $r6 >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.get : return $r7
