org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown> = 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r1 = r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r1 = r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : entermonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : virtualinvoke r0.<java.lang.Object: void notify()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : virtualinvoke r0.<java.lang.Object: void notify()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : exitmonitor r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : goto [?= return]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null
org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InterpreterGroup_")
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InterpreterGroup_") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r4 = new java.util.Random
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r4 = new java.util.Random >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r4.<java.util.Random: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r4.<java.util.Random: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : return $r6
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> = $r5
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> = $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2
org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6
org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool resourcePool>
org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool resourcePool> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : return $r1
org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.setInterpreterGroup : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup> = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.setInterpreterGroup : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup> = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : n0 = null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : n0 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r14 = new org.apache.zeppelin.interpreter.remote.AppendOutputRunner
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r14 = new org.apache.zeppelin.interpreter.remote.AppendOutputRunner >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r15 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener listener>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r15 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener listener> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : specialinvoke $r14.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>($r15)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : specialinvoke $r14.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : r1 = $r14
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : r1 = $r14 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r16 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: java.util.concurrent.ScheduledExecutorService appendService>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r16 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: java.util.concurrent.ScheduledExecutorService appendService> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r2 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long BUFFER_TIME_MS>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r2 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long BUFFER_TIME_MS> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $l1 = virtualinvoke $r2.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $l1 = virtualinvoke $r2.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : r4 = interfaceinvoke $r16.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r1, 0L, $l1, $r3)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : r4 = interfaceinvoke $r16.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r1, 0L, $l1, $r3) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $z1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $z1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : if $z1 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : if r4 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : interfaceinvoke r4.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : interfaceinvoke r4.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.setInterpreterProcess : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.setInterpreterProcess : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: void releaseClient(org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client,boolean)>(r1, 0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: void releaseClient(org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client,boolean)>(r1, 0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : if z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : if z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : virtualinvoke $r3.<org.apache.commons.pool2.impl.GenericObjectPool: void returnObject(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : virtualinvoke $r3.<org.apache.commons.pool2.impl.GenericObjectPool: void returnObject(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : r2 = $r4
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : r2 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : $r5 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : $r5 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseClient : interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("exception occurred during releasing thrift client", r2)
