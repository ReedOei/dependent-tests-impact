org.apache.zeppelin.scheduler.FIFOScheduler.run : goto [?= exitmonitor r2] >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : exitmonitor r2
org.apache.zeppelin.scheduler.FIFOScheduler.run : exitmonitor r2 >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : goto [?= $z0 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: boolean terminate>]
org.apache.zeppelin.scheduler.FIFOScheduler.run : goto [?= $z0 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: boolean terminate>] >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : $z0 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: boolean terminate>
org.apache.zeppelin.scheduler.FIFOScheduler.run : $z0 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: boolean terminate> >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : if $z0 != 0
org.apache.zeppelin.scheduler.FIFOScheduler.run : if $z0 != 0 >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : $r7 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.FIFOScheduler.run : $r7 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : r2 = $r7
org.apache.zeppelin.scheduler.FIFOScheduler.run : r2 = $r7 >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : entermonitor $r7
org.apache.zeppelin.scheduler.FIFOScheduler.run : entermonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : $r8 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: org.apache.zeppelin.scheduler.Job runningJob>
org.apache.zeppelin.scheduler.FIFOScheduler.run : $r8 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: org.apache.zeppelin.scheduler.Job runningJob> >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : if $r8 != null
org.apache.zeppelin.scheduler.FIFOScheduler.run : if $r8 != null >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : $r9 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.FIFOScheduler.run : $r9 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : $z1 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.scheduler.FIFOScheduler.run : $z1 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : if $z1 != 1
org.apache.zeppelin.scheduler.FIFOScheduler.run : if $z1 != 1 >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : $r10 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.FIFOScheduler.run : $r10 = r0.<org.apache.zeppelin.scheduler.FIFOScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.FIFOScheduler.run : virtualinvoke $r10.<java.lang.Object: void wait(long)>(500L)
org.apache.zeppelin.scheduler.FIFOScheduler.run : virtualinvoke $r10.<java.lang.Object: void wait(long)>(500L) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null
org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InterpreterGroup_")
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InterpreterGroup_") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r4 = new java.util.Random
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r4 = new java.util.Random >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r4.<java.util.Random: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : specialinvoke $r4.<java.util.Random: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.generateId : return $r6
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> = $r5
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> = $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2
org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6
org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r4 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r5 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close interpreter group ")
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close interpreter group ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for session: ")
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for session: ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r11)
org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r11) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : goto [?= (branch)]
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : if r13 != null
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : if r13 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : goto [?= $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: boolean stop>]
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : goto [?= $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: boolean stop>] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: boolean stop>
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: boolean stop> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : n0 = null
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : n0 = null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: java.nio.file.WatchService watcher>
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: java.nio.file.WatchService watcher> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : r13 = interfaceinvoke $r12.<java.nio.file.WatchService: java.nio.file.WatchKey poll(long,java.util.concurrent.TimeUnit)>(1L, $r1)
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : r13 = interfaceinvoke $r12.<java.nio.file.WatchService: java.nio.file.WatchKey poll(long,java.util.concurrent.TimeUnit)>(1L, $r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r12 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r3)
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r12 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r13 = (java.util.Collection) $r12
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r13 = (java.util.Collection) $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(r1, r2, r3, $r13)
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(r1, r2, r3, $r13) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null
org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown> = 1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown> = 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r1 = r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : r1 = r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : entermonitor r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : virtualinvoke r0.<java.lang.Object: void notify()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : virtualinvoke r0.<java.lang.Object: void notify()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : exitmonitor r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : goto [?= return]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.shutdown : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool resourcePool>
org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool resourcePool> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : return $r1
org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.setInterpreterGroup : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup> = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.setInterpreterGroup : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup> = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : n0 = null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : n0 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r14 = new org.apache.zeppelin.interpreter.remote.AppendOutputRunner
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r14 = new org.apache.zeppelin.interpreter.remote.AppendOutputRunner >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r15 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener listener>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r15 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener listener> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : specialinvoke $r14.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>($r15)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : specialinvoke $r14.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>($r15) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : r1 = $r14
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : r1 = $r14 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r16 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: java.util.concurrent.ScheduledExecutorService appendService>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r16 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: java.util.concurrent.ScheduledExecutorService appendService> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r2 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long BUFFER_TIME_MS>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r2 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long BUFFER_TIME_MS> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $l1 = virtualinvoke $r2.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $l1 = virtualinvoke $r2.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : r4 = interfaceinvoke $r16.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r1, 0L, $l1, $r3)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : r4 = interfaceinvoke $r16.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r1, 0L, $l1, $r3) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $z1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : $z1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: boolean shutdown> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : if $z1 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : if r4 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : if r4 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : interfaceinvoke r4.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.run : interfaceinvoke r4.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.setInterpreterProcess : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller.setInterpreterProcess : r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventPoller: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess interpreterProcess> = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getConnectTimeout : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: int connectTimeout>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getConnectTimeout : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: int connectTimeout> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getConnectTimeout : return $i0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getConnectTimeout : return $i0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseBrokenClient : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseBrokenClient : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.apache.commons.pool2.impl.GenericObjectPool clientPool> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseBrokenClient : virtualinvoke $r3.<org.apache.commons.pool2.impl.GenericObjectPool: void invalidateObject(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseBrokenClient : virtualinvoke $r3.<org.apache.commons.pool2.impl.GenericObjectPool: void invalidateObject(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseBrokenClient : r2 = $r4
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseBrokenClient : r2 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseBrokenClient : $r5 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseBrokenClient : $r5 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseBrokenClient : interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("exception occurred during releasing thrift client", r2)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.releaseBrokenClient : interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("exception occurred during releasing thrift client", r2) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: boolean running>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess: boolean running> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : return $z0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess.isRunning : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.setRemoteInterpreterProcess : r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> = r1
