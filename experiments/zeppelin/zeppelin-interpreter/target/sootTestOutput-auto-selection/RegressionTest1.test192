org.apache.zeppelin.interpreter.remote.ClientFactory.wrap : $r2 = new org.apache.commons.pool2.impl.DefaultPooledObject >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.wrap : specialinvoke $r2.<org.apache.commons.pool2.impl.DefaultPooledObject: void <init>(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.remote.ClientFactory.wrap : specialinvoke $r2.<org.apache.commons.pool2.impl.DefaultPooledObject: void <init>(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.wrap : return $r2
org.apache.zeppelin.interpreter.remote.ClientFactory.wrap : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r4 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.util.Map clientSocketMap>
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r4 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.util.Map clientSocketMap> >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : r2 = $r4
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : r2 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : entermonitor $r4
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : entermonitor $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r5 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.util.Map clientSocketMap>
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r5 = r0.<org.apache.zeppelin.interpreter.remote.ClientFactory: java.util.Map clientSocketMap> >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r6 = interfaceinvoke r1.<org.apache.commons.pool2.PooledObject: java.lang.Object getObject()>()
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $r6 = interfaceinvoke r1.<org.apache.commons.pool2.PooledObject: java.lang.Object getObject()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r6)
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r6) >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : if $z0 == 0
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : exitmonitor r2
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : goto [?= return]
org.apache.zeppelin.interpreter.remote.ClientFactory.destroyObject : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.validateObject : $r2 = interfaceinvoke r1.<org.apache.commons.pool2.PooledObject: java.lang.Object getObject()>()
org.apache.zeppelin.interpreter.remote.ClientFactory.validateObject : $r2 = interfaceinvoke r1.<org.apache.commons.pool2.PooledObject: java.lang.Object getObject()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.validateObject : $r3 = (org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client) $r2
org.apache.zeppelin.interpreter.remote.ClientFactory.validateObject : $r3 = (org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client) $r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.ClientFactory.validateObject : $r4 = virtualinvoke $r3.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client: org.apache.thrift.protocol.TProtocol getOutputProtocol()>()
org.apache.zeppelin.interpreter.remote.ClientFactory.validateObject : $r4 = virtualinvoke $r3.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Client: org.apache.thrift.protocol.TProtocol getOutputProtocol()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor r1]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor r1] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor r1
org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor r1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 0
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : n0 = null
org.apache.zeppelin.scheduler.RemoteScheduler.run : n0 = null >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : r1 = $r6
org.apache.zeppelin.scheduler.RemoteScheduler.run : r1 = $r6 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r6
org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r6 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r7.<java.util.List: int size()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r7.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z1 != 1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z1 != 1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r9 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r9 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r9.<java.lang.Object: void wait(long)>(500L)
org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r9.<java.lang.Object: void wait(long)>(500L) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: boolean stop>
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: boolean stop> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : n0 = null
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : n0 = null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: java.nio.file.WatchService watcher>
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher: java.nio.file.WatchService watcher> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher.run : r13 = interfaceinvoke $r12.<java.nio.file.WatchService: java.nio.file.WatchKey poll(long,java.util.concurrent.TimeUnit)>(1L, $r1)
