org.apache.zeppelin.interpreter.RemoteZeppelinServerResource.getOwnerKey : $r1 = r0.<org.apache.zeppelin.interpreter.RemoteZeppelinServerResource: java.lang.String ownerKey> >>>>>>>> org.apache.zeppelin.interpreter.RemoteZeppelinServerResource.getOwnerKey : return $r1
org.apache.zeppelin.interpreter.RemoteZeppelinServerResource.getOwnerKey : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.RemoteZeppelinServerResource.setResourceType : r0.<org.apache.zeppelin.interpreter.RemoteZeppelinServerResource: org.apache.zeppelin.interpreter.RemoteZeppelinServerResource$Type resourceType> = r1
org.apache.zeppelin.interpreter.RemoteZeppelinServerResource.setResourceType : r0.<org.apache.zeppelin.interpreter.RemoteZeppelinServerResource: org.apache.zeppelin.interpreter.RemoteZeppelinServerResource$Type resourceType> = r1 >>>>>>>> org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry.get : $r2 = r0.<org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistry angularObjectRegistry>
org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry.get : $r2 = r0.<org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistry angularObjectRegistry> >>>>>>>> org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry.get : $r3 = r0.<org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry: java.lang.String noteId>
org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry.get : $r3 = r0.<org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry: java.lang.String noteId> >>>>>>>> org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry.get : $r4 = r0.<org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry: java.lang.String appId>
org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry.get : $r4 = r0.<org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry: java.lang.String appId> >>>>>>>> org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry.get : $r5 = virtualinvoke $r2.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject get(java.lang.String,java.lang.String,java.lang.String)>(r1, $r3, $r4)
org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry.get : $r5 = virtualinvoke $r2.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject get(java.lang.String,java.lang.String,java.lang.String)>(r1, $r3, $r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.get : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : r4 = $r7
org.apache.zeppelin.display.AngularObjectRegistry.get : r4 = $r7 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : entermonitor $r7
org.apache.zeppelin.display.AngularObjectRegistry.get : entermonitor $r7 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.display.AngularObjectRegistry.get : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return $r7
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return $r7 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.get : $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : $r9 = (org.apache.zeppelin.display.AngularObject) $r8
org.apache.zeppelin.display.AngularObjectRegistry.get : $r9 = (org.apache.zeppelin.display.AngularObject) $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : exitmonitor r4
org.apache.zeppelin.display.AngularObjectRegistry.get : exitmonitor r4 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : return $r9
org.apache.zeppelin.display.AngularObjectRegistry.get : return $r9 >>>>>>>> org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry.get : return $r5
org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry.get : return $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: int size> = 0
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: int size> = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean truncated> = 0
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean truncated> = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.io.ByteArrayOutputStream buffer>
org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>()
org.apache.zeppelin.interpreter.InterpreterOutput.clear : virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs>
org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r1 = $r7
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r1 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : entermonitor $r7
org.apache.zeppelin.interpreter.InterpreterOutput.clear : entermonitor $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs>
org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r2 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r2 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterOutput.clear : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterOutput.clear : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs>
org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : interfaceinvoke $r13.<java.util.List: void clear()>()
org.apache.zeppelin.interpreter.InterpreterOutput.clear : interfaceinvoke $r13.<java.util.List: void clear()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: org.apache.zeppelin.interpreter.InterpreterResultMessageOutput currentOut> = null
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: org.apache.zeppelin.interpreter.InterpreterResultMessageOutput currentOut> = null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean startOfTheNewLine> = 1
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean startOfTheNewLine> = 1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean firstCharIsPercentSign> = 0
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean firstCharIsPercentSign> = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterOutput: void updateAllResultMessages()>()
org.apache.zeppelin.interpreter.InterpreterOutput.clear : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterOutput: void updateAllResultMessages()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.updateAllResultMessages : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: org.apache.zeppelin.interpreter.InterpreterOutputListener flushListener>
org.apache.zeppelin.interpreter.InterpreterOutput.updateAllResultMessages : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: org.apache.zeppelin.interpreter.InterpreterOutputListener flushListener> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.updateAllResultMessages : if $r1 == null
org.apache.zeppelin.interpreter.InterpreterOutput.updateAllResultMessages : if $r1 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : exitmonitor r1
org.apache.zeppelin.interpreter.InterpreterOutput.clear : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterOutput.clear : goto [?= return] >>>>>>>> org.apache.zeppelin.helium.ApplicationContext.getAngularObjectRegistry : $r1 = r0.<org.apache.zeppelin.helium.ApplicationContext: org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry angularObjectRegistry>
org.apache.zeppelin.helium.ApplicationContext.getAngularObjectRegistry : $r1 = r0.<org.apache.zeppelin.helium.ApplicationContext: org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry angularObjectRegistry> >>>>>>>> org.apache.zeppelin.helium.ApplicationContext.getAngularObjectRegistry : return $r1
org.apache.zeppelin.helium.ApplicationContext.getAngularObjectRegistry : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.RemoteZeppelinServerResource.setData : r0.<org.apache.zeppelin.interpreter.RemoteZeppelinServerResource: java.lang.Object data> = r1
org.apache.zeppelin.interpreter.RemoteZeppelinServerResource.setData : r0.<org.apache.zeppelin.interpreter.RemoteZeppelinServerResource: java.lang.Object data> = r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r1 = new org.apache.zeppelin.interpreter.InterpreterOption
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r1 = new org.apache.zeppelin.interpreter.InterpreterOption >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : specialinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterOption: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : specialinvoke $r1.<org.apache.zeppelin.interpreter.InterpreterOption: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2 = $r1
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean remote>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean remote> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean remote> = $z0
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean remote> = $z0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host> = $r3
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host> = $r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $i0 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: int port>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $i0 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: int port> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: int port> = $i0
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: int port> = $i0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote> = $r4
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote> = $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser> = $r5
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser> = $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z1 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z1 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess> = $z1
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess> = $z1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z2 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean setPermission>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z2 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean setPermission> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean setPermission> = $z2
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: boolean setPermission> = $z2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : if null != $r7
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : if null != $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r8 = new java.util.ArrayList
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r8 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : specialinvoke $r8.<java.util.ArrayList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : specialinvoke $r8.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : goto [?= r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users> = $r8]
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : goto [?= r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users> = $r8] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users> = $r8
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : r2.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users> = $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : return r2
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : return r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perNoteShared : $r1 = "shared"
org.apache.zeppelin.interpreter.InterpreterOption.perNoteShared : $r1 = "shared" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perNoteShared : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote>
org.apache.zeppelin.interpreter.InterpreterOption.perNoteShared : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perNoteShared : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2)
org.apache.zeppelin.interpreter.InterpreterOption.perNoteShared : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perNoteShared : return $z0
org.apache.zeppelin.interpreter.InterpreterOption.perNoteShared : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.getHost : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host>
org.apache.zeppelin.interpreter.InterpreterOption.getHost : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.getHost : return $r1
org.apache.zeppelin.interpreter.InterpreterOption.getHost : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.isProcess : $z0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perUserIsolated()>()
org.apache.zeppelin.interpreter.InterpreterOption.isProcess : $z0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perUserIsolated()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perUserIsolated : $r1 = "isolated"
org.apache.zeppelin.interpreter.InterpreterOption.perUserIsolated : $r1 = "isolated" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perUserIsolated : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser>
org.apache.zeppelin.interpreter.InterpreterOption.perUserIsolated : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perUserIsolated : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2)
org.apache.zeppelin.interpreter.InterpreterOption.perUserIsolated : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perUserIsolated : return $z0
org.apache.zeppelin.interpreter.InterpreterOption.perUserIsolated : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.isProcess : if $z0 != 0
org.apache.zeppelin.interpreter.InterpreterOption.isProcess : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.isProcess : $z1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perNoteIsolated()>()
org.apache.zeppelin.interpreter.InterpreterOption.isProcess : $z1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean perNoteIsolated()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perNoteIsolated : $r1 = "isolated"
org.apache.zeppelin.interpreter.InterpreterOption.perNoteIsolated : $r1 = "isolated" >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perNoteIsolated : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote>
org.apache.zeppelin.interpreter.InterpreterOption.perNoteIsolated : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perNoteIsolated : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2)
org.apache.zeppelin.interpreter.InterpreterOption.perNoteIsolated : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.perNoteIsolated : return $z0
org.apache.zeppelin.interpreter.InterpreterOption.perNoteIsolated : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.isProcess : if $z1 == 0
org.apache.zeppelin.interpreter.InterpreterOption.isProcess : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.isProcess : $z2 = 0
org.apache.zeppelin.interpreter.InterpreterOption.isProcess : $z2 = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOption.isProcess : return $z2
