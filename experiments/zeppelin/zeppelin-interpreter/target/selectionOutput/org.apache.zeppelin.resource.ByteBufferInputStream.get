org.apache.zeppelin.resource.ByteBufferInputStream.get : $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>() >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : if $z0 == 0
org.apache.zeppelin.resource.ByteBufferInputStream.get : if $z0 == 0 >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : $r1 = new java.io.ByteArrayInputStream
org.apache.zeppelin.resource.ByteBufferInputStream.get : if $z0 == 0 >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : $r3 = new org.apache.zeppelin.resource.ByteBufferInputStream
org.apache.zeppelin.resource.ByteBufferInputStream.get : $r3 = new org.apache.zeppelin.resource.ByteBufferInputStream >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : specialinvoke $r3.<org.apache.zeppelin.resource.ByteBufferInputStream: void <init>(java.nio.ByteBuffer)>(r0)
org.apache.zeppelin.resource.ByteBufferInputStream.get : specialinvoke $r3.<org.apache.zeppelin.resource.ByteBufferInputStream: void <init>(java.nio.ByteBuffer)>(r0) >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : return $r3
org.apache.zeppelin.resource.ByteBufferInputStream.get : $r1 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : $r2 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>()
org.apache.zeppelin.resource.ByteBufferInputStream.get : $r2 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>() >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2)
org.apache.zeppelin.resource.ByteBufferInputStream.get : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2) >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : return $r1
