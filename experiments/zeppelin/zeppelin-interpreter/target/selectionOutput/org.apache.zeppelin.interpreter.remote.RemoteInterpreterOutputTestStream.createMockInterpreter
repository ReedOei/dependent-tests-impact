org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r1 = new org.apache.zeppelin.interpreter.remote.RemoteInterpreter >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r2 = new java.util.Properties
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r2 = new java.util.Properties >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : specialinvoke $r2.<java.util.Properties: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : specialinvoke $r2.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r3 = class "org/apache/zeppelin/interpreter/remote/mock/MockInterpreterOutputStream"
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r3 = class "org/apache/zeppelin/interpreter/remote/mock/MockInterpreterOutputStream" >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r4 = new java.io.File
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r4 = new java.io.File >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r5 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream: java.lang.String INTERPRETER_SCRIPT>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r5 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream: java.lang.String INTERPRETER_SCRIPT> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r8 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r8 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r9 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream: java.util.HashMap env>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r9 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream: java.util.HashMap env> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : specialinvoke $r1.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void <init>(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,int,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener,org.apache.zeppelin.helium.ApplicationEventListener,java.lang.String,java.lang.Boolean)>($r2, "note", $r7, $r8, "fake", "fakeRepo", $r9, 10000, r0, null, "anonymous", $r10)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : specialinvoke $r1.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void <init>(java.util.Properties,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,int,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener,org.apache.zeppelin.helium.ApplicationEventListener,java.lang.String,java.lang.Boolean)>($r2, "note", $r7, $r8, "fake", "fakeRepo", $r9, 10000, r0, null, "anonymous", $r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : r6 = $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : r6 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r11 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream: org.apache.zeppelin.interpreter.InterpreterGroup intpGroup>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r11 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream: org.apache.zeppelin.interpreter.InterpreterGroup intpGroup> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r12 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>("note")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r12 = virtualinvoke $r11.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>("note") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r13 = (java.util.List) $r12
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r13 = (java.util.List) $r12 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r6)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r6) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream: org.apache.zeppelin.interpreter.InterpreterGroup intpGroup>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream: org.apache.zeppelin.interpreter.InterpreterGroup intpGroup> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : virtualinvoke r6.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void setInterpreterGroup(org.apache.zeppelin.interpreter.InterpreterGroup)>($r14)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : virtualinvoke r6.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void setInterpreterGroup(org.apache.zeppelin.interpreter.InterpreterGroup)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterOutputTestStream.createMockInterpreter : return r6
