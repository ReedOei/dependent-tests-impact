org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r2 = r1
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r2 = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : entermonitor r1
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : entermonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r11 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Collection values()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : entermonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r9 = $r21 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : exitmonitor r2
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r9 = $r21 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : throw r9
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r11 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r11 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z1 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : exitmonitor r2
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= return null]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= return null] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : return null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r4 = (java.util.List) $r12
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r4 = (java.util.List) $r12 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : z0 = 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r4 = (java.util.List) $r12 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : z0 = 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r5 = null
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : z0 = 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r5 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r5 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z2 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if z0 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : exitmonitor r2
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : return r5
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r7 = (org.apache.zeppelin.interpreter.Interpreter) $r13
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r7 = (org.apache.zeppelin.interpreter.Interpreter) $r13 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r14 = virtualinvoke r7.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r7 = (org.apache.zeppelin.interpreter.Interpreter) $r13 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r14 = virtualinvoke r7.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r15 = class "org/apache/zeppelin/interpreter/remote/mock/MockInterpreterA"
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r14 = virtualinvoke r7.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r15 = class "org/apache/zeppelin/interpreter/remote/mock/MockInterpreterA" >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r15 = class "org/apache/zeppelin/interpreter/remote/mock/MockInterpreterA" >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r16)
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z3 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r8 = r7
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r18 = r7
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r18 = r7 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z5 = r18 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r18 = r7 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z5 = r18 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z5 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z5 = r18 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z5 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r19 = (org.apache.zeppelin.interpreter.WrappedInterpreter) r18
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z5 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if r0 != r18
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z5 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if r0 != r18 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : z0 = 1
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if r0 != r18 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if r0 != r18 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : z0 = 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : z0 = 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r19 = (org.apache.zeppelin.interpreter.WrappedInterpreter) r18 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r18 = interfaceinvoke $r19.<org.apache.zeppelin.interpreter.WrappedInterpreter: org.apache.zeppelin.interpreter.Interpreter getInnerInterpreter()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r19 = (org.apache.zeppelin.interpreter.WrappedInterpreter) r18 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r18 = interfaceinvoke $r19.<org.apache.zeppelin.interpreter.WrappedInterpreter: org.apache.zeppelin.interpreter.Interpreter getInnerInterpreter()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z5 = r18 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r18 = interfaceinvoke $r19.<org.apache.zeppelin.interpreter.WrappedInterpreter: org.apache.zeppelin.interpreter.Interpreter getInnerInterpreter()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z5 = r18 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z5 = r18 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z5 = r18 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r8 = r7 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z4 = r8 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r8 = r7 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z4 = r8 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z4 == 0
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z4 = r8 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r17 = (org.apache.zeppelin.interpreter.WrappedInterpreter) r8
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r5 = (org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA) r8
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r5 = (org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA) r8 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r18 = r7
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r5 = (org.apache.zeppelin.interpreter.remote.mock.MockInterpreterA) r8 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r17 = (org.apache.zeppelin.interpreter.WrappedInterpreter) r8 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r8 = interfaceinvoke $r17.<org.apache.zeppelin.interpreter.WrappedInterpreter: org.apache.zeppelin.interpreter.Interpreter getInnerInterpreter()>()
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r17 = (org.apache.zeppelin.interpreter.WrappedInterpreter) r8 >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r8 = interfaceinvoke $r17.<org.apache.zeppelin.interpreter.WrappedInterpreter: org.apache.zeppelin.interpreter.Interpreter getInnerInterpreter()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z4 = r8 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter]
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : r8 = interfaceinvoke $r17.<org.apache.zeppelin.interpreter.WrappedInterpreter: org.apache.zeppelin.interpreter.Interpreter getInnerInterpreter()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z4 = r8 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $z4 = r8 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter
org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : goto [?= $z4 = r8 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter] >>>>>>>> org.apache.zeppelin.interpreter.remote.mock.MockInterpreterB.getInterpreterA : $r21 := @caughtexception
