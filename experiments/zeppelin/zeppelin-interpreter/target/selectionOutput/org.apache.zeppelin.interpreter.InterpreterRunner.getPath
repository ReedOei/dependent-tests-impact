org.apache.zeppelin.interpreter.InterpreterRunner.getPath : $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterRunner.getPath : $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("Windows")
org.apache.zeppelin.interpreter.InterpreterRunner.getPath : $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("Windows") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterRunner.getPath : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterRunner.getPath : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterRunner.getPath : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterRunner: java.lang.String winPath>
org.apache.zeppelin.interpreter.InterpreterRunner.getPath : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterRunner.getPath : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterRunner: java.lang.String linuxPath>
org.apache.zeppelin.interpreter.InterpreterRunner.getPath : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterRunner: java.lang.String linuxPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterRunner.getPath : return $r2
org.apache.zeppelin.interpreter.InterpreterRunner.getPath : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterRunner: java.lang.String winPath> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterRunner.getPath : goto [?= return $r2]
org.apache.zeppelin.interpreter.InterpreterRunner.getPath : goto [?= return $r2] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterRunner.getPath : return $r2
