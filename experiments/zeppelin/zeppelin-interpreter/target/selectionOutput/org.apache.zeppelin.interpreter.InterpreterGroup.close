org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : return
org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = new org.apache.zeppelin.interpreter.InterpreterGroup$1
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = new org.apache.zeppelin.interpreter.InterpreterGroup$1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterGroup$1: void <init>(org.apache.zeppelin.interpreter.InterpreterGroup,java.util.Collection,java.util.Map,java.lang.String,java.lang.String)>(r0, r4, r1, r2, r3)
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterGroup$1: void <init>(org.apache.zeppelin.interpreter.InterpreterGroup,java.util.Collection,java.util.Map,java.lang.String,java.lang.String)>(r0, r4, r1, r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : r5 = $r7
org.apache.zeppelin.interpreter.InterpreterGroup.close : r5 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void start()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void start()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void join()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void start()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r8 := @caughtexception
org.apache.zeppelin.interpreter.InterpreterGroup.close : r6 = $r8 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r9 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r9 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Can\'t close interpreter: {}", $r10, r6)
org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r9.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Can\'t close interpreter: {}", $r10, r6) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : return
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void join()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void join()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r8 := @caughtexception
org.apache.zeppelin.interpreter.InterpreterGroup.close : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : return
