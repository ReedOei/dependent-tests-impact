org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r1 = new java.net.Socket >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r1 = new java.net.Socket >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r17 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r1 = new java.net.Socket >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r1.<java.net.Socket: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r1.<java.net.Socket: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r1.<java.net.Socket: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r17 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r1.<java.net.Socket: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : r2 = $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : r2 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : r2 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r17 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : r2 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void setSoTimeout(int)>(1000)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void setSoTimeout(int)>(1000) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void setSoTimeout(int)>(1000) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r17 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void setSoTimeout(int)>(1000) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r3 = new java.net.InetSocketAddress
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r3 = new java.net.InetSocketAddress >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r3 = new java.net.InetSocketAddress >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r17 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r3 = new java.net.InetSocketAddress >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r0, i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r0, i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r0, i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r17 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r0, i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r3, 1000)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r3, 1000) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r3, 1000) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r17 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r3, 1000) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void close()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r17 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $z0 = 1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $z0 = 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r4 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $z0 = 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r17 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $z0 = 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : return $z0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : r18 = $r17 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r19 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r19 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $z2 = interfaceinvoke $r19.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $z2 = interfaceinvoke $r19.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : if $z2 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r20 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : return 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r20 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r21 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r21 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote endpoint \'")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote endpoint \'") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not accessible (might be initializing): ")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not accessible (might be initializing): ") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r27 = virtualinvoke r18.<java.io.IOException: java.lang.String getMessage()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r27 = virtualinvoke r18.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String)>($r29)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String)>($r29) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : return 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : r5 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r6 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r6 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $z1 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $z1 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : if $z1 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r7 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : return 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r7 = <org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r8 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote endpoint \'")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote endpoint \'") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not accessible (might be initializing): ")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not accessible (might be initializing): ") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r14 = virtualinvoke r5.<java.net.ConnectException: java.lang.String getMessage()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r14 = virtualinvoke r5.<java.net.ConnectException: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r16)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r16) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : return 0
