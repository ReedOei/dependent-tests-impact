org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r8 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: java.util.Map runningApplications> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r24 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r24 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r25 = $r24
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r25 = $r24 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : entermonitor $r24
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : entermonitor $r24 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r26 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : entermonitor $r24 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r29 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r7 = $r29 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : exitmonitor r25
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r7 = $r29 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r29 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : exitmonitor r25 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : throw r7
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : exitmonitor r25 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r29 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r26 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r27 = virtualinvoke $r26.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r26 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r29 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r27 = virtualinvoke $r26.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r28 = (java.util.List) $r27
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r27 = virtualinvoke $r26.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r29 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r28 = (java.util.List) $r27 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : exitmonitor r25
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r28 = (java.util.List) $r27 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r29 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : exitmonitor r25 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= (branch)]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : exitmonitor r25 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r29 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if r28 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if r28 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r30 = interfaceinvoke r28.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if r28 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : return
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r30 = interfaceinvoke r28.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z3 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z3 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z3 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r31 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : return
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r31 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r32 = (org.apache.zeppelin.interpreter.Interpreter) $r31
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r32 = (org.apache.zeppelin.interpreter.Interpreter) $r31 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r33 = virtualinvoke r32.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r33 = virtualinvoke r32.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z4 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z4 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z4 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : virtualinvoke r32.<org.apache.zeppelin.interpreter.Interpreter: void close()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z4 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= $z3 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= $z3 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z3 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : virtualinvoke r32.<org.apache.zeppelin.interpreter.Interpreter: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : interfaceinvoke r30.<java.util.Iterator: void remove()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : interfaceinvoke r30.<java.util.Iterator: void remove()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= return]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : return
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r4 = (java.lang.String) $r10
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r4 = (java.lang.String) $r10 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r11 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: java.util.Map runningApplications>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r11 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: java.util.Map runningApplications> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r5 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication) $r12
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r5 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication) $r12 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r13 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: java.lang.String noteId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r13 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: java.lang.String noteId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z1 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("shared_session")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : r6 = $r21 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r22 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r22 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r23 = virtualinvoke r6.<org.apache.zeppelin.helium.ApplicationException: java.lang.String getMessage()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r23 = virtualinvoke r6.<org.apache.zeppelin.helium.ApplicationException: java.lang.String getMessage()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : interfaceinvoke $r22.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r23, r6)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : interfaceinvoke $r22.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r23, r6) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r15 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: org.apache.zeppelin.helium.HeliumPackage pkg>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r15 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: org.apache.zeppelin.helium.HeliumPackage pkg> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r16 = virtualinvoke $r15.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String getName()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r15 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: org.apache.zeppelin.helium.HeliumPackage pkg> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r16 = virtualinvoke $r15.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Unload App {} ", $r16)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r16 = virtualinvoke $r15.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Unload App {} ", $r16) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r17 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: org.apache.zeppelin.helium.Application app>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Unload App {} ", $r16) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r17 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: org.apache.zeppelin.helium.Application app> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : virtualinvoke $r17.<org.apache.zeppelin.helium.Application: void unload()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r17 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: org.apache.zeppelin.helium.Application app> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : virtualinvoke $r17.<org.apache.zeppelin.helium.Application: void unload()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r18 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient eventClient>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : virtualinvoke $r17.<org.apache.zeppelin.helium.Application: void unload()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r18 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient eventClient> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r19 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: java.lang.String noteId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r18 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient eventClient> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r19 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: java.lang.String noteId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r20 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: java.lang.String paragraphId>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r19 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: java.lang.String noteId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r20 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: java.lang.String paragraphId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : virtualinvoke $r18.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient: void onAppStatusUpdate(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r19, $r20, r4, "UNLOADED")
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r20 = r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$RunningApplication: java.lang.String paragraphId> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : virtualinvoke $r18.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient: void onAppStatusUpdate(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r19, $r20, r4, "UNLOADED") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= (branch)]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : virtualinvoke $r18.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient: void onAppStatusUpdate(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r19, $r20, r4, "UNLOADED") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("shared_session") >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z2 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r14 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.close : $r21 := @caughtexception
