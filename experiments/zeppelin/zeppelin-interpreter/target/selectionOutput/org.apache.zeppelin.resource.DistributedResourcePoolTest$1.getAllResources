org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r7 = r0.<org.apache.zeppelin.resource.DistributedResourcePoolTest$1: org.apache.zeppelin.resource.LocalResourcePool val$pool2> >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r1 = virtualinvoke $r7.<org.apache.zeppelin.resource.LocalResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>()
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r1 = virtualinvoke $r7.<org.apache.zeppelin.resource.LocalResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>() >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r8 = r0.<org.apache.zeppelin.resource.DistributedResourcePoolTest$1: org.apache.zeppelin.resource.LocalResourcePool val$pool3>
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r8 = r0.<org.apache.zeppelin.resource.DistributedResourcePoolTest$1: org.apache.zeppelin.resource.LocalResourcePool val$pool3> >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r9 = virtualinvoke $r8.<org.apache.zeppelin.resource.LocalResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>()
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r9 = virtualinvoke $r8.<org.apache.zeppelin.resource.LocalResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>() >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : virtualinvoke r1.<org.apache.zeppelin.resource.ResourceSet: boolean addAll(java.util.Collection)>($r9)
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : virtualinvoke r1.<org.apache.zeppelin.resource.ResourceSet: boolean addAll(java.util.Collection)>($r9) >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r10 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r10 = new org.apache.zeppelin.resource.ResourceSet >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : specialinvoke $r10.<org.apache.zeppelin.resource.ResourceSet: void <init>()>()
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : specialinvoke $r10.<org.apache.zeppelin.resource.ResourceSet: void <init>()>() >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r2 = $r10
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r2 = $r10 >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r11 = new com.google.gson.Gson
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r11 = new com.google.gson.Gson >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : specialinvoke $r11.<com.google.gson.Gson: void <init>()>()
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : specialinvoke $r11.<com.google.gson.Gson: void <init>()>() >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r3 = $r11
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r3 = $r11 >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r4 = virtualinvoke r1.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>()
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r4 = virtualinvoke r1.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : if $z1 == 0
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : if $z1 == 0 >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : if $z1 == 0 >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : return r2
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r5 = (org.apache.zeppelin.resource.Resource) $r12
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r5 = (org.apache.zeppelin.resource.Resource) $r12 >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r13 = virtualinvoke r3.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r5)
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r13 = virtualinvoke r3.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r5) >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r14 = virtualinvoke r3.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>($r13, class "org/apache/zeppelin/resource/RemoteResource")
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $r14 = virtualinvoke r3.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)>($r13, class "org/apache/zeppelin/resource/RemoteResource") >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r6 = (org.apache.zeppelin.resource.RemoteResource) $r14
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : r6 = (org.apache.zeppelin.resource.RemoteResource) $r14 >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : virtualinvoke r6.<org.apache.zeppelin.resource.RemoteResource: void setResourcePoolConnector(org.apache.zeppelin.resource.ResourcePoolConnector)>(r0)
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : virtualinvoke r6.<org.apache.zeppelin.resource.RemoteResource: void setResourcePoolConnector(org.apache.zeppelin.resource.ResourcePoolConnector)>(r0) >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : virtualinvoke r2.<org.apache.zeppelin.resource.ResourceSet: boolean add(java.lang.Object)>(r6)
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : virtualinvoke r2.<org.apache.zeppelin.resource.ResourceSet: boolean add(java.lang.Object)>(r6) >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.resource.DistributedResourcePoolTest$1.getAllResources : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
