org.apache.zeppelin.dep.DependencyResolverTest.tearDown : $r0 = <org.apache.zeppelin.dep.DependencyResolverTest: java.io.File tmpDir> >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.tearDown : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r0)
org.apache.zeppelin.dep.DependencyResolverTest.tearDown : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r0) >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r0 = new java.io.File
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r0 = new java.io.File >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r1 = new java.lang.StringBuilder
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.dep.DependencyResolverTest.setUp : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir")
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir") >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/ZeppelinLTest_")
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/ZeppelinLTest_") >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r6)
org.apache.zeppelin.dep.DependencyResolverTest.setUp : specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : <org.apache.zeppelin.dep.DependencyResolverTest: java.io.File tmpDir> = $r0
org.apache.zeppelin.dep.DependencyResolverTest.setUp : <org.apache.zeppelin.dep.DependencyResolverTest: java.io.File tmpDir> = $r0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r7 = new java.lang.StringBuilder
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.dep.DependencyResolverTest.setUp : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r8 = <org.apache.zeppelin.dep.DependencyResolverTest: java.io.File tmpDir>
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r8 = <org.apache.zeppelin.dep.DependencyResolverTest: java.io.File tmpDir> >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/test-repo")
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/test-repo") >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : <org.apache.zeppelin.dep.DependencyResolverTest: java.lang.String testPath> = $r12
org.apache.zeppelin.dep.DependencyResolverTest.setUp : <org.apache.zeppelin.dep.DependencyResolverTest: java.lang.String testPath> = $r12 >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r13 = new java.io.File
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r13 = new java.io.File >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r14 = <org.apache.zeppelin.dep.DependencyResolverTest: java.io.File tmpDir>
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r14 = <org.apache.zeppelin.dep.DependencyResolverTest: java.io.File tmpDir> >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, "test-copy-repo")
org.apache.zeppelin.dep.DependencyResolverTest.setUp : specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, "test-copy-repo") >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : <org.apache.zeppelin.dep.DependencyResolverTest: java.io.File testCopyPath> = $r13
org.apache.zeppelin.dep.DependencyResolverTest.setUp : <org.apache.zeppelin.dep.DependencyResolverTest: java.io.File testCopyPath> = $r13 >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r15 = new org.apache.zeppelin.dep.DependencyResolver
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r15 = new org.apache.zeppelin.dep.DependencyResolver >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r16 = <org.apache.zeppelin.dep.DependencyResolverTest: java.lang.String testPath>
org.apache.zeppelin.dep.DependencyResolverTest.setUp : $r16 = <org.apache.zeppelin.dep.DependencyResolverTest: java.lang.String testPath> >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : specialinvoke $r15.<org.apache.zeppelin.dep.DependencyResolver: void <init>(java.lang.String)>($r16)
org.apache.zeppelin.dep.DependencyResolverTest.setUp : specialinvoke $r15.<org.apache.zeppelin.dep.DependencyResolver: void <init>(java.lang.String)>($r16) >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystem : $r0 = staticinvoke <org.apache.zeppelin.dep.RepositorySystemFactory: org.sonatype.aether.RepositorySystem newRepositorySystem()>()
org.apache.zeppelin.dep.Booter.newRepositorySystem : $r0 = staticinvoke <org.apache.zeppelin.dep.RepositorySystemFactory: org.sonatype.aether.RepositorySystem newRepositorySystem()>() >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r0 = new org.apache.maven.repository.internal.DefaultServiceLocator
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r0 = new org.apache.maven.repository.internal.DefaultServiceLocator >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : specialinvoke $r0.<org.apache.maven.repository.internal.DefaultServiceLocator: void <init>()>()
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : specialinvoke $r0.<org.apache.maven.repository.internal.DefaultServiceLocator: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : r1 = $r0
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : r1 = $r0 >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator addService(java.lang.Class,java.lang.Class)>(class "org/sonatype/aether/spi/connector/RepositoryConnectorFactory", class "org/sonatype/aether/connector/file/FileRepositoryConnectorFactory")
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator addService(java.lang.Class,java.lang.Class)>(class "org/sonatype/aether/spi/connector/RepositoryConnectorFactory", class "org/sonatype/aether/connector/file/FileRepositoryConnectorFactory") >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator addService(java.lang.Class,java.lang.Class)>(class "org/sonatype/aether/spi/connector/RepositoryConnectorFactory", class "org/sonatype/aether/connector/wagon/WagonRepositoryConnectorFactory")
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator addService(java.lang.Class,java.lang.Class)>(class "org/sonatype/aether/spi/connector/RepositoryConnectorFactory", class "org/sonatype/aether/connector/wagon/WagonRepositoryConnectorFactory") >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r5 = newarray (org.sonatype.aether.connector.wagon.WagonProvider)[1]
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r5 = newarray (org.sonatype.aether.connector.wagon.WagonProvider)[1] >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r2 = new org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r2 = new org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : specialinvoke $r2.<org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider: void <init>()>()
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : specialinvoke $r2.<org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r5[0] = $r2
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r5[0] = $r2 >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator setServices(java.lang.Class,java.lang.Object[])>(class "org/sonatype/aether/connector/wagon/WagonProvider", $r5)
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator setServices(java.lang.Class,java.lang.Object[])>(class "org/sonatype/aether/connector/wagon/WagonProvider", $r5) >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r7 = virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: java.lang.Object getService(java.lang.Class)>(class "org/sonatype/aether/RepositorySystem")
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r7 = virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: java.lang.Object getService(java.lang.Class)>(class "org/sonatype/aether/RepositorySystem") >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r8 = (org.sonatype.aether.RepositorySystem) $r7
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r8 = (org.sonatype.aether.RepositorySystem) $r7 >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : return $r8
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : return $r8 >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystem : return $r0
org.apache.zeppelin.dep.Booter.newRepositorySystem : return $r0 >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "localRepoPath should have a value")
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "localRepoPath should have a value") >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r4 = new org.apache.maven.repository.internal.MavenRepositorySystemSession
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r4 = new org.apache.maven.repository.internal.MavenRepositorySystemSession >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : specialinvoke $r4.<org.apache.maven.repository.internal.MavenRepositorySystemSession: void <init>()>()
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : specialinvoke $r4.<org.apache.maven.repository.internal.MavenRepositorySystemSession: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : r2 = $r4
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : r2 = $r4 >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r5 = new org.sonatype.aether.repository.LocalRepository
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r5 = new org.sonatype.aether.repository.LocalRepository >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r6 = staticinvoke <org.apache.zeppelin.dep.Booter: java.lang.String resolveLocalRepoPath(java.lang.String)>(r1)
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r6 = staticinvoke <org.apache.zeppelin.dep.Booter: java.lang.String resolveLocalRepoPath(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_HOME")
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_HOME") >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : if r1 != null
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : if r1 != null >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zeppelin.home")
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zeppelin.home") >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = ".."
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = ".." >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r2 = newarray (java.lang.String)[0]
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r2 = newarray (java.lang.String)[0] >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r3 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r1, $r2)
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r3 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r1, $r2) >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r4 = interfaceinvoke $r3.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(r0)
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r4 = interfaceinvoke $r3.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(r0) >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r5 = interfaceinvoke $r4.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>()
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r5 = interfaceinvoke $r4.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>() >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r6 = interfaceinvoke $r5.<java.nio.file.Path: java.lang.String toString()>()
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r6 = interfaceinvoke $r5.<java.nio.file.Path: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : return $r6
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : return $r6 >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : specialinvoke $r5.<org.sonatype.aether.repository.LocalRepository: void <init>(java.lang.String)>($r6)
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : specialinvoke $r5.<org.sonatype.aether.repository.LocalRepository: void <init>(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : r3 = $r5
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : r3 = $r5 >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r7 = interfaceinvoke r0.<org.sonatype.aether.RepositorySystem: org.sonatype.aether.repository.LocalRepositoryManager newLocalRepositoryManager(org.sonatype.aether.repository.LocalRepository)>(r3)
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r7 = interfaceinvoke r0.<org.sonatype.aether.RepositorySystem: org.sonatype.aether.repository.LocalRepositoryManager newLocalRepositoryManager(org.sonatype.aether.repository.LocalRepository)>(r3) >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : virtualinvoke r2.<org.apache.maven.repository.internal.MavenRepositorySystemSession: org.sonatype.aether.util.DefaultRepositorySystemSession setLocalRepositoryManager(org.sonatype.aether.repository.LocalRepositoryManager)>($r7)
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : virtualinvoke r2.<org.apache.maven.repository.internal.MavenRepositorySystemSession: org.sonatype.aether.util.DefaultRepositorySystemSession setLocalRepositoryManager(org.sonatype.aether.repository.LocalRepositoryManager)>($r7) >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : return r2
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : return r2 >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_INTERPRETER_DEP_MVNREPO")
org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_INTERPRETER_DEP_MVNREPO") >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : if r0 != null
org.apache.zeppelin.dep.Booter.newCentralRepository : if r0 != null >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zeppelin.interpreter.dep.mvnRepo")
org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zeppelin.interpreter.dep.mvnRepo") >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = "http://repo1.maven.org/maven2/"
org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = "http://repo1.maven.org/maven2/" >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : $r1 = new org.sonatype.aether.repository.RemoteRepository
org.apache.zeppelin.dep.Booter.newCentralRepository : $r1 = new org.sonatype.aether.repository.RemoteRepository >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : specialinvoke $r1.<org.sonatype.aether.repository.RemoteRepository: void <init>(java.lang.String,java.lang.String,java.lang.String)>("central", "default", r0)
org.apache.zeppelin.dep.Booter.newCentralRepository : specialinvoke $r1.<org.sonatype.aether.repository.RemoteRepository: void <init>(java.lang.String,java.lang.String,java.lang.String)>("central", "default", r0) >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : return $r1
org.apache.zeppelin.dep.Booter.newCentralRepository : return $r1 >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r0 = new org.sonatype.aether.repository.RemoteRepository
org.apache.zeppelin.dep.Booter.newLocalRepository : $r0 = new org.sonatype.aether.repository.RemoteRepository >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r1 = new java.lang.StringBuilder
org.apache.zeppelin.dep.Booter.newLocalRepository : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.dep.Booter.newLocalRepository : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://")
org.apache.zeppelin.dep.Booter.newLocalRepository : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://") >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home")
org.apache.zeppelin.dep.Booter.newLocalRepository : $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home") >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.apache.zeppelin.dep.Booter.newLocalRepository : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.m2/repository")
org.apache.zeppelin.dep.Booter.newLocalRepository : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.m2/repository") >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.dep.Booter.newLocalRepository : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : specialinvoke $r0.<org.sonatype.aether.repository.RemoteRepository: void <init>(java.lang.String,java.lang.String,java.lang.String)>("local", "default", $r6)
org.apache.zeppelin.dep.Booter.newLocalRepository : specialinvoke $r0.<org.sonatype.aether.repository.RemoteRepository: void <init>(java.lang.String,java.lang.String,java.lang.String)>("local", "default", $r6) >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : return $r0
org.apache.zeppelin.dep.Booter.newLocalRepository : return $r0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolverTest.setUp : <org.apache.zeppelin.dep.DependencyResolverTest: org.apache.zeppelin.dep.DependencyResolver resolver> = $r15
org.apache.zeppelin.dep.DependencyResolverTest.setUp : <org.apache.zeppelin.dep.DependencyResolverTest: org.apache.zeppelin.dep.DependencyResolver resolver> = $r15 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r3 = new java.util.LinkedList
org.apache.zeppelin.dep.DependencyResolver.load : $r3 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r3.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r3.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r4 = virtualinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List load(java.lang.String,java.util.Collection,java.io.File)>(r1, $r3, r2)
org.apache.zeppelin.dep.DependencyResolver.load : $r4 = virtualinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List load(java.lang.String,java.util.Collection,java.io.File)>(r1, $r3, r2) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r4 = new java.util.LinkedList
org.apache.zeppelin.dep.DependencyResolver.load : $r4 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r4.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r4.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : r5 = $r4
org.apache.zeppelin.dep.DependencyResolver.load : r5 = $r4 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1)
org.apache.zeppelin.dep.DependencyResolver.load : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : if $z0 == 0
org.apache.zeppelin.dep.DependencyResolver.load : if $z0 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : r5 = virtualinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List load(java.lang.String,java.util.Collection)>(r1, r2)
org.apache.zeppelin.dep.DependencyResolver.load : r5 = virtualinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List load(java.lang.String,java.util.Collection)>(r1, r2) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r1)
org.apache.zeppelin.dep.DependencyResolver.load : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r5 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")
org.apache.zeppelin.dep.DependencyResolver.load : $r5 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : i0 = lengthof $r5
org.apache.zeppelin.dep.DependencyResolver.load : i0 = lengthof $r5 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : if i0 < 3
org.apache.zeppelin.dep.DependencyResolver.load : if i0 < 3 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : if i0 > 6
org.apache.zeppelin.dep.DependencyResolver.load : if i0 > 6 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r6 = specialinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List loadFromMvn(java.lang.String,java.util.Collection)>(r1, r2)
org.apache.zeppelin.dep.DependencyResolver.load : $r6 = specialinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List loadFromMvn(java.lang.String,java.util.Collection)>(r1, r2) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r3 = new java.util.LinkedList
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r3 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r3.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r3.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r4 = $r3
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r4 = $r3 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r4.<java.util.Collection: boolean addAll(java.util.Collection)>(r2)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r4.<java.util.Collection: boolean addAll(java.util.Collection)>(r2) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r11 = r0.<org.apache.zeppelin.dep.DependencyResolver: java.lang.String[] exclusions>
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r11 = r0.<org.apache.zeppelin.dep.DependencyResolver: java.lang.String[] exclusions> >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r4.<java.util.Collection: boolean addAll(java.util.Collection)>($r12)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r4.<java.util.Collection: boolean addAll(java.util.Collection)>($r12) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r5 = virtualinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List getArtifactsWithDep(java.lang.String,java.util.Collection)>(r1, r4)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r5 = virtualinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List getArtifactsWithDep(java.lang.String,java.util.Collection)>(r1, r4) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r3 = new org.sonatype.aether.util.artifact.DefaultArtifact
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r3 = new org.sonatype.aether.util.artifact.DefaultArtifact >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : specialinvoke $r3.<org.sonatype.aether.util.artifact.DefaultArtifact: void <init>(java.lang.String)>(r1)
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : specialinvoke $r3.<org.sonatype.aether.util.artifact.DefaultArtifact: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r4 = $r3
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r4 = $r3 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r12 = newarray (java.lang.String)[1]
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r12 = newarray (java.lang.String)[1] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r12[0] = "compile"
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r12[0] = "compile" >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r5 = staticinvoke <org.sonatype.aether.util.filter.DependencyFilterUtils: org.sonatype.aether.graph.DependencyFilter classpathFilter(java.lang.String[])>($r12)
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r5 = staticinvoke <org.sonatype.aether.util.filter.DependencyFilterUtils: org.sonatype.aether.graph.DependencyFilter classpathFilter(java.lang.String[])>($r12) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r13 = new org.sonatype.aether.util.filter.PatternExclusionsDependencyFilter
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r13 = new org.sonatype.aether.util.filter.PatternExclusionsDependencyFilter >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : specialinvoke $r13.<org.sonatype.aether.util.filter.PatternExclusionsDependencyFilter: void <init>(java.util.Collection)>(r2)
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : specialinvoke $r13.<org.sonatype.aether.util.filter.PatternExclusionsDependencyFilter: void <init>(java.util.Collection)>(r2) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r6 = $r13
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r6 = $r13 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r14 = new org.sonatype.aether.collection.CollectRequest
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r14 = new org.sonatype.aether.collection.CollectRequest >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : specialinvoke $r14.<org.sonatype.aether.collection.CollectRequest: void <init>()>()
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : specialinvoke $r14.<org.sonatype.aether.collection.CollectRequest: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r7 = $r14
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r7 = $r14 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r15 = new org.sonatype.aether.graph.Dependency
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r15 = new org.sonatype.aether.graph.Dependency >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : specialinvoke $r15.<org.sonatype.aether.graph.Dependency: void <init>(org.sonatype.aether.artifact.Artifact,java.lang.String)>(r4, "compile")
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : specialinvoke $r15.<org.sonatype.aether.graph.Dependency: void <init>(org.sonatype.aether.artifact.Artifact,java.lang.String)>(r4, "compile") >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : virtualinvoke r7.<org.sonatype.aether.collection.CollectRequest: org.sonatype.aether.collection.CollectRequest setRoot(org.sonatype.aether.graph.Dependency)>($r15)
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : virtualinvoke r7.<org.sonatype.aether.collection.CollectRequest: org.sonatype.aether.collection.CollectRequest setRoot(org.sonatype.aether.graph.Dependency)>($r15) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r17 = r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List repos>
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r17 = r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List repos> >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r8 = $r17
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r8 = $r17 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : entermonitor $r17
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : entermonitor $r17 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r18 = r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List repos>
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r18 = r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List repos> >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r9 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r9 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : if $z0 == 0
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : if $z0 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r19 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r19 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r10 = (org.sonatype.aether.repository.RemoteRepository) $r19
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r10 = (org.sonatype.aether.repository.RemoteRepository) $r19 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : virtualinvoke r7.<org.sonatype.aether.collection.CollectRequest: org.sonatype.aether.collection.CollectRequest addRepository(org.sonatype.aether.repository.RemoteRepository)>(r10)
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : virtualinvoke r7.<org.sonatype.aether.collection.CollectRequest: org.sonatype.aether.collection.CollectRequest addRepository(org.sonatype.aether.repository.RemoteRepository)>(r10) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : goto [?= $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : goto [?= $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : exitmonitor r8
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : exitmonitor r8 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : goto [?= $r22 = new org.sonatype.aether.resolution.DependencyRequest]
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : goto [?= $r22 = new org.sonatype.aether.resolution.DependencyRequest] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r22 = new org.sonatype.aether.resolution.DependencyRequest
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r22 = new org.sonatype.aether.resolution.DependencyRequest >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r23 = newarray (org.sonatype.aether.graph.DependencyFilter)[2]
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r23 = newarray (org.sonatype.aether.graph.DependencyFilter)[2] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r23[0] = r6
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r23[0] = r6 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r23[1] = r5
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r23[1] = r5 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r24 = staticinvoke <org.sonatype.aether.util.filter.DependencyFilterUtils: org.sonatype.aether.graph.DependencyFilter andFilter(org.sonatype.aether.graph.DependencyFilter[])>($r23)
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r24 = staticinvoke <org.sonatype.aether.util.filter.DependencyFilterUtils: org.sonatype.aether.graph.DependencyFilter andFilter(org.sonatype.aether.graph.DependencyFilter[])>($r23) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : specialinvoke $r22.<org.sonatype.aether.resolution.DependencyRequest: void <init>(org.sonatype.aether.collection.CollectRequest,org.sonatype.aether.graph.DependencyFilter)>(r7, $r24)
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : specialinvoke $r22.<org.sonatype.aether.resolution.DependencyRequest: void <init>(org.sonatype.aether.collection.CollectRequest,org.sonatype.aether.graph.DependencyFilter)>(r7, $r24) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r25 = $r22
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : r25 = $r22 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r26 = r0.<org.apache.zeppelin.dep.DependencyResolver: org.sonatype.aether.RepositorySystem system>
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r26 = r0.<org.apache.zeppelin.dep.DependencyResolver: org.sonatype.aether.RepositorySystem system> >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r27 = r0.<org.apache.zeppelin.dep.DependencyResolver: org.sonatype.aether.RepositorySystemSession session>
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r27 = r0.<org.apache.zeppelin.dep.DependencyResolver: org.sonatype.aether.RepositorySystemSession session> >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r28 = interfaceinvoke $r26.<org.sonatype.aether.RepositorySystem: org.sonatype.aether.resolution.DependencyResult resolveDependencies(org.sonatype.aether.RepositorySystemSession,org.sonatype.aether.resolution.DependencyRequest)>($r27, r25)
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r28 = interfaceinvoke $r26.<org.sonatype.aether.RepositorySystem: org.sonatype.aether.resolution.DependencyResult resolveDependencies(org.sonatype.aether.RepositorySystemSession,org.sonatype.aether.resolution.DependencyRequest)>($r27, r25) >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $r2 = "http"
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $r2 = "http" >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : if $z0 == 0
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : if $z0 == 0 >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $r3 = new org.apache.maven.wagon.providers.http.LightweightHttpWagon
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $r3 = new org.apache.maven.wagon.providers.http.LightweightHttpWagon >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : specialinvoke $r3.<org.apache.maven.wagon.providers.http.LightweightHttpWagon: void <init>()>()
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : specialinvoke $r3.<org.apache.maven.wagon.providers.http.LightweightHttpWagon: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : return $r3
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : return $r3 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r29 = virtualinvoke $r28.<org.sonatype.aether.resolution.DependencyResult: java.util.List getArtifactResults()>()
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : $r29 = virtualinvoke $r28.<org.sonatype.aether.resolution.DependencyResult: java.util.List getArtifactResults()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : return $r29
org.apache.zeppelin.dep.DependencyResolver.getArtifactsWithDep : return $r29 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z2 == 0
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z2 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r14 = (org.sonatype.aether.resolution.ArtifactResult) $r13
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r14 = (org.sonatype.aether.resolution.ArtifactResult) $r13 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r7 = virtualinvoke $r14.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r7 = virtualinvoke $r14.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r15 = new java.lang.StringBuilder
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r16 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getGroupId()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r16 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getGroupId()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r19 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getArtifactId()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r19 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getArtifactId()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r22 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getVersion()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r22 = interfaceinvoke r7.<org.sonatype.aether.artifact.Artifact: java.lang.String getVersion()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r8 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r8 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r9 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r9 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z3 == 0
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z3 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r24 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r24 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r10 = (java.lang.String) $r24
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r10 = (java.lang.String) $r24 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z4 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>(r10)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z4 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>(r10) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z4 == 0
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z4 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r25 = new java.util.LinkedList
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r25 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r25.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : specialinvoke $r25.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r26 = $r25
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r26 = $r25 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r27 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r27 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z5 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $z5 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z5 == 0
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : if $z5 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r28 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r28 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r29 = (org.sonatype.aether.resolution.ArtifactResult) $r28
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : r29 = (org.sonatype.aether.resolution.ArtifactResult) $r28 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r30 = virtualinvoke r29.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r30 = virtualinvoke r29.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r31 = interfaceinvoke $r30.<org.sonatype.aether.artifact.Artifact: java.io.File getFile()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r31 = interfaceinvoke $r30.<org.sonatype.aether.artifact.Artifact: java.io.File getFile()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>($r31)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>($r31) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r32 = r0.<org.apache.zeppelin.dep.DependencyResolver: org.slf4j.Logger logger>
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r32 = r0.<org.apache.zeppelin.dep.DependencyResolver: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r33 = virtualinvoke r29.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r33 = virtualinvoke r29.<org.sonatype.aether.resolution.ArtifactResult: org.sonatype.aether.artifact.Artifact getArtifact()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r34 = interfaceinvoke $r33.<org.sonatype.aether.artifact.Artifact: java.io.File getFile()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r34 = interfaceinvoke $r33.<org.sonatype.aether.artifact.Artifact: java.io.File getFile()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r35 = virtualinvoke $r34.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : $r35 = virtualinvoke $r34.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke $r32.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("load {}", $r35)
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : interfaceinvoke $r32.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("load {}", $r35) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : $r2 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender: java.util.List log>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : $r2 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender: java.util.List log> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z5 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : goto [?= $z5 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : return r26
org.apache.zeppelin.dep.DependencyResolver.loadFromMvn : return r26 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : return $r6
org.apache.zeppelin.dep.DependencyResolver.load : return $r6 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.dep.DependencyResolver.load : r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.DependencyResolver.load : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : if $z1 == 0
org.apache.zeppelin.dep.DependencyResolver.load : if $z1 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.dep.DependencyResolver.load : $r9 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : r7 = (java.io.File) $r9
org.apache.zeppelin.dep.DependencyResolver.load : r7 = (java.io.File) $r9 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r10 = new java.io.File
org.apache.zeppelin.dep.DependencyResolver.load : $r10 = new java.io.File >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r11 = virtualinvoke r7.<java.io.File: java.lang.String getName()>()
org.apache.zeppelin.dep.DependencyResolver.load : $r11 = virtualinvoke r7.<java.io.File: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, $r11)
org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, $r11) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : r8 = $r10
org.apache.zeppelin.dep.DependencyResolver.load : r8 = $r10 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $z2 = virtualinvoke r8.<java.io.File: boolean exists()>()
org.apache.zeppelin.dep.DependencyResolver.load : $z2 = virtualinvoke r8.<java.io.File: boolean exists()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : if $z2 == 0
org.apache.zeppelin.dep.DependencyResolver.load : if $z2 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r7, r8)
org.apache.zeppelin.dep.DependencyResolver.load : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>(r7, r8) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r12 = r0.<org.apache.zeppelin.dep.DependencyResolver: org.slf4j.Logger logger>
org.apache.zeppelin.dep.DependencyResolver.load : $r12 = r0.<org.apache.zeppelin.dep.DependencyResolver: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r13 = virtualinvoke r7.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.zeppelin.dep.DependencyResolver.load : $r13 = virtualinvoke r7.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("copy {} to {}", $r13, r3)
org.apache.zeppelin.dep.DependencyResolver.load : interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("copy {} to {}", $r13, r3) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.dep.DependencyResolver.load : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : return r5
org.apache.zeppelin.dep.DependencyResolver.load : return r5 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : return $r4
org.apache.zeppelin.dep.DependencyResolver.load : return $r4 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : $r6 = r0.<org.apache.zeppelin.dep.AbstractDependencyResolver: java.util.List repos>
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : $r6 = r0.<org.apache.zeppelin.dep.AbstractDependencyResolver: java.util.List repos> >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : r3 = $r6
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : r3 = $r6 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : entermonitor $r6
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : entermonitor $r6 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : virtualinvoke r0.<org.apache.zeppelin.dep.AbstractDependencyResolver: org.sonatype.aether.repository.RemoteRepository delRepo(java.lang.String)>(r1)
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : virtualinvoke r0.<org.apache.zeppelin.dep.AbstractDependencyResolver: org.sonatype.aether.repository.RemoteRepository delRepo(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $r6 = r0.<org.apache.zeppelin.dep.AbstractDependencyResolver: java.util.List repos>
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $r6 = r0.<org.apache.zeppelin.dep.AbstractDependencyResolver: java.util.List repos> >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : r2 = $r6
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : r2 = $r6 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : entermonitor $r6
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : entermonitor $r6 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $r7 = r0.<org.apache.zeppelin.dep.AbstractDependencyResolver: java.util.List repos>
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $r7 = r0.<org.apache.zeppelin.dep.AbstractDependencyResolver: java.util.List repos> >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : if $z0 == 0
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : if $z0 == 0 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : r4 = (org.sonatype.aether.repository.RemoteRepository) $r8
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : r4 = (org.sonatype.aether.repository.RemoteRepository) $r8 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $r9 = virtualinvoke r4.<org.sonatype.aether.repository.RemoteRepository: java.lang.String getId()>()
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $r9 = virtualinvoke r4.<org.sonatype.aether.repository.RemoteRepository: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : if $z1 == 0
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : if $z1 == 0 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : exitmonitor r2
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : exitmonitor r2 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : goto [?= return null]
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : goto [?= return null] >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : return null
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : return null >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : $r8 = new org.sonatype.aether.repository.RemoteRepository
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : $r8 = new org.sonatype.aether.repository.RemoteRepository >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : specialinvoke $r8.<org.sonatype.aether.repository.RemoteRepository: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, "default", r2)
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : specialinvoke $r8.<org.sonatype.aether.repository.RemoteRepository: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, "default", r2) >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : r4 = $r8
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : r4 = $r8 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : $r9 = new org.sonatype.aether.repository.RepositoryPolicy
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : $r9 = new org.sonatype.aether.repository.RepositoryPolicy >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : specialinvoke $r9.<org.sonatype.aether.repository.RepositoryPolicy: void <init>(boolean,java.lang.String,java.lang.String)>(1, "daily", "warn")
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : specialinvoke $r9.<org.sonatype.aether.repository.RepositoryPolicy: void <init>(boolean,java.lang.String,java.lang.String)>(1, "daily", "warn") >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : virtualinvoke r4.<org.sonatype.aether.repository.RemoteRepository: org.sonatype.aether.repository.RemoteRepository setPolicy(boolean,org.sonatype.aether.repository.RepositoryPolicy)>(z0, $r9)
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : virtualinvoke r4.<org.sonatype.aether.repository.RemoteRepository: org.sonatype.aether.repository.RemoteRepository setPolicy(boolean,org.sonatype.aether.repository.RepositoryPolicy)>(z0, $r9) >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : $r11 = r0.<org.apache.zeppelin.dep.AbstractDependencyResolver: java.util.List repos>
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : $r11 = r0.<org.apache.zeppelin.dep.AbstractDependencyResolver: java.util.List repos> >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r4)
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : exitmonitor r3
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : exitmonitor r3 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : goto [?= return]
org.apache.zeppelin.dep.AbstractDependencyResolver.addRepo : goto [?= return] >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $r4 = "https"
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $r4 = "https" >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : if $z1 == 0
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : if $z1 == 0 >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $r5 = new org.apache.maven.wagon.providers.http.HttpWagon
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : $r5 = new org.apache.maven.wagon.providers.http.HttpWagon >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : specialinvoke $r5.<org.apache.maven.wagon.providers.http.HttpWagon: void <init>()>()
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : specialinvoke $r5.<org.apache.maven.wagon.providers.http.HttpWagon: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : return $r5
org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider.lookup : return $r5 >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : interfaceinvoke r3.<java.util.Iterator: void remove()>()
org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : interfaceinvoke r3.<java.util.Iterator: void remove()>() >>>>>>>> org.apache.zeppelin.dep.AbstractDependencyResolver.delRepo : return r4
