org.apache.zeppelin.display.AngularObjectRegistry.add : $r5 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject add(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, 1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : r5 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject createNewAngularObject(java.lang.String,java.lang.Object,java.lang.String,java.lang.String)>(r1, r2, r3, r4)
org.apache.zeppelin.display.AngularObjectRegistry.add : r5 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject createNewAngularObject(java.lang.String,java.lang.Object,java.lang.String,java.lang.String)>(r1, r2, r3, r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.createNewAngularObject : $r5 = new org.apache.zeppelin.display.AngularObject
org.apache.zeppelin.display.AngularObjectRegistry.createNewAngularObject : $r5 = new org.apache.zeppelin.display.AngularObject >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.createNewAngularObject : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectListener angularObjectListener>
org.apache.zeppelin.display.AngularObjectRegistry.createNewAngularObject : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectListener angularObjectListener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.createNewAngularObject : specialinvoke $r5.<org.apache.zeppelin.display.AngularObject: void <init>(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,org.apache.zeppelin.display.AngularObjectListener)>(r1, r2, r3, r4, $r6)
org.apache.zeppelin.display.AngularObjectRegistry.createNewAngularObject : specialinvoke $r5.<org.apache.zeppelin.display.AngularObject: void <init>(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,org.apache.zeppelin.display.AngularObjectListener)>(r1, r2, r3, r4, $r6) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.createNewAngularObject : return $r5
org.apache.zeppelin.display.AngularObjectRegistry.createNewAngularObject : return $r5 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : $r9 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.add : $r9 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : r6 = $r9
org.apache.zeppelin.display.AngularObjectRegistry.add : r6 = $r9 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : entermonitor $r9
org.apache.zeppelin.display.AngularObjectRegistry.add : entermonitor $r9 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : r7 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r3, r4)
org.apache.zeppelin.display.AngularObjectRegistry.add : r7 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r3, r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r3 = $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : entermonitor $r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return r1
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return r1 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : if $z0 != 0 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r9 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : specialinvoke $r9.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r13 = (java.util.Map) $r12 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : exitmonitor r3 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : return $r13 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5)
org.apache.zeppelin.display.AngularObjectRegistry.add : interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.add : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : if $r11 == null
org.apache.zeppelin.display.AngularObjectRegistry.add : if $r11 == null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : if z0 == 0
org.apache.zeppelin.display.AngularObjectRegistry.add : if z0 == 0 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : $r12 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.add : $r12 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : $r13 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String interpreterId>
org.apache.zeppelin.display.AngularObjectRegistry.add : $r13 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String interpreterId> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : interfaceinvoke $r12.<org.apache.zeppelin.display.AngularObjectRegistryListener: void onAdd(java.lang.String,org.apache.zeppelin.display.AngularObject)>($r13, r5)
org.apache.zeppelin.display.AngularObjectRegistry.add : interfaceinvoke $r12.<org.apache.zeppelin.display.AngularObjectRegistryListener: void onAdd(java.lang.String,org.apache.zeppelin.display.AngularObject)>($r13, r5) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistryTest$1.onAdd : $r3 = r0.<org.apache.zeppelin.display.AngularObjectRegistryTest$1: java.util.concurrent.atomic.AtomicInteger val$onAdd>
org.apache.zeppelin.display.AngularObjectRegistryTest$1.onAdd : $r3 = r0.<org.apache.zeppelin.display.AngularObjectRegistryTest$1: java.util.concurrent.atomic.AtomicInteger val$onAdd> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistryTest$1.onAdd : virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>()
org.apache.zeppelin.display.AngularObjectRegistryTest$1.onAdd : virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : exitmonitor r6
org.apache.zeppelin.display.AngularObjectRegistry.add : exitmonitor r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : goto [?= return r5]
org.apache.zeppelin.display.AngularObjectRegistry.add : goto [?= return r5] >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : return r5
org.apache.zeppelin.display.AngularObjectRegistry.add : return r5 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.add : return $r5
org.apache.zeppelin.display.AngularObjectRegistry.add : return $r5 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : $r3 = new java.util.LinkedList
org.apache.zeppelin.display.AngularObjectRegistry.getAll : $r3 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : specialinvoke $r3.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.display.AngularObjectRegistry.getAll : specialinvoke $r3.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : r4 = $r3
org.apache.zeppelin.display.AngularObjectRegistry.getAll : r4 = $r3 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getAll : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : r5 = $r8
org.apache.zeppelin.display.AngularObjectRegistry.getAll : r5 = $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : entermonitor $r8
org.apache.zeppelin.display.AngularObjectRegistry.getAll : entermonitor $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : r6 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.display.AngularObjectRegistry.getAll : r6 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : if r6 == null
org.apache.zeppelin.display.AngularObjectRegistry.getAll : if r6 == null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : $r9 = interfaceinvoke r6.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.display.AngularObjectRegistry.getAll : $r9 = interfaceinvoke r6.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r9)
org.apache.zeppelin.display.AngularObjectRegistry.getAll : interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r9) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : exitmonitor r5
org.apache.zeppelin.display.AngularObjectRegistry.getAll : exitmonitor r5 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : goto [?= return r4]
org.apache.zeppelin.display.AngularObjectRegistry.getAll : goto [?= return r4] >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getAll : return r4
org.apache.zeppelin.display.AngularObjectRegistry.getAll : return r4 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.get : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : r4 = $r7
org.apache.zeppelin.display.AngularObjectRegistry.get : r4 = $r7 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : entermonitor $r7
org.apache.zeppelin.display.AngularObjectRegistry.get : entermonitor $r7 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.display.AngularObjectRegistry.get : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.get : $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : $r9 = (org.apache.zeppelin.display.AngularObject) $r8
org.apache.zeppelin.display.AngularObjectRegistry.get : $r9 = (org.apache.zeppelin.display.AngularObject) $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : exitmonitor r4
org.apache.zeppelin.display.AngularObjectRegistry.get : exitmonitor r4 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.get : return $r9
org.apache.zeppelin.display.AngularObjectRegistry.get : return $r9 >>>>>>>> org.apache.zeppelin.display.AngularObject.set : virtualinvoke r0.<org.apache.zeppelin.display.AngularObject: void set(java.lang.Object,boolean)>(r1, 1)
org.apache.zeppelin.display.AngularObject.set : virtualinvoke r0.<org.apache.zeppelin.display.AngularObject: void set(java.lang.Object,boolean)>(r1, 1) >>>>>>>> org.apache.zeppelin.display.AngularObject.set : r2 = r0.<org.apache.zeppelin.display.AngularObject: java.lang.Object object>
org.apache.zeppelin.display.AngularObject.set : r2 = r0.<org.apache.zeppelin.display.AngularObject: java.lang.Object object> >>>>>>>> org.apache.zeppelin.display.AngularObject.set : r3 = r1
org.apache.zeppelin.display.AngularObject.set : r3 = r1 >>>>>>>> org.apache.zeppelin.display.AngularObject.set : r0.<org.apache.zeppelin.display.AngularObject: java.lang.Object object> = r1
org.apache.zeppelin.display.AngularObject.set : r0.<org.apache.zeppelin.display.AngularObject: java.lang.Object object> = r1 >>>>>>>> org.apache.zeppelin.display.AngularObject.set : if z0 == 0
org.apache.zeppelin.display.AngularObject.set : if z0 == 0 >>>>>>>> org.apache.zeppelin.display.AngularObject.set : virtualinvoke r0.<org.apache.zeppelin.display.AngularObject: void emit()>()
org.apache.zeppelin.display.AngularObject.set : virtualinvoke r0.<org.apache.zeppelin.display.AngularObject: void emit()>() >>>>>>>> org.apache.zeppelin.display.AngularObject.emit : $r1 = r0.<org.apache.zeppelin.display.AngularObject: org.apache.zeppelin.display.AngularObjectListener listener>
org.apache.zeppelin.display.AngularObject.emit : $r1 = r0.<org.apache.zeppelin.display.AngularObject: org.apache.zeppelin.display.AngularObjectListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObject.emit : if $r1 == null
org.apache.zeppelin.display.AngularObject.emit : if $r1 == null >>>>>>>> org.apache.zeppelin.display.AngularObject.emit : $r2 = r0.<org.apache.zeppelin.display.AngularObject: org.apache.zeppelin.display.AngularObjectListener listener>
org.apache.zeppelin.display.AngularObject.emit : $r2 = r0.<org.apache.zeppelin.display.AngularObject: org.apache.zeppelin.display.AngularObjectListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObject.emit : interfaceinvoke $r2.<org.apache.zeppelin.display.AngularObjectListener: void updated(org.apache.zeppelin.display.AngularObject)>(r0)
org.apache.zeppelin.display.AngularObject.emit : interfaceinvoke $r2.<org.apache.zeppelin.display.AngularObjectListener: void updated(org.apache.zeppelin.display.AngularObject)>(r0) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry$1.updated : $r2 = r0.<org.apache.zeppelin.display.AngularObjectRegistry$1: org.apache.zeppelin.display.AngularObjectRegistryListener val$listener>
org.apache.zeppelin.display.AngularObjectRegistry$1.updated : $r2 = r0.<org.apache.zeppelin.display.AngularObjectRegistry$1: org.apache.zeppelin.display.AngularObjectRegistryListener val$listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry$1.updated : if $r2 == null
org.apache.zeppelin.display.AngularObjectRegistry$1.updated : if $r2 == null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry$1.updated : $r3 = r0.<org.apache.zeppelin.display.AngularObjectRegistry$1: org.apache.zeppelin.display.AngularObjectRegistryListener val$listener>
org.apache.zeppelin.display.AngularObjectRegistry$1.updated : $r3 = r0.<org.apache.zeppelin.display.AngularObjectRegistry$1: org.apache.zeppelin.display.AngularObjectRegistryListener val$listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry$1.updated : $r4 = r0.<org.apache.zeppelin.display.AngularObjectRegistry$1: java.lang.String val$interpreterId>
org.apache.zeppelin.display.AngularObjectRegistry$1.updated : $r4 = r0.<org.apache.zeppelin.display.AngularObjectRegistry$1: java.lang.String val$interpreterId> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry$1.updated : interfaceinvoke $r3.<org.apache.zeppelin.display.AngularObjectRegistryListener: void onUpdate(java.lang.String,org.apache.zeppelin.display.AngularObject)>($r4, r1)
org.apache.zeppelin.display.AngularObjectRegistry$1.updated : interfaceinvoke $r3.<org.apache.zeppelin.display.AngularObjectRegistryListener: void onUpdate(java.lang.String,org.apache.zeppelin.display.AngularObject)>($r4, r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistryTest$1.onUpdate : $r3 = r0.<org.apache.zeppelin.display.AngularObjectRegistryTest$1: java.util.concurrent.atomic.AtomicInteger val$onUpdate>
org.apache.zeppelin.display.AngularObjectRegistryTest$1.onUpdate : $r3 = r0.<org.apache.zeppelin.display.AngularObjectRegistryTest$1: java.util.concurrent.atomic.AtomicInteger val$onUpdate> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistryTest$1.onUpdate : virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>()
org.apache.zeppelin.display.AngularObjectRegistryTest$1.onUpdate : virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r9 = <org.apache.zeppelin.display.AngularObject: org.slf4j.Logger LOGGER>
org.apache.zeppelin.display.AngularObject.set : $r9 = <org.apache.zeppelin.display.AngularObject: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r10 = new java.lang.StringBuilder
org.apache.zeppelin.display.AngularObject.set : $r10 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.display.AngularObject.set : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.display.AngularObject.set : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update angular object: ")
org.apache.zeppelin.display.AngularObject.set : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update angular object: ") >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r12 = r0.<org.apache.zeppelin.display.AngularObject: java.lang.String name>
org.apache.zeppelin.display.AngularObject.set : $r12 = r0.<org.apache.zeppelin.display.AngularObject: java.lang.String name> >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.zeppelin.display.AngularObject.set : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with value: ")
org.apache.zeppelin.display.AngularObject.set : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with value: ") >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
org.apache.zeppelin.display.AngularObject.set : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.display.AngularObject.set : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.display.AngularObject.set : interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r16)
org.apache.zeppelin.display.AngularObject.set : interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r16) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : $r2 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender: java.util.List log>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : $r2 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender: java.util.List log> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObject.set : r4 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/zeppelin/display/AngularObject")
org.apache.zeppelin.display.AngularObject.set : r4 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "org/apache/zeppelin/display/AngularObject") >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r17 = new java.util.LinkedList
org.apache.zeppelin.display.AngularObject.set : $r17 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.display.AngularObject.set : specialinvoke $r17.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.display.AngularObject.set : specialinvoke $r17.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.display.AngularObject.set : r5 = $r17
org.apache.zeppelin.display.AngularObject.set : r5 = $r17 >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r18 = r0.<org.apache.zeppelin.display.AngularObject: java.util.List watchers>
org.apache.zeppelin.display.AngularObject.set : $r18 = r0.<org.apache.zeppelin.display.AngularObject: java.util.List watchers> >>>>>>>> org.apache.zeppelin.display.AngularObject.set : r6 = $r18
org.apache.zeppelin.display.AngularObject.set : r6 = $r18 >>>>>>>> org.apache.zeppelin.display.AngularObject.set : entermonitor $r18
org.apache.zeppelin.display.AngularObject.set : entermonitor $r18 >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r19 = r0.<org.apache.zeppelin.display.AngularObject: java.util.List watchers>
org.apache.zeppelin.display.AngularObject.set : $r19 = r0.<org.apache.zeppelin.display.AngularObject: java.util.List watchers> >>>>>>>> org.apache.zeppelin.display.AngularObject.set : interfaceinvoke r5.<java.util.List: boolean addAll(java.util.Collection)>($r19)
org.apache.zeppelin.display.AngularObject.set : interfaceinvoke r5.<java.util.List: boolean addAll(java.util.Collection)>($r19) >>>>>>>> org.apache.zeppelin.display.AngularObject.set : exitmonitor r6
org.apache.zeppelin.display.AngularObject.set : exitmonitor r6 >>>>>>>> org.apache.zeppelin.display.AngularObject.set : goto [?= $r21 = staticinvoke <org.apache.zeppelin.scheduler.ExecutorFactory: org.apache.zeppelin.scheduler.ExecutorFactory singleton()>()]
org.apache.zeppelin.display.AngularObject.set : goto [?= $r21 = staticinvoke <org.apache.zeppelin.scheduler.ExecutorFactory: org.apache.zeppelin.scheduler.ExecutorFactory singleton()>()] >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $r21 = staticinvoke <org.apache.zeppelin.scheduler.ExecutorFactory: org.apache.zeppelin.scheduler.ExecutorFactory singleton()>()
org.apache.zeppelin.display.AngularObject.set : $r21 = staticinvoke <org.apache.zeppelin.scheduler.ExecutorFactory: org.apache.zeppelin.scheduler.ExecutorFactory singleton()>() >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.singleton : $r0 = <org.apache.zeppelin.scheduler.ExecutorFactory: org.apache.zeppelin.scheduler.ExecutorFactory _executor>
org.apache.zeppelin.scheduler.ExecutorFactory.singleton : $r0 = <org.apache.zeppelin.scheduler.ExecutorFactory: org.apache.zeppelin.scheduler.ExecutorFactory _executor> >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.singleton : if $r0 != null
org.apache.zeppelin.scheduler.ExecutorFactory.singleton : if $r0 != null >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.singleton : $r7 = <org.apache.zeppelin.scheduler.ExecutorFactory: org.apache.zeppelin.scheduler.ExecutorFactory _executor>
org.apache.zeppelin.scheduler.ExecutorFactory.singleton : $r7 = <org.apache.zeppelin.scheduler.ExecutorFactory: org.apache.zeppelin.scheduler.ExecutorFactory _executor> >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.singleton : return $r7
org.apache.zeppelin.scheduler.ExecutorFactory.singleton : return $r7 >>>>>>>> org.apache.zeppelin.display.AngularObject.set : r22 = virtualinvoke $r21.<org.apache.zeppelin.scheduler.ExecutorFactory: java.util.concurrent.ExecutorService createOrGet(java.lang.String,int)>("angularObjectWatcher", 50)
org.apache.zeppelin.display.AngularObject.set : r22 = virtualinvoke $r21.<org.apache.zeppelin.scheduler.ExecutorFactory: java.util.concurrent.ExecutorService createOrGet(java.lang.String,int)>("angularObjectWatcher", 50) >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r4 = r0.<org.apache.zeppelin.scheduler.ExecutorFactory: java.util.Map executor>
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r4 = r0.<org.apache.zeppelin.scheduler.ExecutorFactory: java.util.Map executor> >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : r2 = $r4
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : r2 = $r4 >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : entermonitor $r4
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : entermonitor $r4 >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r5 = r0.<org.apache.zeppelin.scheduler.ExecutorFactory: java.util.Map executor>
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r5 = r0.<org.apache.zeppelin.scheduler.ExecutorFactory: java.util.Map executor> >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : if $z0 != 0
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : if $z0 != 0 >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r6 = r0.<org.apache.zeppelin.scheduler.ExecutorFactory: java.util.Map executor>
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r6 = r0.<org.apache.zeppelin.scheduler.ExecutorFactory: java.util.Map executor> >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r7 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>(i0)
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r7 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>(i0) >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7)
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7) >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r9 = r0.<org.apache.zeppelin.scheduler.ExecutorFactory: java.util.Map executor>
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r9 = r0.<org.apache.zeppelin.scheduler.ExecutorFactory: java.util.Map executor> >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r11 = (java.util.concurrent.ExecutorService) $r10
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : $r11 = (java.util.concurrent.ExecutorService) $r10 >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : exitmonitor r2
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : exitmonitor r2 >>>>>>>> org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : return $r11
org.apache.zeppelin.scheduler.ExecutorFactory.createOrGet : return $r11 >>>>>>>> org.apache.zeppelin.display.AngularObject.set : r23 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.display.AngularObject.set : r23 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.display.AngularObject.set : $z2 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.display.AngularObject.set : $z2 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.display.AngularObject.set : if $z2 == 0
org.apache.zeppelin.display.AngularObject.set : if $z2 == 0 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r4 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject remove(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, 1)
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r4 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject remove(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, 1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r4 = $r8
org.apache.zeppelin.display.AngularObjectRegistry.remove : r4 = $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : entermonitor $r8
org.apache.zeppelin.display.AngularObjectRegistry.remove : entermonitor $r8 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.display.AngularObjectRegistry.remove : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : r6 = (org.apache.zeppelin.display.AngularObject) $r9
org.apache.zeppelin.display.AngularObjectRegistry.remove : r6 = (org.apache.zeppelin.display.AngularObject) $r9 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r10 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r10 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : if $r10 == null
org.apache.zeppelin.display.AngularObjectRegistry.remove : if $r10 == null >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : if z0 == 0
org.apache.zeppelin.display.AngularObjectRegistry.remove : if z0 == 0 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : $r12 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String interpreterId>
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r12 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String interpreterId> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : interfaceinvoke $r11.<org.apache.zeppelin.display.AngularObjectRegistryListener: void onRemove(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r12, r1, r2, r3)
org.apache.zeppelin.display.AngularObjectRegistry.remove : interfaceinvoke $r11.<org.apache.zeppelin.display.AngularObjectRegistryListener: void onRemove(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r12, r1, r2, r3) >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistryTest$1.onRemove : $r5 = r0.<org.apache.zeppelin.display.AngularObjectRegistryTest$1: java.util.concurrent.atomic.AtomicInteger val$onRemove>
org.apache.zeppelin.display.AngularObjectRegistryTest$1.onRemove : $r5 = r0.<org.apache.zeppelin.display.AngularObjectRegistryTest$1: java.util.concurrent.atomic.AtomicInteger val$onRemove> >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistryTest$1.onRemove : virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>()
org.apache.zeppelin.display.AngularObjectRegistryTest$1.onRemove : virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : exitmonitor r4
org.apache.zeppelin.display.AngularObjectRegistry.remove : exitmonitor r4 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : return r6
org.apache.zeppelin.display.AngularObjectRegistry.remove : return r6 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.remove : return $r4
org.apache.zeppelin.display.AngularObjectRegistry.remove : return $r4 >>>>>>>> org.apache.zeppelin.display.AngularObject.get : $r1 = r0.<org.apache.zeppelin.display.AngularObject: java.lang.Object object>
org.apache.zeppelin.display.AngularObject.get : $r1 = r0.<org.apache.zeppelin.display.AngularObject: java.lang.Object object> >>>>>>>> org.apache.zeppelin.display.AngularObject.get : return $r1
org.apache.zeppelin.display.AngularObject.get : return $r1 >>>>>>>> org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : return "_GLOBAL_"
