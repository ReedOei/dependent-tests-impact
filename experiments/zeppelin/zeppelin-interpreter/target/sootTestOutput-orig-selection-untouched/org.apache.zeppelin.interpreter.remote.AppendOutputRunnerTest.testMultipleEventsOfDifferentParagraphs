org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations> = 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : specialinvoke r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: void prepareInvocationCounts(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>(r1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : specialinvoke r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: void prepareInvocationCounts(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r2 = new org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r2 = new org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : specialinvoke $r2.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1: void <init>(org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest)>(r0)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : specialinvoke $r2.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1: void <init>(org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest)>(r0) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r3 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doAnswer(org.mockito.stubbing.Answer)>($r2)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r3 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.Stubber doAnswer(org.mockito.stubbing.Answer)>($r2) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r4 = interfaceinvoke $r3.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r4 = interfaceinvoke $r3.<org.mockito.stubbing.Stubber: java.lang.Object when(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r5 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener) $r4
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r5 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener) $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r6 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "java/lang/String")
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r6 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r7 = (java.lang.String) $r6
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r7 = (java.lang.String) $r6 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r8 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "java/lang/String")
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r8 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r9 = (java.lang.String) $r8
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r9 = (java.lang.String) $r8 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $i0 = staticinvoke <org.mockito.Matchers: int anyInt()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $i0 = staticinvoke <org.mockito.Matchers: int anyInt()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r10 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "java/lang/String")
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r10 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r11 = (java.lang.String) $r10
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : $r11 = (java.lang.String) $r10 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : interfaceinvoke $r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener: void onOutputAppend(java.lang.String,java.lang.String,int,java.lang.String)>($r7, $r9, $i0, $r11)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.prepareInvocationCounts : interfaceinvoke $r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener: void onOutputAppend(java.lang.String,java.lang.String,int,java.lang.String)>($r7, $r9, $i0, $r11) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r7 = new org.apache.zeppelin.interpreter.remote.AppendOutputRunner
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r7 = new org.apache.zeppelin.interpreter.remote.AppendOutputRunner >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : specialinvoke $r7.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>(r1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : specialinvoke $r7.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void <init>(org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : r3 = $r7
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : r3 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : r4 = r2
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : r4 = r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i1 = lengthof r4
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i1 = lengthof r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i2 = 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i2 = 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if i2 >= i1
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if i2 >= i1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : r5 = r4[i2]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : r5 = r4[i2] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r8 = r5[0]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r8 = r5[0] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r9 = r5[1]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r9 = r5[1] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r10 = r5[2]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r10 = r5[2] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : virtualinvoke r3.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void appendBuffer(java.lang.String,java.lang.String,int,java.lang.String)>($r8, $r9, 0, $r10)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : virtualinvoke r3.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: void appendBuffer(java.lang.String,java.lang.String,int,java.lang.String)>($r8, $r9, 0, $r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : $r5 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.util.concurrent.BlockingQueue queue>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : $r5 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.util.concurrent.BlockingQueue queue> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : $r4 = new org.apache.zeppelin.interpreter.remote.AppendOutputBuffer
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : $r4 = new org.apache.zeppelin.interpreter.remote.AppendOutputBuffer >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : specialinvoke $r4.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>(r1, r2, i0, r3)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : specialinvoke $r4.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>(r1, r2, i0, r3) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>($r4)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.appendBuffer : interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>($r4) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i2 = i2 + 1
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : i2 = i2 + 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : goto [?= (branch)]
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r11 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: java.util.concurrent.ScheduledExecutorService service>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r11 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: java.util.concurrent.ScheduledExecutorService service> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r12 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long BUFFER_TIME_MS>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r12 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long BUFFER_TIME_MS> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $l3 = virtualinvoke $r12.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $l3 = virtualinvoke $r12.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r13 = interfaceinvoke $r11.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r3, 0L, $l3, $r6)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $r13 = interfaceinvoke $r11.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r3, 0L, $l3, $r6) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r1 = new java.util.HashMap
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r1 = new java.util.HashMap >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r1.<java.util.HashMap: void <init>()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r1.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r2 = $r1
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r2 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r11 = new java.util.LinkedList
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r11 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r11.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r11.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r3 = $r11
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r3 = $r11 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r12 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.util.concurrent.BlockingQueue queue>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r12 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.util.concurrent.BlockingQueue queue> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r13 = interfaceinvoke $r12.<java.util.concurrent.BlockingQueue: java.lang.Object take()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r13 = interfaceinvoke $r12.<java.util.concurrent.BlockingQueue: java.lang.Object take()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r13)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r13) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : goto [?= $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()]
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : goto [?= $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r22 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.util.concurrent.BlockingQueue queue>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r22 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.util.concurrent.BlockingQueue queue> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r22.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>(r3)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r22.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $z1 == 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r23 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r23 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r6 = (org.apache.zeppelin.interpreter.remote.AppendOutputBuffer) $r23
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r6 = (org.apache.zeppelin.interpreter.remote.AppendOutputBuffer) $r23 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r7 = virtualinvoke r6.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String getNoteId()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r7 = virtualinvoke r6.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String getNoteId()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getNoteId : $r1 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String noteId>
org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getNoteId : $r1 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String noteId> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getNoteId : return $r1
org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getNoteId : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r8 = virtualinvoke r6.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String getParagraphId()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r8 = virtualinvoke r6.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String getParagraphId()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getParagraphId : $r1 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String paragraphId>
org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getParagraphId : $r1 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String paragraphId> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getParagraphId : return $r1
org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getParagraphId : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : i0 = virtualinvoke r6.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: int getIndex()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : i0 = virtualinvoke r6.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: int getIndex()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getIndex : $i0 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: int index>
org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getIndex : $i0 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: int index> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getIndex : return $i0
org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getIndex : return $i0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r24 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r24 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r9 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r9 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $z2 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r9)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $z2 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r9) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $z2 == 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r31 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r31 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r10 = $r31
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r10 = $r31 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r32 = virtualinvoke r6.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String getData()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r32 = virtualinvoke r6.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String getData()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getData : $r1 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String data>
org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getData : $r1 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputBuffer: java.lang.String data> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getData : return $r1
org.apache.zeppelin.interpreter.remote.AppendOutputBuffer.getData : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l4 = virtualinvoke r21.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l4 = virtualinvoke r21.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l5 = $l3 - $l4
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l5 = $l3 - $l4 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l6 = virtualinvoke r35.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l6 = virtualinvoke r35.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r36 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long SAFE_PROCESSING_TIME>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r36 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long SAFE_PROCESSING_TIME> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l7 = virtualinvoke $r36.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l7 = virtualinvoke $r36.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $b8 = $l6 cmp $l7
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $b8 = $l6 cmp $l7 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $b8 <= 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $b8 <= 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r43 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r43 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r44 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r44 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r44.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r44.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing time for append-output took ")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing time for append-output took ") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" milliseconds")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" milliseconds") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r43.<org.slf4j.Logger: void debug(java.lang.String)>($r48)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r43.<org.slf4j.Logger: void debug(java.lang.String)>($r48) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r49 = new java.lang.Long
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r49 = new java.lang.Long >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r49.<java.lang.Long: void <init>(long)>(0L)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r49.<java.lang.Long: void <init>(long)>(0L) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r50 = $r49
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r50 = $r49 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r51 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r51 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r52 = interfaceinvoke $r51.<java.util.Set: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r52 = interfaceinvoke $r51.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $z3 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $z3 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $z3 == 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $z3 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r53 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r53 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r54 = (java.lang.String) $r53
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r54 = (java.lang.String) $r53 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r55 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r54)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r55 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r54) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r56 = (java.lang.StringBuilder) $r55
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r56 = (java.lang.StringBuilder) $r55 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l9 = virtualinvoke r50.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l9 = virtualinvoke r50.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $i10 = virtualinvoke r56.<java.lang.StringBuilder: int length()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $i10 = virtualinvoke r56.<java.lang.StringBuilder: int length()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l11 = (long) $i10
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l11 = (long) $i10 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l12 = $l9 + $l11
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l12 = $l9 + $l11 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r50 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r50 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r57 = virtualinvoke r54.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : r57 = virtualinvoke r54.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r58 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener listener>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r58 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunner: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener listener> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r59 = r57[0]
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r59 = r57[0] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r60 = r57[1]
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r60 = r57[1] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r61 = r57[2]
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r61 = r57[2] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r61)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r61) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r62 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r62 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r58.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener: void onOutputAppend(java.lang.String,java.lang.String,int,java.lang.String)>($r59, $r60, $i13, $r62)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r58.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener: void onOutputAppend(java.lang.String,java.lang.String,int,java.lang.String)>($r59, $r60, $i13, $r62) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : $r2 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1: java.lang.Void answer(org.mockito.invocation.InvocationOnMock)>(r1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : $r2 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1: java.lang.Void answer(org.mockito.invocation.InvocationOnMock)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : $i0 = staticinvoke <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int access$200()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : $i0 = staticinvoke <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int access$200()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.access$200 : $i0 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.access$200 : $i0 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.access$200 : return $i0
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.access$200 : return $i0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : $i1 = $i0 + 1
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : $i1 = $i0 + 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : staticinvoke <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int access$202(int)>($i1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : staticinvoke <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int access$202(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.access$202 : <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations> = i0
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.access$202 : <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations> = i0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.access$202 : return i0
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.access$202 : return i0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : return null
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : return null >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : return $r2
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$1.answer : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : goto [?= $z3 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : goto [?= $z3 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l14 = virtualinvoke r50.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l14 = virtualinvoke r50.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r63 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long SAFE_PROCESSING_STRING_SIZE>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r63 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: java.lang.Long SAFE_PROCESSING_STRING_SIZE> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l15 = virtualinvoke $r63.<java.lang.Long: long longValue()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $l15 = virtualinvoke $r63.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $b16 = $l14 cmp $l15
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $b16 = $l14 cmp $l15 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $b16 <= 0
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : if $b16 <= 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r70 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r70 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunner: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r71 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r71 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r71.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : specialinvoke $r71.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing size for append-output is ")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing size for append-output is ") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r50)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r50) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" characters")
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" characters") >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r70.<org.slf4j.Logger: void debug(java.lang.String)>($r75)
org.apache.zeppelin.interpreter.remote.AppendOutputRunner.run : interfaceinvoke $r70.<org.slf4j.Logger: void debug(java.lang.String)>($r75) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: java.util.concurrent.ScheduledFuture future> = $r13
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: java.util.concurrent.ScheduledFuture future> = $r13 >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : l4 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : l4 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $i5 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : $i5 = <org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest: int numInvocations> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest.loopForCompletingEvents : if $i5 == i0
