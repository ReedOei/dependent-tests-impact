org.apache.zeppelin.interpreter.InterpreterOutput.close : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : r1 = $r5
org.apache.zeppelin.interpreter.InterpreterOutput.close : r1 = $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : entermonitor $r5
org.apache.zeppelin.interpreter.InterpreterOutput.close : entermonitor $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs>
org.apache.zeppelin.interpreter.InterpreterOutput.close : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterOutput.close : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterOutput.close : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterOutput.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterOutput.close : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : r3 = (org.apache.zeppelin.interpreter.InterpreterResultMessageOutput) $r7
org.apache.zeppelin.interpreter.InterpreterOutput.close : r3 = (org.apache.zeppelin.interpreter.InterpreterResultMessageOutput) $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void close()>()
org.apache.zeppelin.interpreter.InterpreterOutput.close : virtualinvoke r3.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.close : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void flush()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.close : virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void flush()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $z0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: boolean isAppendSupported()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $z0 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: boolean isAppendSupported()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: org.apache.zeppelin.interpreter.InterpreterResult$Type type>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $r2 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: org.apache.zeppelin.interpreter.InterpreterResult$Type type> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $r1 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TEXT>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $r1 = <org.apache.zeppelin.interpreter.InterpreterResult$Type: org.apache.zeppelin.interpreter.InterpreterResult$Type TEXT> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : if $r2 != $r1
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : if $r2 != $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $z0 = 0
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : $z0 = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : return $z0
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.isAppendSupported : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void flush(boolean)>($z0)
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: void flush(boolean)>($z0) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.util.List outList>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.util.List outList> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : r1 = $r4
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : r1 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : entermonitor $r4
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : entermonitor $r4 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : virtualinvoke $r5.<java.io.ByteArrayOutputStream: void flush()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : virtualinvoke $r5.<java.io.ByteArrayOutputStream: void flush()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : r2 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : r2 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : if r2 == null
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : if r2 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $i0 = lengthof r2
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $i0 = lengthof r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : if $i0 <= 0
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : if $i0 <= 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : $r12 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : virtualinvoke $r12.<java.io.ByteArrayOutputStream: void reset()>()
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : virtualinvoke $r12.<java.io.ByteArrayOutputStream: void reset()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : exitmonitor r1
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.flush : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.close : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher watcher>
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.close : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterResultMessageOutput: org.apache.zeppelin.interpreter.InterpreterOutputChangeWatcher watcher> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.close : if $r1 == null
org.apache.zeppelin.interpreter.InterpreterResultMessageOutput.close : if $r1 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterOutput.close : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : exitmonitor r1
org.apache.zeppelin.interpreter.InterpreterOutput.close : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.close : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterOutput.close : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : $r2 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender: java.util.List log>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : $r2 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender: java.util.List log> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : $r1 = new java.util.Properties
org.apache.zeppelin.interpreter.Interpreter.getProperty : $r1 = new java.util.Properties >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : specialinvoke $r1.<java.util.Properties: void <init>()>()
org.apache.zeppelin.interpreter.Interpreter.getProperty : specialinvoke $r1.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : r2 = $r1
org.apache.zeppelin.interpreter.Interpreter.getProperty : r2 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : $r8 = r0.<org.apache.zeppelin.interpreter.Interpreter: java.util.Properties property>
org.apache.zeppelin.interpreter.Interpreter.getProperty : $r8 = r0.<org.apache.zeppelin.interpreter.Interpreter: java.util.Properties property> >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : virtualinvoke r2.<java.util.Properties: void putAll(java.util.Map)>($r8)
org.apache.zeppelin.interpreter.Interpreter.getProperty : virtualinvoke r2.<java.util.Properties: void putAll(java.util.Map)>($r8) >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : $r9 = virtualinvoke r0.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>()
org.apache.zeppelin.interpreter.Interpreter.getProperty : $r9 = virtualinvoke r0.<org.apache.zeppelin.interpreter.Interpreter: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getClassName : $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.zeppelin.interpreter.Interpreter.getClassName : $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getClassName : $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>()
org.apache.zeppelin.interpreter.Interpreter.getClassName : $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getClassName : return $r2
org.apache.zeppelin.interpreter.Interpreter.getClassName : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : r3 = staticinvoke <org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.Interpreter$RegisteredInterpreter findRegisteredInterpreterByClassName(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.Interpreter.getProperty : r3 = staticinvoke <org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.Interpreter$RegisteredInterpreter findRegisteredInterpreterByClassName(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : $r1 = <org.apache.zeppelin.interpreter.Interpreter: java.util.Map registeredInterpreters>
org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : $r1 = <org.apache.zeppelin.interpreter.Interpreter: java.util.Map registeredInterpreters> >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : $r4 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : $r4 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : if $z0 == 0
org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : return null
org.apache.zeppelin.interpreter.Interpreter.findRegisteredInterpreterByClassName : return null >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : if null == r3
org.apache.zeppelin.interpreter.Interpreter.getProperty : if null == r3 >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : specialinvoke r0.<org.apache.zeppelin.interpreter.Interpreter: void replaceContextParameters(java.util.Properties)>(r2)
org.apache.zeppelin.interpreter.Interpreter.getProperty : specialinvoke r0.<org.apache.zeppelin.interpreter.Interpreter: void replaceContextParameters(java.util.Properties)>(r2) >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.replaceContextParameters : r2 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.interpreter.InterpreterContext get()>()
org.apache.zeppelin.interpreter.Interpreter.replaceContextParameters : r2 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterContext: org.apache.zeppelin.interpreter.InterpreterContext get()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterContext.get : $r0 = <org.apache.zeppelin.interpreter.InterpreterContext: java.lang.ThreadLocal threadIC>
org.apache.zeppelin.interpreter.InterpreterContext.get : $r0 = <org.apache.zeppelin.interpreter.InterpreterContext: java.lang.ThreadLocal threadIC> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterContext.get : $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>()
org.apache.zeppelin.interpreter.InterpreterContext.get : $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterContext.get : $r2 = (org.apache.zeppelin.interpreter.InterpreterContext) $r1
org.apache.zeppelin.interpreter.InterpreterContext.get : $r2 = (org.apache.zeppelin.interpreter.InterpreterContext) $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterContext.get : return $r2
org.apache.zeppelin.interpreter.InterpreterContext.get : return $r2 >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.replaceContextParameters : if r2 == null
org.apache.zeppelin.interpreter.Interpreter.replaceContextParameters : if r2 == null >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : return r2
org.apache.zeppelin.interpreter.Interpreter.getProperty : return r2 >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : $r2 = <org.apache.zeppelin.interpreter.Interpreter: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.Interpreter.getProperty : $r2 = <org.apache.zeppelin.interpreter.Interpreter: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : $r3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.Interpreter: java.util.Properties getProperty()>()
org.apache.zeppelin.interpreter.Interpreter.getProperty : $r3 = virtualinvoke r0.<org.apache.zeppelin.interpreter.Interpreter: java.util.Properties getProperty()>() >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : $r4 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.Interpreter.getProperty : $r4 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("key: {}, value: {}", r1, $r4)
org.apache.zeppelin.interpreter.Interpreter.getProperty : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("key: {}, value: {}", r1, $r4) >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : $r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.Interpreter: java.util.Properties getProperty()>()
org.apache.zeppelin.interpreter.Interpreter.getProperty : $r5 = virtualinvoke r0.<org.apache.zeppelin.interpreter.Interpreter: java.util.Properties getProperty()>() >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : $r6 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1)
org.apache.zeppelin.interpreter.Interpreter.getProperty : $r6 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getProperty : return $r6
