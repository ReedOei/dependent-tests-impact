org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : $r2 = new org.apache.zeppelin.resource.ResourceSet >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceSet: void <init>()>()
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceSet: void <init>()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : r3 = $r2
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : r3 = $r2 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>()
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : if $z0 == 0
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : if $z0 == 0 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : r5 = (org.apache.zeppelin.resource.Resource) $r6
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : r5 = (org.apache.zeppelin.resource.Resource) $r6 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : $r7 = virtualinvoke r5.<org.apache.zeppelin.resource.Resource: java.lang.String getClassName()>()
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : $r7 = virtualinvoke r5.<org.apache.zeppelin.resource.Resource: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.resource.Resource.getClassName : $r1 = r0.<org.apache.zeppelin.resource.Resource: java.lang.String className>
org.apache.zeppelin.resource.Resource.getClassName : $r1 = r0.<org.apache.zeppelin.resource.Resource: java.lang.String className> >>>>>>>> org.apache.zeppelin.resource.Resource.getClassName : return $r1
org.apache.zeppelin.resource.Resource.getClassName : return $r1 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : $z1 = staticinvoke <java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>(r1, $r7)
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : $z1 = staticinvoke <java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>(r1, $r7) >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : if $z1 == 0
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : if $z1 == 0 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : virtualinvoke r3.<org.apache.zeppelin.resource.ResourceSet: boolean add(java.lang.Object)>(r5)
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : virtualinvoke r3.<org.apache.zeppelin.resource.ResourceSet: boolean add(java.lang.Object)>(r5) >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : return r3
