org.apache.zeppelin.resource.Resource.serializeObject : if r0 == null >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : $z0 = r0 instanceof java.io.Serializable
org.apache.zeppelin.resource.Resource.serializeObject : $z0 = r0 instanceof java.io.Serializable >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : if $z0 != 0
org.apache.zeppelin.resource.Resource.serializeObject : if $z0 != 0 >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : $r3 = new java.io.ByteArrayOutputStream
org.apache.zeppelin.resource.Resource.serializeObject : $r3 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.zeppelin.resource.Resource.serializeObject : specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : r1 = $r3
org.apache.zeppelin.resource.Resource.serializeObject : r1 = $r3 >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : $r4 = new java.io.ObjectOutputStream
org.apache.zeppelin.resource.Resource.serializeObject : $r4 = new java.io.ObjectOutputStream >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : specialinvoke $r4.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r1)
org.apache.zeppelin.resource.Resource.serializeObject : specialinvoke $r4.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r1) >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : r2 = $r4
org.apache.zeppelin.resource.Resource.serializeObject : r2 = $r4 >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : virtualinvoke r2.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r0)
org.apache.zeppelin.resource.Resource.serializeObject : virtualinvoke r2.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r0) >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : virtualinvoke r2.<java.io.ObjectOutputStream: void close()>()
org.apache.zeppelin.resource.Resource.serializeObject : virtualinvoke r2.<java.io.ObjectOutputStream: void close()>() >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : virtualinvoke r1.<java.io.ByteArrayOutputStream: void close()>()
org.apache.zeppelin.resource.Resource.serializeObject : virtualinvoke r1.<java.io.ByteArrayOutputStream: void close()>() >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : goto [?= $r7 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.zeppelin.resource.Resource.serializeObject : goto [?= $r7 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()] >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : $r7 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.zeppelin.resource.Resource.serializeObject : $r7 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r7)
org.apache.zeppelin.resource.Resource.serializeObject : $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r7) >>>>>>>> org.apache.zeppelin.resource.Resource.serializeObject : return $r8
org.apache.zeppelin.resource.Resource.serializeObject : return $r8 >>>>>>>> org.apache.zeppelin.resource.Resource.deserializeObject : if r0 != null
org.apache.zeppelin.resource.Resource.deserializeObject : if r0 != null >>>>>>>> org.apache.zeppelin.resource.Resource.deserializeObject : r1 = staticinvoke <org.apache.zeppelin.resource.ByteBufferInputStream: java.io.InputStream get(java.nio.ByteBuffer)>(r0)
org.apache.zeppelin.resource.Resource.deserializeObject : r1 = staticinvoke <org.apache.zeppelin.resource.ByteBufferInputStream: java.io.InputStream get(java.nio.ByteBuffer)>(r0) >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>()
org.apache.zeppelin.resource.ByteBufferInputStream.get : $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>() >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : if $z0 == 0
org.apache.zeppelin.resource.ByteBufferInputStream.get : if $z0 == 0 >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : $r1 = new java.io.ByteArrayInputStream
org.apache.zeppelin.resource.ByteBufferInputStream.get : $r1 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : $r2 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>()
org.apache.zeppelin.resource.ByteBufferInputStream.get : $r2 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>() >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2)
org.apache.zeppelin.resource.ByteBufferInputStream.get : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2) >>>>>>>> org.apache.zeppelin.resource.ByteBufferInputStream.get : return $r1
org.apache.zeppelin.resource.ByteBufferInputStream.get : return $r1 >>>>>>>> org.apache.zeppelin.resource.Resource.deserializeObject : n0 = null
org.apache.zeppelin.resource.Resource.deserializeObject : n0 = null >>>>>>>> org.apache.zeppelin.resource.Resource.deserializeObject : $r3 = new java.io.ObjectInputStream
org.apache.zeppelin.resource.Resource.deserializeObject : $r3 = new java.io.ObjectInputStream >>>>>>>> org.apache.zeppelin.resource.Resource.deserializeObject : specialinvoke $r3.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1)
org.apache.zeppelin.resource.Resource.deserializeObject : specialinvoke $r3.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1) >>>>>>>> org.apache.zeppelin.resource.Resource.deserializeObject : r2 = $r3
org.apache.zeppelin.resource.Resource.deserializeObject : r2 = $r3 >>>>>>>> org.apache.zeppelin.resource.Resource.deserializeObject : r4 = virtualinvoke r2.<java.io.ObjectInputStream: java.lang.Object readObject()>()
org.apache.zeppelin.resource.Resource.deserializeObject : r4 = virtualinvoke r2.<java.io.ObjectInputStream: java.lang.Object readObject()>() >>>>>>>> org.apache.zeppelin.resource.Resource.deserializeObject : virtualinvoke r2.<java.io.ObjectInputStream: void close()>()
org.apache.zeppelin.resource.Resource.deserializeObject : virtualinvoke r2.<java.io.ObjectInputStream: void close()>() >>>>>>>> org.apache.zeppelin.resource.Resource.deserializeObject : virtualinvoke r1.<java.io.InputStream: void close()>()
org.apache.zeppelin.resource.Resource.deserializeObject : virtualinvoke r1.<java.io.InputStream: void close()>() >>>>>>>> org.apache.zeppelin.resource.Resource.deserializeObject : return r4
