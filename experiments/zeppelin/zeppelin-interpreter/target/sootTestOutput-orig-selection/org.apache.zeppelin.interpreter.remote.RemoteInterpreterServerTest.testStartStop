org.apache.zeppelin.interpreter.InterpreterGroup.close : $r1 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close interpreter group ")
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Close interpreter group ") >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : entermonitor r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null
org.apache.zeppelin.interpreter.InterpreterGroup.getId : if $r4 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2
org.apache.zeppelin.interpreter.InterpreterGroup.getId : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6
org.apache.zeppelin.interpreter.InterpreterGroup.getId : return $r6 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r9)
org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r9) >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : $r2 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender: java.util.List log>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : $r2 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender: java.util.List log> >>>>>>>> org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r10.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r10.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : r3 = $r10
org.apache.zeppelin.interpreter.InterpreterGroup.close : r3 = $r10 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r11 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r11 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : r4 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : r4 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterGroup.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : r5 = (java.util.List) $r12
org.apache.zeppelin.interpreter.InterpreterGroup.close : r5 = (java.util.List) $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>(r5)
org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>(r5) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterGroup.close : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Collection)>(r3)
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Collection)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(null, null, null, r1)
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(null, null, null, r1) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null
org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = new org.apache.zeppelin.interpreter.InterpreterGroup$1
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = new org.apache.zeppelin.interpreter.InterpreterGroup$1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterGroup$1: void <init>(org.apache.zeppelin.interpreter.InterpreterGroup,java.util.Collection,java.util.Map,java.lang.String,java.lang.String)>(r0, r4, r1, r2, r3)
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke $r7.<org.apache.zeppelin.interpreter.InterpreterGroup$1: void <init>(org.apache.zeppelin.interpreter.InterpreterGroup,java.util.Collection,java.util.Map,java.lang.String,java.lang.String)>(r0, r4, r1, r2, r3) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : r5 = $r7
org.apache.zeppelin.interpreter.InterpreterGroup.close : r5 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void start()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void start()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void join()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void join()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Collection val$intpToClose>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Collection val$intpToClose> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : r2 = (org.apache.zeppelin.interpreter.Interpreter) $r5
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : r2 = (org.apache.zeppelin.interpreter.Interpreter) $r5 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : r3 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : r3 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: int maxPoolSize>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: int maxPoolSize> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getInterpreterProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getInterpreterGroup : $r1 = r0.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup>
org.apache.zeppelin.interpreter.Interpreter.getInterpreterGroup : $r1 = r0.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup> >>>>>>>> org.apache.zeppelin.interpreter.Interpreter.getInterpreterGroup : return $r1
org.apache.zeppelin.interpreter.Interpreter.getInterpreterGroup : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : if r1 != null
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : if r1 != null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : r2 = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : r2 = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : entermonitor r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : entermonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : $r6 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : $r6 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getRemoteInterpreterProcess : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.InterpreterGroup.getRemoteInterpreterProcess : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.getRemoteInterpreterProcess : return $r1
org.apache.zeppelin.interpreter.InterpreterGroup.getRemoteInterpreterProcess : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : if $r6 != null
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : if $r6 != null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : $r19 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : $r19 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : exitmonitor r2
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : return $r19
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : return $r19 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : if r1 != null
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : if r1 != null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.singleton : $r0 = <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton>
org.apache.zeppelin.scheduler.SchedulerFactory.singleton : $r0 = <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton> >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.singleton : if $r0 != null
org.apache.zeppelin.scheduler.SchedulerFactory.singleton : if $r0 != null >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.singleton : $r11 = <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton>
org.apache.zeppelin.scheduler.SchedulerFactory.singleton : $r11 = <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton> >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.singleton : return $r11
org.apache.zeppelin.scheduler.SchedulerFactory.singleton : return $r11 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r2 = new java.lang.StringBuilder
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r4 = class "org/apache/zeppelin/interpreter/remote/RemoteInterpreter"
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r4 = class "org/apache/zeppelin/interpreter/remote/RemoteInterpreter" >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r7 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionKey>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r7 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionKey> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r11 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionKey>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r11 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionKey> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r12 = virtualinvoke $r3.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler createOrGetRemoteScheduler(java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess,int)>($r10, $r11, r1, i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r12 = virtualinvoke $r3.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler createOrGetRemoteScheduler(java.lang.String,java.lang.String,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess,int)>($r10, $r11, r1, i0) >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r7 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r7 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers> >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : r4 = $r7
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : r4 = $r7 >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : entermonitor $r7
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : entermonitor $r7 >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r8 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r8 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers> >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $z0 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $z0 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : if $z0 != 0
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : if $z0 != 0 >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r9 = new org.apache.zeppelin.scheduler.RemoteScheduler
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r9 = new org.apache.zeppelin.scheduler.RemoteScheduler >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r10 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.concurrent.ExecutorService executor>
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r10 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : specialinvoke $r9.<org.apache.zeppelin.scheduler.RemoteScheduler: void <init>(java.lang.String,java.util.concurrent.ExecutorService,java.lang.String,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess,org.apache.zeppelin.scheduler.SchedulerListener,int)>(r1, $r10, r2, r3, r0, i0)
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : specialinvoke $r9.<org.apache.zeppelin.scheduler.RemoteScheduler: void <init>(java.lang.String,java.util.concurrent.ExecutorService,java.lang.String,org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess,org.apache.zeppelin.scheduler.SchedulerListener,int)>(r1, $r10, r2, r3, r0, i0) >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : r5 = $r9
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : r5 = $r9 >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r11 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r11 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers> >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5)
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5) >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r13 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.concurrent.ExecutorService executor>
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r13 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : interfaceinvoke $r13.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r5)
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : interfaceinvoke $r13.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r5) >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 0
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z0 != 0 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : n0 = null
org.apache.zeppelin.scheduler.RemoteScheduler.run : n0 = null >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : r1 = $r6
org.apache.zeppelin.scheduler.RemoteScheduler.run : r1 = $r6 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r6
org.apache.zeppelin.scheduler.RemoteScheduler.run : entermonitor $r6 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r7.<java.util.List: int size()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i0 = interfaceinvoke $r7.<java.util.List: int size()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $i1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: int maxConcurrency> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $i0 >= $i1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r8 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z1 != 1
org.apache.zeppelin.scheduler.RemoteScheduler.run : if $z1 != 1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : $r9 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r9 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r9.<java.lang.Object: void wait(long)>(500L)
org.apache.zeppelin.scheduler.RemoteScheduler.run : virtualinvoke $r9.<java.lang.Object: void wait(long)>(500L) >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r14 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r14 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers> >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r16 = (org.apache.zeppelin.scheduler.Scheduler) $r15
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r16 = (org.apache.zeppelin.scheduler.Scheduler) $r15 >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : exitmonitor r4
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : exitmonitor r4 >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : return $r16
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : return $r16 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : return $r12
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : return $r12 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: void close()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r2 = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r2 = r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : entermonitor r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : entermonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r10 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionKey>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r10 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionKey> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r11 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>($r10)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r11 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.Object get(java.lang.Object)>($r10) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r3 = (java.util.List) $r11
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r3 = (java.util.List) $r11 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean initialized>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean initialized> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r13 = new java.util.ArrayList
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r13 = new java.util.ArrayList >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>(r3)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>(r3) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r4 = virtualinvoke $r13.<java.util.ArrayList: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r4 = virtualinvoke $r13.<java.util.ArrayList: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z1 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z1 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r5 = (org.apache.zeppelin.interpreter.Interpreter) $r14
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r5 = (org.apache.zeppelin.interpreter.Interpreter) $r14 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r6 = r5
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r6 = r5 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z2 = r6 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z2 = r6 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z2 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : if $z2 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r16 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreter) r6
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r16 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreter) r6 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : virtualinvoke $r16.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void closeInterpreter()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : virtualinvoke $r16.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: void closeInterpreter()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.closeInterpreter : $z1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean initialized>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.closeInterpreter : $z1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean initialized> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.closeInterpreter : if $z1 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.closeInterpreter : if $z1 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : goto [?= (branch)]
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : exitmonitor r2
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : exitmonitor r2 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : goto [?= return]
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if null == r3
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if null == r3 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r6 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r6 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r7 = interfaceinvoke r3.<org.apache.zeppelin.scheduler.Scheduler: java.lang.String getName()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r7 = interfaceinvoke r3.<org.apache.zeppelin.scheduler.Scheduler: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getName : $r1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.lang.String name>
org.apache.zeppelin.scheduler.RemoteScheduler.getName : $r1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.lang.String name> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.getName : return $r1
org.apache.zeppelin.scheduler.RemoteScheduler.getName : return $r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : virtualinvoke $r6.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler removeScheduler(java.lang.String)>($r7)
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : virtualinvoke $r6.<org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.Scheduler removeScheduler(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : $r5 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : $r5 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers> >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : r2 = $r5
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : r2 = $r5 >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : entermonitor $r5
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : entermonitor $r5 >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : $r6 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : $r6 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers> >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : r3 = (org.apache.zeppelin.scheduler.Scheduler) $r7
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : r3 = (org.apache.zeppelin.scheduler.Scheduler) $r7 >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : if r3 == null
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : if r3 == null >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : interfaceinvoke r3.<org.apache.zeppelin.scheduler.Scheduler: void stop()>()
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : interfaceinvoke r3.<org.apache.zeppelin.scheduler.Scheduler: void stop()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> = 1
org.apache.zeppelin.scheduler.RemoteScheduler.stop : r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> = 1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : r1 = $r3
org.apache.zeppelin.scheduler.RemoteScheduler.stop : r1 = $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : entermonitor $r3
org.apache.zeppelin.scheduler.RemoteScheduler.stop : entermonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue> >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : virtualinvoke $r4.<java.lang.Object: void notify()>()
org.apache.zeppelin.scheduler.RemoteScheduler.stop : virtualinvoke $r4.<java.lang.Object: void notify()>() >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : exitmonitor r1
org.apache.zeppelin.scheduler.RemoteScheduler.stop : exitmonitor r1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.stop : goto [?= return]
org.apache.zeppelin.scheduler.RemoteScheduler.stop : goto [?= return] >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : exitmonitor r2
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : exitmonitor r2 >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : goto [?= return null]
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : goto [?= return null] >>>>>>>> org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : return null
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : return null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r10 = $r9.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r10 = $r9.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if $r10 == null
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if $r10 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r12 = $r11.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r12 = $r11.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $i0 = virtualinvoke $r12.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: int referenceCount()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $i0 = virtualinvoke $r12.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: int referenceCount()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.util.concurrent.atomic.AtomicInteger referenceCount>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.util.concurrent.atomic.AtomicInteger referenceCount> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : r1 = $r3
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : r1 = $r3 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : entermonitor $r3
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : entermonitor $r3 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor r1]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor r1] >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor r1
org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor r1 >>>>>>>> org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>]
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : $r4 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.util.concurrent.atomic.AtomicInteger referenceCount>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : $r4 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.util.concurrent.atomic.AtomicInteger referenceCount> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : $i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : $i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : exitmonitor r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : return $i0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : return $i0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if $i0 > 0
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if $i0 > 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r13.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> = null
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r13.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> = null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r14 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map access$000()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r14 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map access$000()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.access$000 : $r0 = <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map allInterpreterGroups>
org.apache.zeppelin.interpreter.InterpreterGroup.access$000 : $r0 = <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map allInterpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.access$000 : return $r0
org.apache.zeppelin.interpreter.InterpreterGroup.access$000 : return $r0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r15 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r16 = $r15.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r16 = $r15.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r16)
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r18 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Map val$interpreterGroupRef>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r18 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Map val$interpreterGroupRef> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if null == $r18
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if null == $r18 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterGroup.close : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : if $r13 == null
org.apache.zeppelin.interpreter.InterpreterGroup.close : if $r13 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r16 = <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map allInterpreterGroups>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r16 = <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map allInterpreterGroups> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r17 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r16.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r17)
org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke $r16.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r17) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : $r0 = new java.net.ServerSocket
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : $r0 = new java.net.ServerSocket >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : specialinvoke $r0.<java.net.ServerSocket: void <init>(int)>(0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : specialinvoke $r0.<java.net.ServerSocket: void <init>(int)>(0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : r1 = $r0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : r1 = $r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : r2 = null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : r2 = null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : i0 = virtualinvoke r1.<java.net.ServerSocket: int getLocalPort()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : i0 = virtualinvoke r1.<java.net.ServerSocket: int getLocalPort()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : virtualinvoke r1.<java.net.ServerSocket: void close()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : virtualinvoke r1.<java.net.ServerSocket: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : if r1 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : if r1 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : if r2 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : if r2 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : goto [?= return i0]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : goto [?= return i0] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : return i0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : return i0 >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r1 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$createInterpreter
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r1 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$createInterpreter >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r1.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$createInterpreter: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r1.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$createInterpreter: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("createInterpreter", $r1)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("createInterpreter", $r1) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r3 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$open
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r3 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$open >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r3.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$open: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r3.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$open: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("open", $r3)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("open", $r3) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r5 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$close
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r5 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$close >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r5.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$close: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r5.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$close: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("close", $r5)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("close", $r5) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r7 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$interpret
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r7 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$interpret >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r7.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$interpret: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r7.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$interpret: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("interpret", $r7)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("interpret", $r7) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r9 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$cancel
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r9 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$cancel >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r9.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$cancel: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r9.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$cancel: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cancel", $r9)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cancel", $r9) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r11 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getProgress
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r11 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getProgress >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r11.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getProgress: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r11.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getProgress: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getProgress", $r11)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getProgress", $r11) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r13 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getFormType
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r13 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getFormType >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r13.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getFormType: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r13.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getFormType: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getFormType", $r13)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getFormType", $r13) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r15 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$completion
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r15 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$completion >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r15.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$completion: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r15.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$completion: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("completion", $r15)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("completion", $r15) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r17 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$shutdown
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r17 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$shutdown >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r17.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$shutdown: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r17.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$shutdown: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("shutdown", $r17)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("shutdown", $r17) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r19 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getStatus
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r19 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getStatus >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r19.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getStatus: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r19.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getStatus: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getStatus", $r19)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getStatus", $r19) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r21 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getEvent
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r21 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getEvent >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r21.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getEvent: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r21.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getEvent: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getEvent", $r21)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("getEvent", $r21) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r23 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourcePoolResponseGetAll
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r23 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourcePoolResponseGetAll >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r23.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourcePoolResponseGetAll: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r23.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourcePoolResponseGetAll: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourcePoolResponseGetAll", $r23)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourcePoolResponseGetAll", $r23) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r25 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceResponseGet
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r25 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceResponseGet >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r25.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceResponseGet: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r25.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceResponseGet: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourceResponseGet", $r25)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourceResponseGet", $r25) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r27 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceResponseInvokeMethod
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r27 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceResponseInvokeMethod >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r27.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceResponseInvokeMethod: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r27.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceResponseInvokeMethod: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourceResponseInvokeMethod", $r27)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourceResponseInvokeMethod", $r27) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r29 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourcePoolGetAll
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r29 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourcePoolGetAll >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r29.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourcePoolGetAll: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r29.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourcePoolGetAll: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourcePoolGetAll", $r29)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourcePoolGetAll", $r29) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r31 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceGet
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r31 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceGet >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r31.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceGet: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r31.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceGet: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourceGet", $r31)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourceGet", $r31) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r33 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceRemove
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r33 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceRemove >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r33.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceRemove: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r33.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceRemove: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourceRemove", $r33)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourceRemove", $r33) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r35 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceInvokeMethod
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r35 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceInvokeMethod >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r35.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceInvokeMethod: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r35.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceInvokeMethod: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourceInvokeMethod", $r35)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("resourceInvokeMethod", $r35) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r37 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectUpdate
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r37 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectUpdate >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r37.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectUpdate: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r37.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectUpdate: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("angularObjectUpdate", $r37)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("angularObjectUpdate", $r37) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r39 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectAdd
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r39 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectAdd >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r39.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectAdd: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r39.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectAdd: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("angularObjectAdd", $r39)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("angularObjectAdd", $r39) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r41 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectRemove
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r41 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectRemove >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r41.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectRemove: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r41.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectRemove: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("angularObjectRemove", $r41)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("angularObjectRemove", $r41) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r43 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularRegistryPush
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r43 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularRegistryPush >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r43.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularRegistryPush: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r43.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularRegistryPush: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("angularRegistryPush", $r43)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("angularRegistryPush", $r43) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r45 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$loadApplication
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r45 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$loadApplication >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r45.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$loadApplication: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r45.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$loadApplication: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("loadApplication", $r45)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("loadApplication", $r45) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r47 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$unloadApplication
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r47 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$unloadApplication >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r47.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$unloadApplication: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r47.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$unloadApplication: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("unloadApplication", $r47)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("unloadApplication", $r47) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r49 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$runApplication
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r49 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$runApplication >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r49.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$runApplication: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r49.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$runApplication: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("runApplication", $r49)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("runApplication", $r49) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r51 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$onReceivedZeppelinResource
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r51 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$onReceivedZeppelinResource >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r51.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$onReceivedZeppelinResource: void <init>()>()
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : specialinvoke $r51.<org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$onReceivedZeppelinResource: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("onReceivedZeppelinResource", $r51)
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("onReceivedZeppelinResource", $r51) >>>>>>>> org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : return r0
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : return r0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : if $r1 != null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : if $r1 != null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : $r2 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : $r2 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : $z0 = virtualinvoke $r2.<org.apache.thrift.server.TThreadPoolServer: boolean isServing()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : $z0 = virtualinvoke $r2.<org.apache.thrift.server.TThreadPoolServer: boolean isServing()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : return $z0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: int port>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: int port> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Starting remote interpreter server on port {}", $r2)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Starting remote interpreter server on port {}", $r2) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : virtualinvoke $r3.<org.apache.thrift.server.TThreadPoolServer: void serve()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : virtualinvoke $r3.<org.apache.thrift.server.TThreadPoolServer: void serve()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.getPort : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: int port>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.getPort : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: int port> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.getPort : return $i0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.getPort : return $i0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r1 = new java.net.Socket
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r1 = new java.net.Socket >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r1.<java.net.Socket: void <init>()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r1.<java.net.Socket: void <init>()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : r2 = $r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : r2 = $r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void setSoTimeout(int)>(1000)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void setSoTimeout(int)>(1000) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r3 = new java.net.InetSocketAddress
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r3 = new java.net.InetSocketAddress >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r0, i0)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r0, i0) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r3, 1000)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r3, 1000) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void close()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void close()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $z0 = 1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $z0 = 1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : return $z0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : return $z0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r2 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient eventClient>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r2 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient eventClient> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : virtualinvoke $r2.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient: void waitForEventQueueBecomesEmpty()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : virtualinvoke $r2.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient: void waitForEventQueueBecomesEmpty()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : $r4 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient: java.util.List eventQueue>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : $r4 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient: java.util.List eventQueue> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : r1 = $r4
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : r1 = $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : entermonitor $r4
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : entermonitor $r4 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient: java.util.List eventQueue>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient: java.util.List eventQueue> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : if $z0 != 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : if $z0 != 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : exitmonitor r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : goto [?= return]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : goto [?= return] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : if $r3 == null
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : if $r3 == null >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : virtualinvoke $r5.<org.apache.thrift.server.TThreadPoolServer: void stop()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : virtualinvoke $r5.<org.apache.thrift.server.TThreadPoolServer: void stop()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $l2 = $l1 - l0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $l2 = $l1 - l0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $b3 = $l2 cmp 2000L
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $b3 = $l2 cmp 2000L >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : if $b3 >= 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : if $b3 >= 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r6 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $z0 = virtualinvoke $r6.<org.apache.thrift.server.TThreadPoolServer: boolean isServing()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $z0 = virtualinvoke $r6.<org.apache.thrift.server.TThreadPoolServer: boolean isServing()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : if $z0 == 0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : staticinvoke <java.lang.Thread: void sleep(long)>(300L)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : staticinvoke <java.lang.Thread: void sleep(long)>(300L) >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : goto [?= $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : goto [?= $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()] >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r9 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r9 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server> >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $z1 = virtualinvoke $r9.<org.apache.thrift.server.TThreadPoolServer: boolean isServing()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $z1 = virtualinvoke $r9.<org.apache.thrift.server.TThreadPoolServer: boolean isServing()>() >>>>>>>> org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : if $z1 == 0
