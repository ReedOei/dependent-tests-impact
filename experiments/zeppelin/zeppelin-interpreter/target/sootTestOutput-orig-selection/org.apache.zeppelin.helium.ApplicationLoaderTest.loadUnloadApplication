org.apache.zeppelin.dep.Booter.newRepositorySystem : $r0 = staticinvoke <org.apache.zeppelin.dep.RepositorySystemFactory: org.sonatype.aether.RepositorySystem newRepositorySystem()>() >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r0 = new org.apache.maven.repository.internal.DefaultServiceLocator
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r0 = new org.apache.maven.repository.internal.DefaultServiceLocator >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : specialinvoke $r0.<org.apache.maven.repository.internal.DefaultServiceLocator: void <init>()>()
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : specialinvoke $r0.<org.apache.maven.repository.internal.DefaultServiceLocator: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : r1 = $r0
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : r1 = $r0 >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator addService(java.lang.Class,java.lang.Class)>(class "org/sonatype/aether/spi/connector/RepositoryConnectorFactory", class "org/sonatype/aether/connector/file/FileRepositoryConnectorFactory")
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator addService(java.lang.Class,java.lang.Class)>(class "org/sonatype/aether/spi/connector/RepositoryConnectorFactory", class "org/sonatype/aether/connector/file/FileRepositoryConnectorFactory") >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator addService(java.lang.Class,java.lang.Class)>(class "org/sonatype/aether/spi/connector/RepositoryConnectorFactory", class "org/sonatype/aether/connector/wagon/WagonRepositoryConnectorFactory")
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator addService(java.lang.Class,java.lang.Class)>(class "org/sonatype/aether/spi/connector/RepositoryConnectorFactory", class "org/sonatype/aether/connector/wagon/WagonRepositoryConnectorFactory") >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r5 = newarray (org.sonatype.aether.connector.wagon.WagonProvider)[1]
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r5 = newarray (org.sonatype.aether.connector.wagon.WagonProvider)[1] >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r2 = new org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r2 = new org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : specialinvoke $r2.<org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider: void <init>()>()
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : specialinvoke $r2.<org.apache.zeppelin.dep.RepositorySystemFactory$ManualWagonProvider: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r5[0] = $r2
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r5[0] = $r2 >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator setServices(java.lang.Class,java.lang.Object[])>(class "org/sonatype/aether/connector/wagon/WagonProvider", $r5)
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator setServices(java.lang.Class,java.lang.Object[])>(class "org/sonatype/aether/connector/wagon/WagonProvider", $r5) >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r7 = virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: java.lang.Object getService(java.lang.Class)>(class "org/sonatype/aether/RepositorySystem")
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r7 = virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: java.lang.Object getService(java.lang.Class)>(class "org/sonatype/aether/RepositorySystem") >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r8 = (org.sonatype.aether.RepositorySystem) $r7
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r8 = (org.sonatype.aether.RepositorySystem) $r7 >>>>>>>> org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : return $r8
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : return $r8 >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystem : return $r0
org.apache.zeppelin.dep.Booter.newRepositorySystem : return $r0 >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "localRepoPath should have a value")
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "localRepoPath should have a value") >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r4 = new org.apache.maven.repository.internal.MavenRepositorySystemSession
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r4 = new org.apache.maven.repository.internal.MavenRepositorySystemSession >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : specialinvoke $r4.<org.apache.maven.repository.internal.MavenRepositorySystemSession: void <init>()>()
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : specialinvoke $r4.<org.apache.maven.repository.internal.MavenRepositorySystemSession: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : r2 = $r4
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : r2 = $r4 >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r5 = new org.sonatype.aether.repository.LocalRepository
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r5 = new org.sonatype.aether.repository.LocalRepository >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r6 = staticinvoke <org.apache.zeppelin.dep.Booter: java.lang.String resolveLocalRepoPath(java.lang.String)>(r1)
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r6 = staticinvoke <org.apache.zeppelin.dep.Booter: java.lang.String resolveLocalRepoPath(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_HOME")
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_HOME") >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : if r1 != null
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : if r1 != null >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zeppelin.home")
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zeppelin.home") >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = ".."
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = ".." >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r2 = newarray (java.lang.String)[0]
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r2 = newarray (java.lang.String)[0] >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r3 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r1, $r2)
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r3 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r1, $r2) >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r4 = interfaceinvoke $r3.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(r0)
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r4 = interfaceinvoke $r3.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(r0) >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r5 = interfaceinvoke $r4.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>()
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r5 = interfaceinvoke $r4.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>() >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r6 = interfaceinvoke $r5.<java.nio.file.Path: java.lang.String toString()>()
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r6 = interfaceinvoke $r5.<java.nio.file.Path: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : return $r6
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : return $r6 >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : specialinvoke $r5.<org.sonatype.aether.repository.LocalRepository: void <init>(java.lang.String)>($r6)
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : specialinvoke $r5.<org.sonatype.aether.repository.LocalRepository: void <init>(java.lang.String)>($r6) >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : r3 = $r5
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : r3 = $r5 >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r7 = interfaceinvoke r0.<org.sonatype.aether.RepositorySystem: org.sonatype.aether.repository.LocalRepositoryManager newLocalRepositoryManager(org.sonatype.aether.repository.LocalRepository)>(r3)
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r7 = interfaceinvoke r0.<org.sonatype.aether.RepositorySystem: org.sonatype.aether.repository.LocalRepositoryManager newLocalRepositoryManager(org.sonatype.aether.repository.LocalRepository)>(r3) >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : virtualinvoke r2.<org.apache.maven.repository.internal.MavenRepositorySystemSession: org.sonatype.aether.util.DefaultRepositorySystemSession setLocalRepositoryManager(org.sonatype.aether.repository.LocalRepositoryManager)>($r7)
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : virtualinvoke r2.<org.apache.maven.repository.internal.MavenRepositorySystemSession: org.sonatype.aether.util.DefaultRepositorySystemSession setLocalRepositoryManager(org.sonatype.aether.repository.LocalRepositoryManager)>($r7) >>>>>>>> org.apache.zeppelin.dep.Booter.newRepositorySystemSession : return r2
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : return r2 >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_INTERPRETER_DEP_MVNREPO")
org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_INTERPRETER_DEP_MVNREPO") >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : if r0 != null
org.apache.zeppelin.dep.Booter.newCentralRepository : if r0 != null >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zeppelin.interpreter.dep.mvnRepo")
org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zeppelin.interpreter.dep.mvnRepo") >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = "http://repo1.maven.org/maven2/"
org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = "http://repo1.maven.org/maven2/" >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : $r1 = new org.sonatype.aether.repository.RemoteRepository
org.apache.zeppelin.dep.Booter.newCentralRepository : $r1 = new org.sonatype.aether.repository.RemoteRepository >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : specialinvoke $r1.<org.sonatype.aether.repository.RemoteRepository: void <init>(java.lang.String,java.lang.String,java.lang.String)>("central", "default", r0)
org.apache.zeppelin.dep.Booter.newCentralRepository : specialinvoke $r1.<org.sonatype.aether.repository.RemoteRepository: void <init>(java.lang.String,java.lang.String,java.lang.String)>("central", "default", r0) >>>>>>>> org.apache.zeppelin.dep.Booter.newCentralRepository : return $r1
org.apache.zeppelin.dep.Booter.newCentralRepository : return $r1 >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r0 = new org.sonatype.aether.repository.RemoteRepository
org.apache.zeppelin.dep.Booter.newLocalRepository : $r0 = new org.sonatype.aether.repository.RemoteRepository >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r1 = new java.lang.StringBuilder
org.apache.zeppelin.dep.Booter.newLocalRepository : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.dep.Booter.newLocalRepository : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://")
org.apache.zeppelin.dep.Booter.newLocalRepository : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://") >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home")
org.apache.zeppelin.dep.Booter.newLocalRepository : $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home") >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.apache.zeppelin.dep.Booter.newLocalRepository : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.m2/repository")
org.apache.zeppelin.dep.Booter.newLocalRepository : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.m2/repository") >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.dep.Booter.newLocalRepository : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : specialinvoke $r0.<org.sonatype.aether.repository.RemoteRepository: void <init>(java.lang.String,java.lang.String,java.lang.String)>("local", "default", $r6)
org.apache.zeppelin.dep.Booter.newLocalRepository : specialinvoke $r0.<org.sonatype.aether.repository.RemoteRepository: void <init>(java.lang.String,java.lang.String,java.lang.String)>("local", "default", $r6) >>>>>>>> org.apache.zeppelin.dep.Booter.newLocalRepository : return $r0
org.apache.zeppelin.dep.Booter.newLocalRepository : return $r0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : $r3 = new org.apache.zeppelin.helium.HeliumPackage
org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : $r3 = new org.apache.zeppelin.helium.HeliumPackage >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : $r4 = <org.apache.zeppelin.helium.HeliumType: org.apache.zeppelin.helium.HeliumType APPLICATION>
org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : $r4 = <org.apache.zeppelin.helium.HeliumType: org.apache.zeppelin.helium.HeliumType APPLICATION> >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : $r6 = newarray (java.lang.String[])[1]
org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : $r6 = newarray (java.lang.String[])[1] >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : $r7 = newarray (java.lang.String)[0]
org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : $r7 = newarray (java.lang.String)[0] >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : $r6[0] = $r7
org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : $r6[0] = $r7 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : specialinvoke $r3.<org.apache.zeppelin.helium.HeliumPackage: void <init>(org.apache.zeppelin.helium.HeliumType,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[][],java.lang.String,java.lang.String)>($r4, "name1", "desc1", r2, r1, $r6, "license", "icon")
org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : specialinvoke $r3.<org.apache.zeppelin.helium.HeliumPackage: void <init>(org.apache.zeppelin.helium.HeliumType,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[][],java.lang.String,java.lang.String)>($r4, "name1", "desc1", r2, r1, $r6, "license", "icon") >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : r5 = $r3
org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : r5 = $r3 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : return r5
org.apache.zeppelin.helium.ApplicationLoaderTest.createPackageInfo : return r5 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : $r4 = new org.apache.zeppelin.helium.ApplicationContext
org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : $r4 = new org.apache.zeppelin.helium.ApplicationContext >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : $r5 = new org.apache.zeppelin.interpreter.InterpreterOutput
org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : $r5 = new org.apache.zeppelin.interpreter.InterpreterOutput >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : specialinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterOutput: void <init>(org.apache.zeppelin.interpreter.InterpreterOutputListener)>(null)
org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : specialinvoke $r5.<org.apache.zeppelin.interpreter.InterpreterOutput: void <init>(org.apache.zeppelin.interpreter.InterpreterOutputListener)>(null) >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: int size> = 0
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: int size> = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean truncated> = 0
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean truncated> = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.io.ByteArrayOutputStream buffer>
org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>()
org.apache.zeppelin.interpreter.InterpreterOutput.clear : virtualinvoke $r6.<java.io.ByteArrayOutputStream: void reset()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs>
org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r1 = $r7
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r1 = $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : entermonitor $r7
org.apache.zeppelin.interpreter.InterpreterOutput.clear : entermonitor $r7 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs>
org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r8 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r2 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r2 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.interpreter.InterpreterOutput.clear : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : if $z0 == 0
org.apache.zeppelin.interpreter.InterpreterOutput.clear : if $z0 == 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs>
org.apache.zeppelin.interpreter.InterpreterOutput.clear : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: java.util.List resultMessageOutputs> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : interfaceinvoke $r13.<java.util.List: void clear()>()
org.apache.zeppelin.interpreter.InterpreterOutput.clear : interfaceinvoke $r13.<java.util.List: void clear()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: org.apache.zeppelin.interpreter.InterpreterResultMessageOutput currentOut> = null
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: org.apache.zeppelin.interpreter.InterpreterResultMessageOutput currentOut> = null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean startOfTheNewLine> = 1
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean startOfTheNewLine> = 1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean firstCharIsPercentSign> = 0
org.apache.zeppelin.interpreter.InterpreterOutput.clear : r0.<org.apache.zeppelin.interpreter.InterpreterOutput: boolean firstCharIsPercentSign> = 0 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterOutput: void updateAllResultMessages()>()
org.apache.zeppelin.interpreter.InterpreterOutput.clear : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterOutput: void updateAllResultMessages()>() >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.updateAllResultMessages : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: org.apache.zeppelin.interpreter.InterpreterOutputListener flushListener>
org.apache.zeppelin.interpreter.InterpreterOutput.updateAllResultMessages : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterOutput: org.apache.zeppelin.interpreter.InterpreterOutputListener flushListener> >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.updateAllResultMessages : if $r1 == null
org.apache.zeppelin.interpreter.InterpreterOutput.updateAllResultMessages : if $r1 == null >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : exitmonitor r1
org.apache.zeppelin.interpreter.InterpreterOutput.clear : exitmonitor r1 >>>>>>>> org.apache.zeppelin.interpreter.InterpreterOutput.clear : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterOutput.clear : goto [?= return] >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : specialinvoke $r4.<org.apache.zeppelin.helium.ApplicationContext: void <init>(java.lang.String,java.lang.String,java.lang.String,org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry,org.apache.zeppelin.interpreter.InterpreterOutput)>(r1, r2, r3, null, $r5)
org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : specialinvoke $r4.<org.apache.zeppelin.helium.ApplicationContext: void <init>(java.lang.String,java.lang.String,java.lang.String,org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry,org.apache.zeppelin.interpreter.InterpreterOutput)>(r1, r2, r3, null, $r5) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : r6 = $r4
org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : r6 = $r4 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : return r6
org.apache.zeppelin.helium.ApplicationLoaderTest.createContext : return r6 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r14 = virtualinvoke r1.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType getType()>()
org.apache.zeppelin.helium.ApplicationLoader.load : $r14 = virtualinvoke r1.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType getType()>() >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getType : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType type>
org.apache.zeppelin.helium.HeliumPackage.getType : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType type> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getType : return $r1
org.apache.zeppelin.helium.HeliumPackage.getType : return $r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r3 = <org.apache.zeppelin.helium.HeliumType: org.apache.zeppelin.helium.HeliumType APPLICATION>
org.apache.zeppelin.helium.ApplicationLoader.load : $r3 = <org.apache.zeppelin.helium.HeliumType: org.apache.zeppelin.helium.HeliumType APPLICATION> >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : if $r14 == $r3
org.apache.zeppelin.helium.ApplicationLoader.load : if $r14 == $r3 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r21 = new org.apache.zeppelin.helium.ApplicationLoader$RunningApplication
org.apache.zeppelin.helium.ApplicationLoader.load : $r21 = new org.apache.zeppelin.helium.ApplicationLoader$RunningApplication >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r22 = virtualinvoke r2.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String getNoteId()>()
org.apache.zeppelin.helium.ApplicationLoader.load : $r22 = virtualinvoke r2.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String getNoteId()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationContext.getNoteId : $r1 = r0.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String noteId>
org.apache.zeppelin.helium.ApplicationContext.getNoteId : $r1 = r0.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String noteId> >>>>>>>> org.apache.zeppelin.helium.ApplicationContext.getNoteId : return $r1
org.apache.zeppelin.helium.ApplicationContext.getNoteId : return $r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r23 = virtualinvoke r2.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String getParagraphId()>()
org.apache.zeppelin.helium.ApplicationLoader.load : $r23 = virtualinvoke r2.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String getParagraphId()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationContext.getParagraphId : $r1 = r0.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String paragraphId>
org.apache.zeppelin.helium.ApplicationContext.getParagraphId : $r1 = r0.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String paragraphId> >>>>>>>> org.apache.zeppelin.helium.ApplicationContext.getParagraphId : return $r1
org.apache.zeppelin.helium.ApplicationContext.getParagraphId : return $r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : specialinvoke $r21.<org.apache.zeppelin.helium.ApplicationLoader$RunningApplication: void <init>(org.apache.zeppelin.helium.HeliumPackage,java.lang.String,java.lang.String)>(r1, $r22, $r23)
org.apache.zeppelin.helium.ApplicationLoader.load : specialinvoke $r21.<org.apache.zeppelin.helium.ApplicationLoader$RunningApplication: void <init>(org.apache.zeppelin.helium.HeliumPackage,java.lang.String,java.lang.String)>(r1, $r22, $r23) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : r5 = $r21
org.apache.zeppelin.helium.ApplicationLoader.load : r5 = $r21 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r24 = virtualinvoke r1.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String[][] getResources()>()
org.apache.zeppelin.helium.ApplicationLoader.load : $r24 = virtualinvoke r1.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String[][] getResources()>() >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getResources : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String[][] resources>
org.apache.zeppelin.helium.HeliumPackage.getResources : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String[][] resources> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getResources : return $r1
org.apache.zeppelin.helium.HeliumPackage.getResources : return $r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r25 = virtualinvoke r2.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String getNoteId()>()
org.apache.zeppelin.helium.ApplicationLoader.load : $r25 = virtualinvoke r2.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String getNoteId()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r26 = virtualinvoke r2.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String getParagraphId()>()
org.apache.zeppelin.helium.ApplicationLoader.load : $r26 = virtualinvoke r2.<org.apache.zeppelin.helium.ApplicationContext: java.lang.String getParagraphId()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : virtualinvoke r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourceSet findRequiredResourceSet(java.lang.String[][],java.lang.String,java.lang.String)>($r24, $r25, $r26)
org.apache.zeppelin.helium.ApplicationLoader.load : virtualinvoke r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourceSet findRequiredResourceSet(java.lang.String[][],java.lang.String,java.lang.String)>($r24, $r25, $r26) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if r1 == null
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if r1 == null >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i0 = lengthof r1
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i0 = lengthof r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i0 != 0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i0 != 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r6 = r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourcePool resourcePool>
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r6 = r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourcePool resourcePool> >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $z0 = $r6 instanceof org.apache.zeppelin.resource.DistributedResourcePool
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $z0 = $r6 instanceof org.apache.zeppelin.resource.DistributedResourcePool >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $z0 == 0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $z0 == 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r9 = r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourcePool resourcePool>
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r9 = r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourcePool resourcePool> >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r4 = interfaceinvoke $r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>()
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r4 = interfaceinvoke $r9.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>() >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.getAll : $r1 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.resource.LocalResourcePool.getAll : $r1 = new org.apache.zeppelin.resource.ResourceSet >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.getAll : $r2 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources>
org.apache.zeppelin.resource.LocalResourcePool.getAll : $r2 = r0.<org.apache.zeppelin.resource.LocalResourcePool: java.util.Map resources> >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.getAll : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
org.apache.zeppelin.resource.LocalResourcePool.getAll : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.getAll : specialinvoke $r1.<org.apache.zeppelin.resource.ResourceSet: void <init>(java.util.Collection)>($r3)
org.apache.zeppelin.resource.LocalResourcePool.getAll : specialinvoke $r1.<org.apache.zeppelin.resource.ResourceSet: void <init>(java.util.Collection)>($r3) >>>>>>>> org.apache.zeppelin.resource.LocalResourcePool.getAll : return $r1
org.apache.zeppelin.resource.LocalResourcePool.getAll : return $r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r10 = staticinvoke <org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourceSet findRequiredResourceSet(java.lang.String[][],java.lang.String,java.lang.String,org.apache.zeppelin.resource.ResourceSet)>(r1, r2, r3, r4)
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r10 = staticinvoke <org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.resource.ResourceSet findRequiredResourceSet(java.lang.String[][],java.lang.String,java.lang.String,org.apache.zeppelin.resource.ResourceSet)>(r1, r2, r3, r4) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r4 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r4 = new org.apache.zeppelin.resource.ResourceSet >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : specialinvoke $r4.<org.apache.zeppelin.resource.ResourceSet: void <init>()>()
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : specialinvoke $r4.<org.apache.zeppelin.resource.ResourceSet: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r5 = $r4
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r5 = $r4 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if r0 == null
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if r0 == null >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i4 = lengthof r0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i4 = lengthof r0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i4 != 0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i4 != 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r12 = virtualinvoke r3.<org.apache.zeppelin.resource.ResourceSet: org.apache.zeppelin.resource.ResourceSet filterByNoteId(java.lang.String)>(r1)
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $r12 = virtualinvoke r3.<org.apache.zeppelin.resource.ResourceSet: org.apache.zeppelin.resource.ResourceSet filterByNoteId(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : $r2 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : $r2 = new org.apache.zeppelin.resource.ResourceSet >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceSet: void <init>()>()
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceSet: void <init>()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : r3 = $r2
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : r3 = $r2 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>()
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : if $z0 == 0
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByNoteId : return r3
org.apache.zeppelin.resource.ResourceSet.filterByNoteId : return r3 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r13 = virtualinvoke $r12.<org.apache.zeppelin.resource.ResourceSet: org.apache.zeppelin.resource.ResourceSet filterByParagraphId(java.lang.String)>(r2)
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r13 = virtualinvoke $r12.<org.apache.zeppelin.resource.ResourceSet: org.apache.zeppelin.resource.ResourceSet filterByParagraphId(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : $r2 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : $r2 = new org.apache.zeppelin.resource.ResourceSet >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceSet: void <init>()>()
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : specialinvoke $r2.<org.apache.zeppelin.resource.ResourceSet: void <init>()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : r3 = $r2
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : r3 = $r2 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>()
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : if $z0 == 0
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : if $z0 == 0 >>>>>>>> org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : return r3
org.apache.zeppelin.resource.ResourceSet.filterByParagraphId : return r3 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r6 = r0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r6 = r0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i0 = lengthof r6
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i0 = lengthof r6 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i1 = 0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i1 = 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if i1 >= i0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if i1 >= i0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r7 = r6[i1]
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r7 = r6[i1] >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : virtualinvoke r5.<org.apache.zeppelin.resource.ResourceSet: void clear()>()
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : virtualinvoke r5.<org.apache.zeppelin.resource.ResourceSet: void clear()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r8 = r7
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : r8 = r7 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i2 = lengthof r8
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i2 = lengthof r8 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i3 = 0
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : i3 = 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if i3 >= i2
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if i3 >= i2 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i5 = virtualinvoke r5.<org.apache.zeppelin.resource.ResourceSet: int size()>()
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i5 = virtualinvoke r5.<org.apache.zeppelin.resource.ResourceSet: int size()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i6 = lengthof r7
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : $i6 = lengthof r7 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i5 != $i6
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : if $i5 != $i6 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : return r5
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : return r5 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : return $r10
org.apache.zeppelin.helium.ApplicationLoader.findRequiredResourceSet : return $r10 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : r7 = specialinvoke r0.<org.apache.zeppelin.helium.ApplicationLoader: java.lang.Class loadClass(org.apache.zeppelin.helium.HeliumPackage)>(r1)
org.apache.zeppelin.helium.ApplicationLoader.load : r7 = specialinvoke r0.<org.apache.zeppelin.helium.ApplicationLoader: java.lang.Class loadClass(org.apache.zeppelin.helium.HeliumPackage)>(r1) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r6 = r0.<org.apache.zeppelin.helium.ApplicationLoader: java.util.Map cached>
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r6 = r0.<org.apache.zeppelin.helium.ApplicationLoader: java.util.Map cached> >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : if $z0 == 0
org.apache.zeppelin.helium.ApplicationLoader.loadClass : if $z0 == 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r10 = new java.util.LinkedList
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r10 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : specialinvoke $r10.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.helium.ApplicationLoader.loadClass : specialinvoke $r10.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : r2 = $r10
org.apache.zeppelin.helium.ApplicationLoader.loadClass : r2 = $r10 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r11 = virtualinvoke r1.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String getArtifact()>()
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r11 = virtualinvoke r1.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String getArtifact()>() >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getArtifact : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String artifact>
org.apache.zeppelin.helium.HeliumPackage.getArtifact : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String artifact> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getArtifact : return $r1
org.apache.zeppelin.helium.HeliumPackage.getArtifact : return $r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : if $r11 == null
org.apache.zeppelin.helium.ApplicationLoader.loadClass : if $r11 == null >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r12 = r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.dep.DependencyResolver depResolver>
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r12 = r0.<org.apache.zeppelin.helium.ApplicationLoader: org.apache.zeppelin.dep.DependencyResolver depResolver> >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r13 = virtualinvoke r1.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String getArtifact()>()
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r13 = virtualinvoke r1.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String getArtifact()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : r3 = virtualinvoke $r12.<org.apache.zeppelin.dep.DependencyResolver: java.util.List load(java.lang.String)>($r13)
org.apache.zeppelin.helium.ApplicationLoader.loadClass : r3 = virtualinvoke $r12.<org.apache.zeppelin.dep.DependencyResolver: java.util.List load(java.lang.String)>($r13) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r2 = new java.util.LinkedList
org.apache.zeppelin.dep.DependencyResolver.load : $r2 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r2.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r2.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r3 = virtualinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List load(java.lang.String,java.util.Collection)>(r1, $r2)
org.apache.zeppelin.dep.DependencyResolver.load : $r3 = virtualinvoke r0.<org.apache.zeppelin.dep.DependencyResolver: java.util.List load(java.lang.String,java.util.Collection)>(r1, $r2) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r1)
org.apache.zeppelin.dep.DependencyResolver.load : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : if $z0 == 0
org.apache.zeppelin.dep.DependencyResolver.load : if $z0 == 0 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r5 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")
org.apache.zeppelin.dep.DependencyResolver.load : $r5 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : i0 = lengthof $r5
org.apache.zeppelin.dep.DependencyResolver.load : i0 = lengthof $r5 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : if i0 < 3
org.apache.zeppelin.dep.DependencyResolver.load : if i0 < 3 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r7 = new java.util.LinkedList
org.apache.zeppelin.dep.DependencyResolver.load : $r7 = new java.util.LinkedList >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r7.<java.util.LinkedList: void <init>()>()
org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r7.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : r3 = $r7
org.apache.zeppelin.dep.DependencyResolver.load : r3 = $r7 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : $r8 = new java.io.File
org.apache.zeppelin.dep.DependencyResolver.load : $r8 = new java.io.File >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.zeppelin.dep.DependencyResolver.load : specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r8)
org.apache.zeppelin.dep.DependencyResolver.load : virtualinvoke r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r8) >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : return r3
org.apache.zeppelin.dep.DependencyResolver.load : return r3 >>>>>>>> org.apache.zeppelin.dep.DependencyResolver.load : return $r3
org.apache.zeppelin.dep.DependencyResolver.load : return $r3 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : if r3 == null
org.apache.zeppelin.helium.ApplicationLoader.loadClass : if r3 == null >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.helium.ApplicationLoader.loadClass : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : if $z1 == 0
org.apache.zeppelin.helium.ApplicationLoader.loadClass : if $z1 == 0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : r5 = (java.io.File) $r14
org.apache.zeppelin.helium.ApplicationLoader.loadClass : r5 = (java.io.File) $r14 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r15 = virtualinvoke r5.<java.io.File: java.net.URI toURI()>()
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r15 = virtualinvoke r5.<java.io.File: java.net.URI toURI()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r16 = virtualinvoke $r15.<java.net.URI: java.net.URL toURL()>()
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r16 = virtualinvoke $r15.<java.net.URI: java.net.URL toURL()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r16)
org.apache.zeppelin.helium.ApplicationLoader.loadClass : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r16) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.helium.ApplicationLoader.loadClass : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r17 = new java.net.URLClassLoader
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r17 = new java.net.URLClassLoader >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r18 = newarray (java.net.URL)[0]
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r18 = newarray (java.net.URL)[0] >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r19 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r18)
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r19 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r18) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r20 = (java.net.URL[]) $r19
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r20 = (java.net.URL[]) $r19 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r21 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r21 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r22 = virtualinvoke $r21.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r22 = virtualinvoke $r21.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : specialinvoke $r17.<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>($r20, $r22)
org.apache.zeppelin.helium.ApplicationLoader.loadClass : specialinvoke $r17.<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>($r20, $r22) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : r23 = $r17
org.apache.zeppelin.helium.ApplicationLoader.loadClass : r23 = $r17 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r24 = virtualinvoke r1.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String getClassName()>()
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r24 = virtualinvoke r1.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String getClassName()>() >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getClassName : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String className>
org.apache.zeppelin.helium.HeliumPackage.getClassName : $r1 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String className> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.getClassName : return $r1
org.apache.zeppelin.helium.HeliumPackage.getClassName : return $r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : r25 = virtualinvoke r23.<java.net.URLClassLoader: java.lang.Class loadClass(java.lang.String)>($r24)
org.apache.zeppelin.helium.ApplicationLoader.loadClass : r25 = virtualinvoke r23.<java.net.URLClassLoader: java.lang.Class loadClass(java.lang.String)>($r24) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r26 = r0.<org.apache.zeppelin.helium.ApplicationLoader: java.util.Map cached>
org.apache.zeppelin.helium.ApplicationLoader.loadClass : $r26 = r0.<org.apache.zeppelin.helium.ApplicationLoader: java.util.Map cached> >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r25)
org.apache.zeppelin.helium.ApplicationLoader.loadClass : interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r25) >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r1 = new java.lang.StringBuilder
org.apache.zeppelin.helium.HeliumPackage.hashCode : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.helium.HeliumPackage.hashCode : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r2 = r0.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType type>
org.apache.zeppelin.helium.HeliumPackage.hashCode : $r2 = r0.<org.apache.zeppelin.helium.HeliumPackage: org.apache.zeppelin.helium.HeliumType type> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r3 = virtualinvoke $r2.<org.apache.zeppelin.helium.HeliumType: java.lang.String toString()>()
org.apache.zeppelin.helium.HeliumPackage.hashCode : $r3 = virtualinvoke $r2.<org.apache.zeppelin.helium.HeliumType: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.apache.zeppelin.helium.HeliumPackage.hashCode : $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r5 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String artifact>
org.apache.zeppelin.helium.HeliumPackage.hashCode : $r5 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String artifact> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.zeppelin.helium.HeliumPackage.hashCode : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r7 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String className>
org.apache.zeppelin.helium.HeliumPackage.hashCode : $r7 = r0.<org.apache.zeppelin.helium.HeliumPackage: java.lang.String className> >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.zeppelin.helium.HeliumPackage.hashCode : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.helium.HeliumPackage.hashCode : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : $i0 = virtualinvoke $r9.<java.lang.String: int hashCode()>()
org.apache.zeppelin.helium.HeliumPackage.hashCode : $i0 = virtualinvoke $r9.<java.lang.String: int hashCode()>() >>>>>>>> org.apache.zeppelin.helium.HeliumPackage.hashCode : return $i0
org.apache.zeppelin.helium.HeliumPackage.hashCode : return $i0 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.loadClass : return r25
org.apache.zeppelin.helium.ApplicationLoader.loadClass : return r25 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r27 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.helium.ApplicationLoader.load : $r27 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : r8 = virtualinvoke $r27.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>()
org.apache.zeppelin.helium.ApplicationLoader.load : r8 = virtualinvoke $r27.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : r9 = virtualinvoke r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.zeppelin.helium.ApplicationLoader.load : r9 = virtualinvoke r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r28 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.helium.ApplicationLoader.load : $r28 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : virtualinvoke $r28.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r9)
org.apache.zeppelin.helium.ApplicationLoader.load : virtualinvoke $r28.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r9) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r29 = newarray (java.lang.Class)[1]
org.apache.zeppelin.helium.ApplicationLoader.load : $r29 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r29[0] = class "org/apache/zeppelin/helium/ApplicationContext"
org.apache.zeppelin.helium.ApplicationLoader.load : $r29[0] = class "org/apache/zeppelin/helium/ApplicationContext" >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : r10 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r29)
org.apache.zeppelin.helium.ApplicationLoader.load : r10 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r29) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r30 = new org.apache.zeppelin.helium.ClassLoaderApplication
org.apache.zeppelin.helium.ApplicationLoader.load : $r30 = new org.apache.zeppelin.helium.ClassLoaderApplication >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r31 = newarray (java.lang.Object)[1]
org.apache.zeppelin.helium.ApplicationLoader.load : $r31 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r31[0] = r2
org.apache.zeppelin.helium.ApplicationLoader.load : $r31[0] = r2 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r32 = virtualinvoke r10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r31)
org.apache.zeppelin.helium.ApplicationLoader.load : $r32 = virtualinvoke r10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r31) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r33 = (org.apache.zeppelin.helium.Application) $r32
org.apache.zeppelin.helium.ApplicationLoader.load : $r33 = (org.apache.zeppelin.helium.Application) $r32 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : specialinvoke $r30.<org.apache.zeppelin.helium.ClassLoaderApplication: void <init>(org.apache.zeppelin.helium.Application,java.lang.ClassLoader)>($r33, r9)
org.apache.zeppelin.helium.ApplicationLoader.load : specialinvoke $r30.<org.apache.zeppelin.helium.ClassLoaderApplication: void <init>(org.apache.zeppelin.helium.Application,java.lang.ClassLoader)>($r33, r9) >>>>>>>> org.apache.zeppelin.helium.Application.context : $r1 = r0.<org.apache.zeppelin.helium.Application: org.apache.zeppelin.helium.ApplicationContext context>
org.apache.zeppelin.helium.Application.context : $r1 = r0.<org.apache.zeppelin.helium.Application: org.apache.zeppelin.helium.ApplicationContext context> >>>>>>>> org.apache.zeppelin.helium.Application.context : return $r1
org.apache.zeppelin.helium.Application.context : return $r1 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : r11 = $r30
org.apache.zeppelin.helium.ApplicationLoader.load : r11 = $r30 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : r12 = r11
org.apache.zeppelin.helium.ApplicationLoader.load : r12 = r11 >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : $r34 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.apache.zeppelin.helium.ApplicationLoader.load : $r34 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : virtualinvoke $r34.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r8)
org.apache.zeppelin.helium.ApplicationLoader.load : virtualinvoke $r34.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r8) >>>>>>>> org.apache.zeppelin.helium.ApplicationLoader.load : return r12
org.apache.zeppelin.helium.ApplicationLoader.load : return r12 >>>>>>>> org.apache.zeppelin.helium.ClassLoaderApplication.getInnerApplication : $r1 = r0.<org.apache.zeppelin.helium.ClassLoaderApplication: org.apache.zeppelin.helium.Application app>
org.apache.zeppelin.helium.ClassLoaderApplication.getInnerApplication : $r1 = r0.<org.apache.zeppelin.helium.ClassLoaderApplication: org.apache.zeppelin.helium.Application app> >>>>>>>> org.apache.zeppelin.helium.ClassLoaderApplication.getInnerApplication : return $r1
org.apache.zeppelin.helium.ClassLoaderApplication.getInnerApplication : return $r1 >>>>>>>> org.apache.zeppelin.helium.MockApplication1.isUnloaded : $z0 = r0.<org.apache.zeppelin.helium.MockApplication1: boolean unloaded>
org.apache.zeppelin.helium.MockApplication1.isUnloaded : $z0 = r0.<org.apache.zeppelin.helium.MockApplication1: boolean unloaded> >>>>>>>> org.apache.zeppelin.helium.MockApplication1.isUnloaded : return $z0
org.apache.zeppelin.helium.MockApplication1.isUnloaded : return $z0 >>>>>>>> org.apache.zeppelin.helium.MockApplication1.getNumRun : $i0 = r0.<org.apache.zeppelin.helium.MockApplication1: int run>
org.apache.zeppelin.helium.MockApplication1.getNumRun : $i0 = r0.<org.apache.zeppelin.helium.MockApplication1: int run> >>>>>>>> org.apache.zeppelin.helium.MockApplication1.getNumRun : return $i0
org.apache.zeppelin.helium.MockApplication1.getNumRun : return $i0 >>>>>>>> org.apache.zeppelin.helium.MockApplication1.unload : r0.<org.apache.zeppelin.helium.MockApplication1: boolean unloaded> = 1
