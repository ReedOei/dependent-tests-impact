org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r6 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r11 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : if null == r3 goto (branch)
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Collection val$intpToClose>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r14 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map access$000()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r18 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Map val$interpreterGroupRef>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : r3 = virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.scheduler.Scheduler getScheduler()>()
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : virtualinvoke r2.<org.apache.zeppelin.interpreter.Interpreter: void close()>()
org.apache.zeppelin.scheduler.RemoteScheduler.stop : exitmonitor r1
org.apache.zeppelin.scheduler.RemoteScheduler.stop : r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate> = 1
org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r3 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.stop : $r4 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.access$000 : $r0 = <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map allInterpreterGroups>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : return i0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : $r0 = new java.net.ServerSocket
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : i0 = virtualinvoke r1.<java.net.ServerSocket: int getLocalPort()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : if r1 == null goto return i0
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces : virtualinvoke r1.<java.net.ServerSocket: void close()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : $r19 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : r2 = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : if r1 != null goto r2 = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getInterpreterProcess : $r6 = virtualinvoke r1.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : $r3 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : if r1 != null goto $r3 = staticinvoke <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getInterpreterProcess()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getScheduler : i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: int maxPoolSize>
org.apache.zeppelin.scheduler.RemoteScheduler.getName : $r1 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.lang.String name>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("$l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()", "org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown")]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r2 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient eventClient>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r9 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : staticinvoke <java.lang.Thread: void sleep(long)>(300L)
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.shutdown : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.util.concurrent.atomic.AtomicInteger referenceCount>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.referenceCount : $r4 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: java.util.concurrent.atomic.AtomicInteger referenceCount>
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : return null
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : exitmonitor r2
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : if r3 == null goto exitmonitor r2
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : $r6 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : interfaceinvoke r3.<org.apache.zeppelin.scheduler.Scheduler: void stop()>()
org.apache.zeppelin.scheduler.SchedulerFactory.removeScheduler : $r5 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender.append : $r2 = r0.<org.apache.zeppelin.interpreter.remote.AppendOutputRunnerTest$TestAppender: java.util.List log>
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Collection)>(r3)
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void start()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>(r5)
org.apache.zeppelin.interpreter.InterpreterGroup.close : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void join()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r11 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(null, null, null, r1)
org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null goto $r7 = new org.apache.zeppelin.interpreter.InterpreterGroup$1
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r1 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r16 = <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map allInterpreterGroups>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterGroup.close : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = new org.apache.zeppelin.interpreter.InterpreterGroup$1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r1 = new java.net.Socket
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void close()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $z0 = 1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : $r3 = new java.net.InetSocketAddress
org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils.checkIfRemoteEndpointAccessible : virtualinvoke r2.<java.net.Socket: void setSoTimeout(int)>(1000)
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.closeInterpreter : $z1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean initialized>
org.apache.zeppelin.scheduler.SchedulerFactory.singleton : $r11 = <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton>
org.apache.zeppelin.scheduler.SchedulerFactory.singleton : $r0 = <org.apache.zeppelin.scheduler.SchedulerFactory: org.apache.zeppelin.scheduler.SchedulerFactory singleton>
org.apache.zeppelin.scheduler.RemoteScheduler.run : exitmonitor r1
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r6 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : goto [?= exitmonitor r1]
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r7 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List running>
org.apache.zeppelin.scheduler.RemoteScheduler.run : n0 = null
org.apache.zeppelin.scheduler.RemoteScheduler.run : $r9 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: java.util.List queue>
org.apache.zeppelin.scheduler.RemoteScheduler.run : $z0 = r0.<org.apache.zeppelin.scheduler.RemoteScheduler: boolean terminate>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.slf4j.Logger logger>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.run : $r3 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server>
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r51 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$onReceivedZeppelinResource
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r43 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularRegistryPush
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r9 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$cancel
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r7 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$interpret
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r49 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$runApplication
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r27 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceResponseInvokeMethod
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r37 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectUpdate
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r39 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectAdd
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r29 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourcePoolGetAll
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r45 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$loadApplication
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r5 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$close
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : return r0
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r23 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourcePoolResponseGetAll
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r25 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceResponseGet
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r3 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$open
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r33 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceRemove
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r17 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$shutdown
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r15 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$completion
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r13 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getFormType
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r47 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$unloadApplication
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r35 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceInvokeMethod
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r19 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getStatus
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r1 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$createInterpreter
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r31 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$resourceGet
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r11 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getProgress
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r41 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$angularObjectRemove
org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor.getProcessMap : $r21 = new org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService$Processor$getEvent
org.apache.zeppelin.interpreter.Interpreter.getInterpreterGroup : $r1 = r0.<org.apache.zeppelin.interpreter.Interpreter: org.apache.zeppelin.interpreter.InterpreterGroup interpreterGroup>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.getPort : $i0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: int port>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : exitmonitor r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : $r5 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient: java.util.List eventQueue>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.waitForEventQueueBecomesEmpty : $r4 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient: java.util.List eventQueue>
org.apache.zeppelin.interpreter.InterpreterGroup.getRemoteInterpreterProcess : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r16 = (org.apache.zeppelin.interpreter.remote.RemoteInterpreter) r6
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z0 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: boolean initialized>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r1 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: org.apache.zeppelin.interpreter.InterpreterGroup getInterpreterGroup()>()
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r2 = r1
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : exitmonitor r2
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r10 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreter: java.lang.String sessionKey>
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $z2 = r6 instanceof org.apache.zeppelin.interpreter.WrappedInterpreter
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : r6 = r5
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : $r13 = new java.util.ArrayList
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.interpreter.remote.RemoteInterpreter.close : goto [?= (branch)]
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : $r1 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server>
org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer.isRunning : $r2 = r0.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer: org.apache.thrift.server.TThreadPoolServer server>
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r13 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.concurrent.ExecutorService executor>
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r11 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r8 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r14 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r9 = new org.apache.zeppelin.scheduler.RemoteScheduler
org.apache.zeppelin.scheduler.SchedulerFactory.createOrGetRemoteScheduler : $r7 = r0.<org.apache.zeppelin.scheduler.SchedulerFactory: java.util.Map schedulers>
