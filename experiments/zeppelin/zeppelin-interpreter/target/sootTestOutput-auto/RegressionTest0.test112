org.apache.zeppelin.display.Input.getBlockStr : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("N_")
org.apache.zeppelin.display.Input.getBlockStr : return r0
org.apache.zeppelin.display.Input.getBlockStr : $r1 = "N_"
org.apache.zeppelin.display.Input.splitPipe : $r1 = staticinvoke <org.apache.zeppelin.display.Input: java.lang.String[] split(java.lang.String,char)>(r0, 124)
org.apache.zeppelin.display.Input.split : $i32 = i1 + 1
org.apache.zeppelin.display.Input.split : $i25 = virtualinvoke r0.<java.lang.String: int length()>()
org.apache.zeppelin.display.Input.split : $r5 = newarray (java.lang.String)[5]
org.apache.zeppelin.display.Input.split : $r30 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.display.Input.split : $r10 = new java.lang.StringBuilder
org.apache.zeppelin.display.Input.split : i30 = 0
org.apache.zeppelin.display.Input.split : i3 = 0
org.apache.zeppelin.display.Input.split : if z9 != 1 goto virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4)
org.apache.zeppelin.display.Input.split : $i33 = virtualinvoke r7.<java.lang.StringBuilder: int length()>()
org.apache.zeppelin.display.Input.split : i1 = -1
org.apache.zeppelin.display.Input.split : c0 = 92
org.apache.zeppelin.display.Input.split : $r20 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.display.Input.split : goto [?= i3 = i3 + 1]
org.apache.zeppelin.display.Input.split : i2 = i3
org.apache.zeppelin.display.Input.split : $r1 = newarray (java.lang.String)[1]
org.apache.zeppelin.display.Input.split : if c4 != c0 goto (branch)
org.apache.zeppelin.display.Input.split : z1 = 0
org.apache.zeppelin.display.Input.split : $r7 = staticinvoke <org.apache.zeppelin.display.Input: java.lang.String[] split(java.lang.String,java.lang.String,char,java.lang.String[],java.lang.String[],java.lang.String[],boolean)>(r0, r2, c0, r3, r4, r1, z0)
org.apache.zeppelin.display.Input.split : c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3)
org.apache.zeppelin.display.Input.split : z9 = 0
org.apache.zeppelin.display.Input.split : virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4)
org.apache.zeppelin.display.Input.split : i5 = 0
org.apache.zeppelin.display.Input.split : $r53 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.display.Input.split : i2 = -1
org.apache.zeppelin.display.Input.split : $r6 = newarray (java.lang.String)[5]
org.apache.zeppelin.display.Input.split : z2 = 0
org.apache.zeppelin.display.Input.split : $i11 = interfaceinvoke r8.<java.util.List: int size()>()
org.apache.zeppelin.display.Input.split : $r11 = new java.util.LinkedList
org.apache.zeppelin.display.Input.split : $r5 = new java.util.ArrayList
org.apache.zeppelin.display.Input.split : r2 = "\"\',;${}"
org.apache.zeppelin.display.Input.split : r44 = r4
org.apache.zeppelin.display.Input.split : $r55 = newarray (java.lang.String)[0]
org.apache.zeppelin.display.Input.split : if i2 < 0 goto i5 = i5 + 1
org.apache.zeppelin.display.Input.split : $i24 = virtualinvoke r45.<java.lang.String: int length()>()
org.apache.zeppelin.display.Input.split : if z1 != 1 goto $i11 = interfaceinvoke r8.<java.util.List: int size()>()
org.apache.zeppelin.display.Input.split : $r16 = staticinvoke <org.apache.zeppelin.display.Input: java.lang.String getBlockStr(java.lang.String)>($r15)
org.apache.zeppelin.display.Input.split : $r51 = staticinvoke <org.apache.zeppelin.display.Input: java.lang.String getBlockStr(java.lang.String)>($r50)
org.apache.zeppelin.display.Input.split : if z2 != 1 goto $r20 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(0)
org.apache.zeppelin.display.Input.split : $i17 = i1 + 1
org.apache.zeppelin.display.Input.split : $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i30)
org.apache.zeppelin.display.Input.isNestedBlock : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("N_")
org.apache.zeppelin.display.Input.isNestedBlock : return 0
