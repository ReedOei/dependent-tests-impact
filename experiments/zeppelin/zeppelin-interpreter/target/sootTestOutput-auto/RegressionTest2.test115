org.apache.zeppelin.display.Input.select : $r3 = new org.apache.zeppelin.display.ui.Select
org.apache.zeppelin.interpreter.InterpreterOption.setHost : r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host> = r1
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.display.Input.checkbox : $r3 = new org.apache.zeppelin.display.ui.CheckBox
org.apache.zeppelin.interpreter.InterpreterGroup.getInterpreterHookRegistry : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.InterpreterHookRegistry hookRegistry>
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r9 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.zeppelin.display.AngularObjectRegistry.remove : exitmonitor r4
org.apache.zeppelin.display.AngularObjectRegistry.remove : $r10 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.remove : r5 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r2, r3)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r8 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r7 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : r4 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.lang.String getRegistryKey(java.lang.String,java.lang.String)>(r1, r2)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryForKey : $r6 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.getAngularObjectListener : $r1 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectListener angularObjectListener>
org.apache.zeppelin.display.Input.getBlockStr : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("N_")
org.apache.zeppelin.display.Input.getBlockStr : return r0
org.apache.zeppelin.display.Input.getBlockStr : $r1 = "N_"
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z2 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean setPermission>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : return r2
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r7 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.util.List users>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z1 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $z0 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean remote>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r5 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perUser>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r3 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String host>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r1 = new org.apache.zeppelin.interpreter.InterpreterOption
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $i0 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: int port>
org.apache.zeppelin.interpreter.InterpreterOption.fromInterpreterOption : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterOption: java.lang.String perNote>
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : $r3 = new java.lang.StringBuilder
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r1 != null goto (branch)
org.apache.zeppelin.display.AngularObjectRegistry.getRegistryKey : if r2 != null goto $r3 = new java.lang.StringBuilder
org.apache.zeppelin.display.Input.splitPipe : $r1 = staticinvoke <org.apache.zeppelin.display.Input: java.lang.String[] split(java.lang.String,char)>(r0, 124)
org.apache.zeppelin.display.AngularObjectRegistry.add : $r11 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistryListener listener>
org.apache.zeppelin.display.AngularObjectRegistry.add : return r5
org.apache.zeppelin.display.AngularObjectRegistry.add : interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5)
org.apache.zeppelin.display.AngularObjectRegistry.add : $r5 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject add(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,boolean)>(r1, r2, r3, r4, 1)
org.apache.zeppelin.display.AngularObjectRegistry.add : exitmonitor r6
org.apache.zeppelin.display.AngularObjectRegistry.add : r5 = virtualinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: org.apache.zeppelin.display.AngularObject createNewAngularObject(java.lang.String,java.lang.Object,java.lang.String,java.lang.String)>(r1, r2, r3, r4)
org.apache.zeppelin.display.AngularObjectRegistry.add : $r9 = r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map registry>
org.apache.zeppelin.display.AngularObjectRegistry.add : r7 = specialinvoke r0.<org.apache.zeppelin.display.AngularObjectRegistry: java.util.Map getRegistryForKey(java.lang.String,java.lang.String)>(r3, r4)
org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry.add : $r3 = r0.<org.apache.zeppelin.helium.HeliumAppAngularObjectRegistry: org.apache.zeppelin.display.AngularObjectRegistry angularObjectRegistry>
org.apache.zeppelin.display.Input.split : $i32 = i1 + 1
org.apache.zeppelin.display.Input.split : $i25 = virtualinvoke r0.<java.lang.String: int length()>()
org.apache.zeppelin.display.Input.split : $r5 = newarray (java.lang.String)[5]
org.apache.zeppelin.display.Input.split : $r10 = new java.lang.StringBuilder
org.apache.zeppelin.display.Input.split : i30 = 0
org.apache.zeppelin.display.Input.split : i3 = 0
org.apache.zeppelin.display.Input.split : if z9 != 1 goto virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4)
org.apache.zeppelin.display.Input.split : $i33 = virtualinvoke r7.<java.lang.StringBuilder: int length()>()
org.apache.zeppelin.display.Input.split : i1 = -1
org.apache.zeppelin.display.Input.split : c0 = 92
org.apache.zeppelin.display.Input.split : $r1 = newarray (java.lang.String)[1]
org.apache.zeppelin.display.Input.split : if c4 != c0 goto (branch)
org.apache.zeppelin.display.Input.split : z1 = 0
org.apache.zeppelin.display.Input.split : $r7 = staticinvoke <org.apache.zeppelin.display.Input: java.lang.String[] split(java.lang.String,java.lang.String,char,java.lang.String[],java.lang.String[],java.lang.String[],boolean)>(r0, r2, c0, r3, r4, r1, z0)
org.apache.zeppelin.display.Input.split : c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3)
org.apache.zeppelin.display.Input.split : z9 = 0
org.apache.zeppelin.display.Input.split : virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4)
org.apache.zeppelin.display.Input.split : $r53 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.display.Input.split : i2 = -1
org.apache.zeppelin.display.Input.split : $r6 = newarray (java.lang.String)[5]
org.apache.zeppelin.display.Input.split : $i11 = interfaceinvoke r8.<java.util.List: int size()>()
org.apache.zeppelin.display.Input.split : $r11 = new java.util.LinkedList
org.apache.zeppelin.display.Input.split : $r5 = new java.util.ArrayList
org.apache.zeppelin.display.Input.split : r2 = "\"\',;${}"
org.apache.zeppelin.display.Input.split : r44 = r4
org.apache.zeppelin.display.Input.split : $r55 = newarray (java.lang.String)[0]
org.apache.zeppelin.display.Input.split : $i24 = virtualinvoke r45.<java.lang.String: int length()>()
org.apache.zeppelin.display.Input.split : if z1 != 1 goto $i11 = interfaceinvoke r8.<java.util.List: int size()>()
org.apache.zeppelin.display.Input.split : $r51 = staticinvoke <org.apache.zeppelin.display.Input: java.lang.String getBlockStr(java.lang.String)>($r50)
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r7 = virtualinvoke r0.<org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry: org.apache.zeppelin.display.AngularObjectListener getAngularObjectListener()>()
org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry.createNewAngularObject : $r5 = new org.apache.zeppelin.interpreter.remote.RemoteAngularObject
org.apache.zeppelin.interpreter.InterpreterOption.setExistingProcess : r0.<org.apache.zeppelin.interpreter.InterpreterOption: boolean isExistingProcess> = z0
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder
