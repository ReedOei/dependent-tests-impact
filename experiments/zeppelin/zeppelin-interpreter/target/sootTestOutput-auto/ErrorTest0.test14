org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r9 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: org.apache.zeppelin.interpreter.InterpreterGroup this$0>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Collection val$intpToClose>
org.apache.zeppelin.interpreter.InterpreterGroup$1.run : $r18 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup$1: java.util.Map val$interpreterGroupRef>
org.apache.zeppelin.display.Input.select : $r3 = new org.apache.zeppelin.display.ui.Select
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : return r3
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>()
org.apache.zeppelin.resource.ResourceSet.filterByClassnameRegex : $r2 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.dep.DependencyContext.getFiles : $r1 = r0.<org.apache.zeppelin.dep.DependencyContext: java.util.List files>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r5 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String generateId()>()
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r4 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.interpreter.InterpreterGroup.getId : r2 = r0
org.apache.zeppelin.interpreter.InterpreterGroup.getId : $r6 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.lang.String id>
org.apache.zeppelin.dep.Dependency.getExclusions : $r1 = r0.<org.apache.zeppelin.dep.Dependency: java.util.List exclusions>
org.apache.zeppelin.dep.DependencyContext.load : $r6 = r0.<org.apache.zeppelin.dep.DependencyContext: java.util.List dependencies>
org.apache.zeppelin.dep.DependencyContext.load : return r3
org.apache.zeppelin.dep.DependencyContext.load : $r2 = new org.apache.zeppelin.dep.Dependency
org.apache.zeppelin.dep.DependencyContext.load : $r4 = r0.<org.apache.zeppelin.dep.DependencyContext: java.util.List dependencies>
org.apache.zeppelin.interpreter.InterpreterGroup.getInterpreterHookRegistry : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.InterpreterHookRegistry hookRegistry>
org.apache.zeppelin.display.OldInput.equals : $r2 = r0.<org.apache.zeppelin.display.OldInput: java.lang.String name>
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Collection)>(r3)
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void start()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : if r4 != null goto $r7 = new org.apache.zeppelin.interpreter.InterpreterGroup$1
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r1 = <org.apache.zeppelin.interpreter.InterpreterGroup: org.slf4j.Logger LOGGER>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r16 = <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Map allInterpreterGroups>
org.apache.zeppelin.interpreter.InterpreterGroup.close : virtualinvoke r5.<java.lang.Thread: void join()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : specialinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: void close(java.util.Map,java.lang.String,java.lang.String,java.util.Collection)>(null, null, null, r1)
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r11 = virtualinvoke r0.<org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Collection values()>()
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r10 = new java.util.LinkedList
org.apache.zeppelin.interpreter.InterpreterGroup.close : goto [?= return]
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r13 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.interpreter.InterpreterGroup.close : $r7 = new org.apache.zeppelin.interpreter.InterpreterGroup$1
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResourcesExcept : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResourcesExcept : return r2
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResourcesExcept : if r5 != null goto $z4 = virtualinvoke r5.<org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess: boolean isRunning()>()
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResourcesExcept : r6 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool getResourcePool()>()
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResourcesExcept : $r1 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResourcesExcept : r5 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>()
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResourcesExcept : $r12 = staticinvoke <org.apache.zeppelin.interpreter.InterpreterGroup: java.util.Collection getAll()>()
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResourcesExcept : $r15 = interfaceinvoke r6.<org.apache.zeppelin.resource.ResourcePool: org.apache.zeppelin.resource.ResourceSet getAll()>()
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResourcesExcept : goto [?= (branch)]
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResourcesExcept : if r6 == null goto (branch)
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResourcesExcept : if r0 == null goto r5 = virtualinvoke r4.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess getRemoteInterpreterProcess()>()
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r5 = newarray (org.sonatype.aether.connector.wagon.WagonProvider)[1]
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r0 = new org.apache.maven.repository.internal.DefaultServiceLocator
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator addService(java.lang.Class,java.lang.Class)>(class "org/sonatype/aether/spi/connector/RepositoryConnectorFactory", class "org/sonatype/aether/connector/file/FileRepositoryConnectorFactory")
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : $r7 = virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: java.lang.Object getService(java.lang.Class)>(class "org/sonatype/aether/RepositorySystem")
org.apache.zeppelin.dep.RepositorySystemFactory.newRepositorySystem : virtualinvoke r1.<org.apache.maven.repository.internal.DefaultServiceLocator: org.sonatype.aether.impl.internal.DefaultServiceLocator addService(java.lang.Class,java.lang.Class)>(class "org/sonatype/aether/spi/connector/RepositoryConnectorFactory", class "org/sonatype/aether/connector/wagon/WagonRepositoryConnectorFactory")
org.apache.zeppelin.resource.ResourceSet.filterByClassname : return r3
org.apache.zeppelin.resource.ResourceSet.filterByClassname : r4 = virtualinvoke r0.<org.apache.zeppelin.resource.ResourceSet: java.util.Iterator iterator()>()
org.apache.zeppelin.resource.ResourceSet.filterByClassname : $r2 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.dep.Booter.newCentralRepository : $r1 = new org.sonatype.aether.repository.RemoteRepository
org.apache.zeppelin.dep.Booter.newCentralRepository : if r0 != null goto $r1 = new org.sonatype.aether.repository.RemoteRepository
org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zeppelin.interpreter.dep.mvnRepo")
org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = "http://repo1.maven.org/maven2/"
org.apache.zeppelin.dep.Booter.newCentralRepository : r0 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_INTERPRETER_DEP_MVNREPO")
org.apache.zeppelin.dep.Booter.newCentralRepository : if r0 != null goto (branch)
org.apache.zeppelin.interpreter.InterpreterGroup.getAll : $r0 = new java.util.LinkedList
org.apache.zeppelin.resource.ResourcePoolUtils.getAllResources : $r0 = staticinvoke <org.apache.zeppelin.resource.ResourcePoolUtils: org.apache.zeppelin.resource.ResourceSet getAllResourcesExcept(java.lang.String)>(null)
org.apache.zeppelin.interpreter.InterpreterResult.message : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterResult: java.util.List msg>
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r7 = interfaceinvoke r0.<org.sonatype.aether.RepositorySystem: org.sonatype.aether.repository.LocalRepositoryManager newLocalRepositoryManager(org.sonatype.aether.repository.LocalRepository)>(r3)
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : return r2
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "localRepoPath should have a value")
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r5 = new org.sonatype.aether.repository.LocalRepository
org.apache.zeppelin.dep.Booter.newRepositorySystemSession : $r4 = new org.apache.maven.repository.internal.MavenRepositorySystemSession
org.apache.zeppelin.interpreter.InterpreterGroup.getResourcePool : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.resource.ResourcePool resourcePool>
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ZEPPELIN_HOME")
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("zeppelin.home")
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : $r2 = newarray (java.lang.String)[0]
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : if r1 != null goto (branch)
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : r1 = ".."
org.apache.zeppelin.dep.Booter.resolveLocalRepoPath : if r1 != null goto $r2 = newarray (java.lang.String)[0]
org.apache.zeppelin.dep.Booter.newRepositorySystem : $r0 = staticinvoke <org.apache.zeppelin.dep.RepositorySystemFactory: org.sonatype.aether.RepositorySystem newRepositorySystem()>()
org.apache.zeppelin.interpreter.InterpreterGroup.getRemoteInterpreterProcess : $r1 = r0.<org.apache.zeppelin.interpreter.InterpreterGroup: org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess remoteInterpreterProcess>
org.apache.zeppelin.resource.LocalResourcePool.getAll : $r1 = new org.apache.zeppelin.resource.ResourceSet
org.apache.zeppelin.dep.Booter.newLocalRepository : $r0 = new org.sonatype.aether.repository.RemoteRepository
org.apache.zeppelin.dep.Booter.newLocalRepository : $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home")
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>()
org.apache.zeppelin.interpreter.InterpreterGroup.generateId : $r0 = new java.lang.StringBuilder
